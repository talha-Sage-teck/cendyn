{"version":3,"file":"editor.component.d.ts","sources":["editor.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, NgZone, OnDestroy, InjectionToken } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Events } from './Events';\nexport declare const TINYMCE_SCRIPT_SRC: InjectionToken<string>;\nexport declare class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {\n    private platformId;\n    private tinymceScriptSrc?;\n    cloudChannel: string;\n    apiKey: string;\n    init: Record<string, any> | undefined;\n    id: string;\n    initialValue: string | undefined;\n    outputFormat: 'html' | 'text' | undefined;\n    inline: boolean | undefined;\n    tagName: string | undefined;\n    plugins: string | undefined;\n    toolbar: string | string[] | undefined;\n    modelEvents: string;\n    allowedEvents: string | string[] | undefined;\n    ignoreEvents: string | string[] | undefined;\n    set disabled(val: boolean);\n    get disabled(): boolean;\n    get editor(): any;\n    ngZone: NgZone;\n    private _elementRef;\n    private _element;\n    private _disabled;\n    private _editor;\n    private onTouchedCallback;\n    private onChangeCallback;\n    constructor(elementRef: ElementRef, ngZone: NgZone, platformId: Object, tinymceScriptSrc?: string);\n    writeValue(value: string | null): void;\n    registerOnChange(fn: (_: any) => void): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    createElement(): void;\n    initialise(): void;\n    private getScriptSrc;\n    private initEditor;\n    private emitOnChange;\n}\n"]}