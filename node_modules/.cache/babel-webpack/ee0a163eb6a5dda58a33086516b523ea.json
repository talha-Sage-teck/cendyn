{"ast":null,"code":"/**\n * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.\n * Copyright (C) 2021 SalesAgility Ltd.\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License version 3 as published by the\n * Free Software Foundation with the addition of the following permission added\n * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK\n * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE\n * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * In accordance with Section 7(b) of the GNU Affero General Public License\n * version 3, these Appropriate Legal Notices must retain the display of the\n * \"Supercharged by SuiteCRM\" logo. If the display of the logos is not reasonably\n * feasible for technical reasons, the Appropriate Legal Notices must display\n * the words \"Supercharged by SuiteCRM\".\n */\nimport { ViewContainerRef } from '@angular/core';\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';\nimport { AppStateStore, StateManager, SystemConfigStore } from 'core';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"core\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"mainOutlet\"];\n\nfunction AppComponent_ng_container_1_app_full_page_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-full-page-spinner\");\n  }\n}\n\nfunction AppComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AppComponent_ng_container_1_app_full_page_spinner_1_Template, 1, 0, \"app-full-page-spinner\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const appState_r2 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", appState_r2.loading || appState_r2.initialAppLoading);\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(router, appStateStore, stateManager, systemConfigs) {\n      this.router = router;\n      this.appStateStore = appStateStore;\n      this.stateManager = stateManager;\n      this.systemConfigs = systemConfigs;\n      this.appState$ = this.appStateStore.vm$.pipe(debounceTime(0));\n      router.events.subscribe(routerEvent => this.checkRouterEvent(routerEvent));\n    }\n\n    checkRouterEvent(routerEvent) {\n      if (routerEvent instanceof NavigationStart) {\n        this.appStateStore.updateLoading('router-navigation', true);\n        this.conditionalCacheReset();\n      }\n\n      if (routerEvent instanceof NavigationEnd) {\n        // reset scroll on navigation\n        window.scrollTo(0, 0);\n        this.appStateStore.setRouteUrl(routerEvent.url);\n      }\n\n      if (routerEvent instanceof NavigationEnd || routerEvent instanceof NavigationCancel || routerEvent instanceof NavigationError) {\n        this.appStateStore.updateLoading('router-navigation', false);\n        this.appStateStore.updateInitialAppLoading(false);\n      }\n    }\n\n    conditionalCacheReset() {\n      const cacheClearActions = this.systemConfigs.getConfigValue('cache_reset_actions');\n      const previousModule = this.appStateStore.getModule();\n      const view = this.appStateStore.getView();\n\n      if (!cacheClearActions || !previousModule) {\n        return;\n      }\n\n      const resetCacheActions = cacheClearActions[previousModule];\n\n      if (!resetCacheActions || !resetCacheActions.length) {\n        return;\n      }\n\n      resetCacheActions.some(action => {\n        if (action === 'any' || action === view) {\n          this.stateManager.clearAuthBased();\n          return true;\n        }\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AppStateStore), i0.ɵɵdirectiveInject(i2.StateManager), i0.ɵɵdirectiveInject(i2.SystemConfigStore));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mainOutlet = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 3,\n    consts: [[1, \"app-shell\"], [4, \"ngIf\"], [\"mainOutlet\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, AppComponent_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelement(3, \"scrm-navbar-ui\");\n        i0.ɵɵelement(4, \"scrm-message-ui\");\n        i0.ɵɵelement(5, \"div\", null, 2);\n        i0.ɵɵelement(7, \"router-outlet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"scrm-footer-ui\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx.appState$));\n      }\n    },\n    directives: [i3.NgIf, i2.NavbarUiComponent, i2.MessageUiComponent, i1.RouterOutlet, i2.FooterUiComponent, i2.FullPageSpinnerComponent],\n    pipes: [i3.AsyncPipe],\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}