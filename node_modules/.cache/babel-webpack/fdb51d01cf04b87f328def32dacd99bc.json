{"ast":null,"code":"import { Injectable, ɵɵdefineInjectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass BnNgIdleService {\n  constructor() {\n    this.expired$ = new Subject();\n  }\n  /**\r\n   * @param {?} timeOutSeconds\r\n   * @return {?}\r\n   */\n\n\n  startWatching(timeOutSeconds) {\n    this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\n    this.idleSubscription = this.idle$.subscribe(\n    /**\r\n    * @param {?} res\r\n    * @return {?}\r\n    */\n    res => {\n      this.resetTimer();\n    });\n    this.startTimer();\n    return this.expired$;\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n\n\n  startTimer() {\n    this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe(\n    /**\r\n    * @param {?} res\r\n    * @return {?}\r\n    */\n    res => {\n      this.expired$.next(true);\n    });\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  resetTimer() {\n    this.timer$.unsubscribe();\n    this.startTimer();\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  stopTimer() {\n    this.timer$.unsubscribe();\n    this.idleSubscription.unsubscribe();\n  }\n\n}\n\nBnNgIdleService.ɵfac = function BnNgIdleService_Factory(t) {\n  return new (t || BnNgIdleService)();\n};\n\nBnNgIdleService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BnNgIdleService,\n  factory: BnNgIdleService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nBnNgIdleService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function BnNgIdleService_Factory() {\n    return new BnNgIdleService();\n  },\n  token: BnNgIdleService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  BnNgIdleService.prototype.idle$;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BnNgIdleService.prototype.timer$;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BnNgIdleService.prototype.timeOutMilliSeconds;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BnNgIdleService.prototype.idleSubscription;\n  /** @type {?} */\n\n  BnNgIdleService.prototype.expired$;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet BnNgIdleModule = /*#__PURE__*/(() => {\n  class BnNgIdleModule {}\n\n  BnNgIdleModule.ɵfac = function BnNgIdleModule_Factory(t) {\n    return new (t || BnNgIdleModule)();\n  };\n\n  BnNgIdleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BnNgIdleModule\n  });\n  BnNgIdleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [BnNgIdleService],\n    imports: [[]]\n  });\n  return BnNgIdleModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { BnNgIdleModule, BnNgIdleService }; //# sourceMappingURL=bn-ng-idle.js.map","map":null,"metadata":{},"sourceType":"module"}