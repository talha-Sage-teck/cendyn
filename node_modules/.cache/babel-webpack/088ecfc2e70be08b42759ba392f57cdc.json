{"ast":null,"code":"/**\n * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.\n * Copyright (C) 2021 SalesAgility Ltd.\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License version 3 as published by the\n * Free Software Foundation with the addition of the following permission added\n * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK\n * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE\n * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * In accordance with Section 7(b) of the GNU Affero General Public License\n * version 3, these Appropriate Legal Notices must retain the display of the\n * \"Supercharged by SuiteCRM\" logo. If the display of the logos is not reasonably\n * feasible for technical reasons, the Appropriate Legal Notices must display\n * the words \"Supercharged by SuiteCRM\".\n */\nimport { Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppStateStore, AuthGuard, BaseMetadataResolver, BaseModuleResolver, BaseRecordResolver, ClassicViewResolver, ClassicViewUiComponent, CreateRecordComponent, ExtensionLoader, InstallAuthGuard, InstallViewComponent, ListComponent, LoginAuthGuard, LoginUiComponent, RecordComponent, SystemConfigStore } from 'core';\nimport { take } from 'rxjs/operators';\nimport { isFalse } from 'common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"core\";\nexport let AppInit = /*#__PURE__*/(() => {\n  class AppInit {\n    constructor(router, systemConfigStore, appStore, injector, extensionLoader) {\n      this.router = router;\n      this.systemConfigStore = systemConfigStore;\n      this.appStore = appStore;\n      this.injector = injector;\n      this.extensionLoader = extensionLoader;\n    }\n\n    init() {\n      // eslint-disable-next-line compat/compat\n      return new Promise(resolve => {\n        this.systemConfigStore.load().subscribe(() => {\n          this.appStore.init();\n          this.extensionLoader.load(this.injector).pipe(take(1)).subscribe(() => {\n            const routes = this.router.config;\n            const configRoutes = this.systemConfigStore.getConfigValue('module_routing');\n            routes.push({\n              path: 'Login',\n              component: LoginUiComponent,\n              canActivate: [LoginAuthGuard],\n              runGuardsAndResolvers: 'always',\n              resolve: {\n                metadata: BaseMetadataResolver\n              },\n              data: {\n                reuseRoute: false,\n                load: {\n                  navigation: false,\n                  preferences: false,\n                  languageStrings: ['appStrings']\n                }\n              }\n            });\n            routes.push({\n              path: 'install',\n              component: InstallViewComponent,\n              canActivate: [InstallAuthGuard],\n              runGuardsAndResolvers: 'always',\n              resolve: {\n                metadata: BaseMetadataResolver\n              },\n              data: {\n                reuseRoute: false,\n                checkSession: false,\n                load: {\n                  navigation: false,\n                  preferences: false,\n                  languageStrings: ['appStrings']\n                }\n              }\n            });\n            Object.keys(configRoutes).forEach(routeName => {\n              if (configRoutes[routeName].index) {\n                routes.push({\n                  path: routeName,\n                  component: ListComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    metadata: BaseModuleResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName\n                  }\n                });\n                routes.push({\n                  path: routeName + '/index',\n                  component: ListComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    metadata: BaseModuleResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName\n                  }\n                });\n              }\n\n              if (configRoutes[routeName].list) {\n                routes.push({\n                  path: routeName + '/list',\n                  component: ListComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    metadata: BaseModuleResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName\n                  }\n                });\n              }\n\n              if (!isFalse(configRoutes[routeName].create) && !isFalse(configRoutes[routeName].record)) {\n                routes.push({\n                  path: routeName + '/create',\n                  component: CreateRecordComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    view: BaseModuleResolver,\n                    metadata: BaseRecordResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName,\n                    mode: 'create'\n                  }\n                });\n                routes.push({\n                  path: routeName + '/edit',\n                  component: CreateRecordComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    view: BaseModuleResolver,\n                    metadata: BaseRecordResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName,\n                    mode: 'create'\n                  }\n                });\n              }\n\n              if (configRoutes[routeName].record) {\n                routes.push({\n                  path: routeName + '/record/:record',\n                  component: RecordComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    view: BaseModuleResolver,\n                    metadata: BaseRecordResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName\n                  }\n                });\n                routes.push({\n                  path: routeName + '/edit/:record',\n                  component: RecordComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    view: BaseModuleResolver,\n                    metadata: BaseRecordResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName,\n                    mode: 'edit'\n                  }\n                });\n                routes.push({\n                  path: routeName + '/detail/:record',\n                  component: RecordComponent,\n                  canActivate: [AuthGuard],\n                  runGuardsAndResolvers: 'always',\n                  resolve: {\n                    view: BaseModuleResolver,\n                    metadata: BaseRecordResolver\n                  },\n                  data: {\n                    reuseRoute: false,\n                    checkSession: true,\n                    module: routeName\n                  }\n                });\n              }\n            });\n            routes.push({\n              path: ':module',\n              component: ClassicViewUiComponent,\n              canActivate: [AuthGuard],\n              runGuardsAndResolvers: 'always',\n              resolve: {\n                legacyUrl: ClassicViewResolver\n              },\n              data: {\n                reuseRoute: false,\n                checkSession: true\n              }\n            });\n            routes.push({\n              path: ':module/:action',\n              component: ClassicViewUiComponent,\n              canActivate: [AuthGuard],\n              runGuardsAndResolvers: 'always',\n              resolve: {\n                legacyUrl: ClassicViewResolver\n              },\n              data: {\n                reuseRoute: false,\n                checkSession: true\n              }\n            });\n            routes.push({\n              path: ':module/:action/:record',\n              component: ClassicViewUiComponent,\n              canActivate: [AuthGuard],\n              runGuardsAndResolvers: 'always',\n              resolve: {\n                legacyUrl: ClassicViewResolver\n              },\n              data: {\n                reuseRoute: false,\n                checkSession: true\n              }\n            });\n            routes.push({\n              path: '**',\n              redirectTo: 'Login'\n            });\n            routes.push({\n              path: '',\n              component: ClassicViewUiComponent\n            });\n            this.router.resetConfig(routes);\n            resolve();\n          });\n        });\n      });\n    }\n\n  }\n\n  AppInit.ɵfac = function AppInit_Factory(t) {\n    return new (t || AppInit)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.SystemConfigStore), i0.ɵɵinject(i2.AppStateStore), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.ExtensionLoader));\n  };\n\n  AppInit.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppInit,\n    factory: AppInit.ɵfac\n  });\n  return AppInit;\n})();","map":null,"metadata":{},"sourceType":"module"}