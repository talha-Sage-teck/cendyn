{"ast":null,"code":"import { __awaiter } from 'tslib';\nconst moduleMap = {};\nconst remoteMap = {};\nlet isDefaultScopeInitialized = false;\n\nfunction lookupExposedModule(remoteName, exposedModule) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const container = window[remoteName];\n    const factory = yield container.get(exposedModule);\n    const Module = factory();\n    return Module;\n  });\n}\n\nfunction initRemote(remoteName) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const container = window[remoteName]; // Do we still need to initialize the remote?\n\n    if (remoteMap[remoteName]) {\n      return container;\n    } // Do we still need to initialize the share scope?\n\n\n    if (!isDefaultScopeInitialized) {\n      yield __webpack_init_sharing__('default');\n      isDefaultScopeInitialized = true;\n    }\n\n    yield container.init(__webpack_share_scopes__.default);\n    remoteMap[remoteName] = true;\n    return container;\n  });\n}\n\nfunction loadRemoteEntry(remoteEntry, remoteName) {\n  return new Promise((resolve, reject) => {\n    // Is remoteEntry already loaded?\n    if (moduleMap[remoteEntry]) {\n      resolve();\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.src = remoteEntry;\n    script.onerror = reject;\n\n    script.onload = () => {\n      initRemote(remoteName);\n      moduleMap[remoteEntry] = true;\n      resolve();\n    };\n\n    document.body.appendChild(script);\n  });\n}\n\nfunction loadRemoteModule(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (options.remoteEntry) {\n      yield loadRemoteEntry(options.remoteEntry, options.remoteName);\n    }\n\n    return yield lookupExposedModule(options.remoteName, options.exposedModule);\n  });\n}\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { loadRemoteEntry, loadRemoteModule }; //# sourceMappingURL=angular-architects-module-federation-runtime.js.map","map":null,"metadata":{},"sourceType":"module"}