{"ast":null,"code":"/**\n * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.\n * Copyright (C) 2021 SalesAgility Ltd.\n *\n * This program is free software; you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License version 3 as published by the\n * Free Software Foundation with the addition of the following permission added\n * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK\n * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE\n * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * In accordance with Section 7(b) of the GNU Affero General Public License\n * version 3, these Appropriate Legal Notices must retain the display of the\n * \"Supercharged by SuiteCRM\" logo. If the display of the logos is not reasonably\n * feasible for technical reasons, the Appropriate Legal Notices must display\n * the words \"Supercharged by SuiteCRM\".\n */\nimport { APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { Apollo } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { ApolloLink, InMemoryCache } from '@apollo/client/core';\nimport { onError } from '@apollo/link-error';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AppStateStore, AuthService, ClassicViewUiModule, ColumnChooserModule, CreateRecordModule, ErrorInterceptor, FilterUiModule, FooterUiModule, FullPageSpinnerModule, ImageModule, InstallViewModule, ListContainerModule, ListHeaderModule, ListModule, MessageModalModule, MessageUiModule, ModuleTitleModule, NavbarUiModule, RecordListModalModule, RecordModule, TableModule } from 'core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { environment } from '../environments/environment';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { AppRouteReuseStrategy } from './app-router-reuse-strategy';\nimport { BnNgIdleService } from 'bn-ng-idle';\nimport { AppInit } from '@app/app-initializer';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nimport * as i2 from \"apollo-angular/http\";\nimport * as i3 from \"core\";\nimport * as i4 from \"angular-svg-icon\";\nexport const initializeApp = appInitService => () => appInitService.init();\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    constructor(apollo, httpLink, auth, appStore) {\n      this.auth = auth;\n      this.appStore = appStore;\n      const defaultOptions = {\n        watchQuery: {\n          fetchPolicy: 'no-cache'\n        },\n        query: {\n          fetchPolicy: 'no-cache'\n        }\n      };\n      const http = httpLink.create({\n        uri: environment.graphqlApiUrl,\n        withCredentials: true\n      });\n      const logoutLink = onError(err => {\n        if (err.graphQLErrors && err.graphQLErrors.length > 0) {\n          err.graphQLErrors.forEach(value => {\n            if (this.auth.isUserLoggedIn.value === true && value.message.includes('Access Denied')) {\n              auth.logout('LBL_SESSION_EXPIRED');\n            }\n          });\n        }\n      });\n      const middleware = new ApolloLink((operation, forward) => {\n        appStore.addActiveRequest();\n        return forward(operation);\n      });\n      const afterware = new ApolloLink((operation, forward) => {\n        return forward(operation).map(response => {\n          appStore.removeActiveRequest();\n          return response;\n        });\n      });\n      apollo.create({\n        defaultOptions,\n        link: ApolloLink.from([middleware, afterware, logoutLink.concat(http)]),\n        cache: new InMemoryCache()\n      });\n    }\n\n  }\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)(i0.ɵɵinject(i1.Apollo), i0.ɵɵinject(i2.HttpLink), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i3.AppStateStore));\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorInterceptor,\n      multi: true\n    }, {\n      provide: RouteReuseStrategy,\n      useClass: AppRouteReuseStrategy\n    }, BnNgIdleService, AppInit, {\n      provide: APP_INITIALIZER,\n      useFactory: initializeApp,\n      multi: true,\n      deps: [AppInit]\n    }],\n    imports: [[BrowserModule, HttpClientModule, AppRoutingModule, FooterUiModule, NavbarUiModule, MessageUiModule, ClassicViewUiModule, FilterUiModule, ListModule, RecordModule, CreateRecordModule, InstallViewModule, TableModule, ModuleTitleModule, ListHeaderModule, ListContainerModule, ColumnChooserModule, AngularSvgIconModule.forRoot(), ImageModule, BrowserAnimationsModule, NgbModule, FullPageSpinnerModule, MessageModalModule, RecordListModalModule]]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}