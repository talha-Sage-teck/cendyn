/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-directives/dynamic-directives.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Injector, Input, IterableDiffers, Optional, Output, } from '@angular/core';
import { DynamicComponentInjectorToken, } from '../component-injector/token';
import { IoFactoryService } from '../io/io-factory.service';
import { extractNgParamTypes, getCtorParamTypes } from '../util';
import { WindowRefService } from '../window-ref/window-ref.service';
/**
 * @record
 * @template T
 */
export function DynamicDirectiveDef() { }
if (false) {
    /** @type {?} */
    DynamicDirectiveDef.prototype.type;
    /** @type {?|undefined} */
    DynamicDirectiveDef.prototype.inputs;
    /** @type {?|undefined} */
    DynamicDirectiveDef.prototype.outputs;
}
/**
 * @template T
 * @param {?} type
 * @param {?=} inputs
 * @param {?=} outputs
 * @return {?}
 */
export function dynamicDirectiveDef(type, inputs, outputs) {
    return { type, inputs, outputs };
}
/**
 * @record
 * @template T
 */
export function DirectiveRef() { }
if (false) {
    /** @type {?} */
    DirectiveRef.prototype.instance;
    /** @type {?} */
    DirectiveRef.prototype.type;
    /** @type {?} */
    DirectiveRef.prototype.injector;
    /** @type {?} */
    DirectiveRef.prototype.hostComponent;
    /** @type {?} */
    DirectiveRef.prototype.hostView;
    /** @type {?} */
    DirectiveRef.prototype.location;
    /** @type {?} */
    DirectiveRef.prototype.changeDetectorRef;
    /** @type {?} */
    DirectiveRef.prototype.onDestroy;
}
export class DynamicDirectivesDirective {
    /**
     * @param {?} iterableDiffers
     * @param {?} ioFactoryService
     * @param {?} windowRef
     * @param {?=} componentInjector
     */
    constructor(iterableDiffers, ioFactoryService, windowRef, componentInjector) {
        this.iterableDiffers = iterableDiffers;
        this.ioFactoryService = ioFactoryService;
        this.windowRef = windowRef;
        this.componentInjector = componentInjector;
        this.ndcDynamicDirectivesCreated = new EventEmitter();
        this.dirRef = new Map();
        this.dirIo = new Map();
        this.dirsDiffer = this.iterableDiffers
            .find([])
            .create((/**
         * @param {?} _
         * @param {?} def
         * @return {?}
         */
        (_, def) => def.type));
    }
    /**
     * @private
     * @return {?}
     */
    get directives() {
        return (this.ndcDynamicDirectives || this.ngComponentOutletNdcDynamicDirectives);
    }
    /**
     * @private
     * @return {?}
     */
    get componentRef() {
        return this.componentInjector.componentRef;
    }
    /**
     * @private
     * @return {?}
     */
    get compInstance() {
        return this.componentRef && this.componentRef.instance;
    }
    /**
     * @private
     * @return {?}
     */
    get isCompChanged() {
        if (this.lastCompInstance !== this.compInstance) {
            this.lastCompInstance = this.compInstance;
            return true;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    get hostInjector() {
        return this.componentRef.injector;
    }
    /**
     * @private
     * @return {?}
     */
    get hostVcr() {
        // NOTE: Accessing private APIs of Angular
        // tslint:disable-next-line: no-string-literal
        return this.componentRef['_viewRef']['_viewContainerRef'];
    }
    /**
     * @private
     * @return {?}
     */
    get reflect() {
        return ((/** @type {?} */ (this.windowRef.nativeWindow))).Reflect;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.maybeDestroyDirectives()) {
            return;
        }
        /** @type {?} */
        const dirsChanges = this.dirsDiffer.diff(this.directives);
        if (!dirsChanges) {
            return this.updateDirectives();
        }
        this.processDirChanges(dirsChanges);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyAllDirectives();
    }
    /**
     * @private
     * @return {?}
     */
    maybeDestroyDirectives() {
        if (this.isCompChanged || !this.componentRef) {
            this.dirsDiffer.diff([]);
            this.destroyAllDirectives();
        }
        return !this.componentRef;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    processDirChanges(changes) {
        changes.forEachRemovedItem((/**
         * @param {?} __0
         * @return {?}
         */
        ({ item }) => this.destroyDirective(item)));
        /** @type {?} */
        const createdDirs = [];
        changes.forEachAddedItem((/**
         * @param {?} __0
         * @return {?}
         */
        ({ item }) => createdDirs.push(this.initDirective(item))));
        if (createdDirs.length) {
            this.ndcDynamicDirectivesCreated.emit(createdDirs.filter(Boolean));
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateDirectives() {
        this.directives.forEach((/**
         * @param {?} dir
         * @return {?}
         */
        dir => this.updateDirective(dir)));
    }
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    updateDirective(dirDef) {
        /** @type {?} */
        const io = this.dirIo.get(dirDef.type);
        io.update(dirDef.inputs, dirDef.outputs, false, false);
        io.maybeUpdate();
    }
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    initDirective(dirDef) {
        if (this.dirRef.has(dirDef.type)) {
            return;
        }
        /** @type {?} */
        const instance = this.createDirective(dirDef.type);
        /** @type {?} */
        const dir = {
            instance,
            type: dirDef.type,
            injector: this.hostInjector,
            hostComponent: this.componentRef.instance,
            hostView: this.componentRef.hostView,
            location: this.componentRef.location,
            changeDetectorRef: this.componentRef.changeDetectorRef,
            onDestroy: this.componentRef.onDestroy,
        };
        this.initDirIO(dir, dirDef.inputs, dirDef.outputs);
        this.callInitHooks(instance);
        this.dirRef.set(dir.type, dir);
        return dir;
    }
    /**
     * @private
     * @return {?}
     */
    destroyAllDirectives() {
        this.dirRef.forEach((/**
         * @param {?} dir
         * @return {?}
         */
        dir => this.destroyDirRef(dir)));
        this.dirRef.clear();
        this.dirIo.clear();
    }
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    destroyDirective(dirDef) {
        this.destroyDirRef(this.dirRef.get(dirDef.type));
        this.dirRef.delete(dirDef.type);
        this.dirIo.delete(dirDef.type);
    }
    /**
     * @private
     * @param {?} dir
     * @param {?=} inputs
     * @param {?=} outputs
     * @return {?}
     */
    initDirIO(dir, inputs, outputs) {
        /** @type {?} */
        const io = this.ioFactoryService.create();
        io.init({ componentRef: this.dirToCompDef(dir) }, { trackOutputChanges: true });
        io.update(inputs, outputs, !!inputs, !!outputs);
        this.dirIo.set(dir.type, io);
    }
    /**
     * @private
     * @param {?} dir
     * @return {?}
     */
    dirToCompDef(dir) {
        return {
            changeDetectorRef: this.componentRef.changeDetectorRef,
            hostView: this.componentRef.hostView,
            location: this.componentRef.location,
            destroy: this.componentRef.destroy,
            onDestroy: this.componentRef.onDestroy,
            injector: this.componentRef.injector,
            instance: dir.instance,
            componentType: dir.type,
        };
    }
    /**
     * @private
     * @param {?} dir
     * @return {?}
     */
    destroyDirRef(dir) {
        /** @type {?} */
        const io = this.dirIo.get(dir.type);
        io.ngOnDestroy();
        if ('ngOnDestroy' in dir.instance) {
            dir.instance.ngOnDestroy();
        }
    }
    /**
     * @private
     * @template T
     * @param {?} dirType
     * @return {?}
     */
    createDirective(dirType) {
        /** @type {?} */
        const directiveInjector = Injector.create({
            providers: [
                {
                    provide: dirType,
                    useClass: dirType,
                    deps: this.resolveDirParamTypes(dirType),
                },
                { provide: ElementRef, useValue: this.componentRef.location },
            ],
            parent: this.hostInjector,
            name: `DynamicDirectiveInjector:${dirType.name}@${this.componentRef.componentType.name}`,
        });
        return directiveInjector.get(dirType);
    }
    /**
     * @private
     * @param {?} dirType
     * @return {?}
     */
    resolveDirParamTypes(dirType) {
        var _a, _b;
        return ((_b = (_a = 
        // First try Angular Compiler's metadata
        extractNgParamTypes(dirType)) !== null && _a !== void 0 ? _a : 
        // Then fallback to Typescript Reflect API
        getCtorParamTypes(dirType, this.reflect)) !== null && _b !== void 0 ? _b : 
        // Bailout
        []);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    callInitHooks(obj) {
        this.callHook(obj, 'ngOnInit');
        this.callHook(obj, 'ngDoCheck');
        this.callHook(obj, 'ngAfterContentInit');
        this.callHook(obj, 'ngAfterContentChecked');
        this.callHook(obj, 'ngAfterViewInit');
        this.callHook(obj, 'ngAfterViewChecked');
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} hook
     * @param {?=} args
     * @return {?}
     */
    callHook(obj, hook, args = []) {
        if (obj[hook]) {
            obj[hook](...args);
        }
    }
}
DynamicDirectivesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicDirectives],[ngComponentOutletNdcDynamicDirectives]',
            },] }
];
/** @nocollapse */
DynamicDirectivesDirective.ctorParameters = () => [
    { type: IterableDiffers },
    { type: IoFactoryService },
    { type: WindowRefService },
    { type: undefined, decorators: [{ type: Inject, args: [DynamicComponentInjectorToken,] }, { type: Optional }] }
];
DynamicDirectivesDirective.propDecorators = {
    ndcDynamicDirectives: [{ type: Input }],
    ngComponentOutletNdcDynamicDirectives: [{ type: Input }],
    ndcDynamicDirectivesCreated: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DynamicDirectivesDirective.prototype.ndcDynamicDirectives;
    /** @type {?} */
    DynamicDirectivesDirective.prototype.ngComponentOutletNdcDynamicDirectives;
    /** @type {?} */
    DynamicDirectivesDirective.prototype.ndcDynamicDirectivesCreated;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.lastCompInstance;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.dirRef;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.dirIo;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.dirsDiffer;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.iterableDiffers;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.ioFactoryService;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.windowRef;
    /**
     * @type {?}
     * @private
     */
    DynamicDirectivesDirective.prototype.componentInjector;
}
//# sourceMappingURL=data:application/json;base64,