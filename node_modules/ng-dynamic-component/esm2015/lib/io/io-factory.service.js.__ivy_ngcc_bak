/**
 * @fileoverview added by tsickle
 * Generated from: lib/io/io-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Inject, Injectable, KeyValueDiffers, } from '@angular/core';
import { EventArgumentToken } from './event-argument';
import { IoService } from './io.service';
import * as i0 from "@angular/core";
import * as i1 from "./event-argument";
export class IoFactoryService {
    /**
     * @param {?} differs
     * @param {?} cfr
     * @param {?} eventArgument
     */
    constructor(differs, cfr, eventArgument) {
        this.differs = differs;
        this.cfr = cfr;
        this.eventArgument = eventArgument;
    }
    /**
     * @return {?}
     */
    create() {
        return new IoService(this.differs, this.cfr, this.eventArgument);
    }
}
IoFactoryService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
IoFactoryService.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver },
    { type: String, decorators: [{ type: Inject, args: [EventArgumentToken,] }] }
];
/** @nocollapse */ IoFactoryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IoFactoryService_Factory() { return new IoFactoryService(i0.ɵɵinject(i0.KeyValueDiffers), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i1.EventArgumentToken)); }, token: IoFactoryService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    IoFactoryService.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    IoFactoryService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    IoFactoryService.prototype.eventArgument;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8tZmFjdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtY29tcG9uZW50L3NyYy8iLCJzb3VyY2VzIjpbImxpYi9pby9pby1mYWN0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsd0JBQXdCLEVBQ3hCLE1BQU0sRUFDTixVQUFVLEVBQ1YsZUFBZSxHQUNoQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFHekMsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7O0lBQzNCLFlBQ1UsT0FBd0IsRUFDeEIsR0FBNkIsRUFFN0IsYUFBcUI7UUFIckIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDeEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFFN0Isa0JBQWEsR0FBYixhQUFhLENBQVE7SUFDNUIsQ0FBQzs7OztJQUVKLE1BQU07UUFDSixPQUFPLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7O1lBWEYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQU5oQyxlQUFlO1lBSGYsd0JBQXdCO3lDQWNyQixNQUFNLFNBQUMsa0JBQWtCOzs7Ozs7OztJQUYxQixtQ0FBZ0M7Ozs7O0lBQ2hDLCtCQUFxQzs7Ozs7SUFDckMseUNBQzZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBJbmplY3QsXG4gIEluamVjdGFibGUsXG4gIEtleVZhbHVlRGlmZmVycyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEV2ZW50QXJndW1lbnRUb2tlbiB9IGZyb20gJy4vZXZlbnQtYXJndW1lbnQnO1xuaW1wb3J0IHsgSW9TZXJ2aWNlIH0gZnJvbSAnLi9pby5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBJb0ZhY3RvcnlTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBASW5qZWN0KEV2ZW50QXJndW1lbnRUb2tlbilcbiAgICBwcml2YXRlIGV2ZW50QXJndW1lbnQ6IHN0cmluZyxcbiAgKSB7fVxuXG4gIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IElvU2VydmljZSh0aGlzLmRpZmZlcnMsIHRoaXMuY2ZyLCB0aGlzLmV2ZW50QXJndW1lbnQpO1xuICB9XG59XG4iXX0=