/**
 * @fileoverview added by tsickle
 * Generated from: lib/io/io.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ComponentFactoryResolver, Inject, Injectable, KeyValueDiffers, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { createChange, createNewChange, noop } from '../util';
import { EventArgumentToken } from './event-argument';
/**
 * @record
 */
export function IOMapInfo() { }
if (false) {
    /** @type {?} */
    IOMapInfo.prototype.propName;
    /** @type {?} */
    IOMapInfo.prototype.templateName;
}
/**
 * @record
 */
export function IoInitOptions() { }
if (false) {
    /** @type {?|undefined} */
    IoInitOptions.prototype.trackOutputChanges;
}
/**
 * @record
 */
function OutputsTypeProcessed() { }
export class IoService {
    /**
     * @param {?} differs
     * @param {?} cfr
     * @param {?} eventArgument
     */
    constructor(differs, cfr, eventArgument) {
        this.differs = differs;
        this.cfr = cfr;
        this.eventArgument = eventArgument;
        this.checkInit = this.failInit;
        this.lastComponentInst = null;
        this.inputsDiffer = this.differs.find({}).create();
        this.compFactory = null;
        this.outputsShouldDisconnect$ = new Subject();
        this.outputsChanged = (/**
         * @return {?}
         */
        () => false);
    }
    /**
     * @private
     * @return {?}
     */
    get compRef() {
        return this.compInjector.componentRef;
    }
    /**
     * @private
     * @return {?}
     */
    get componentInst() {
        return this.compRef ? this.compRef.instance : null;
    }
    /**
     * @private
     * @return {?}
     */
    get componentInstChanged() {
        if (this.lastComponentInst !== this.componentInst) {
            this.lastComponentInst = this.componentInst;
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get compCdr() {
        // tslint:disable-next-line: deprecation
        return this.compRef ? this.compRef.injector.get(ChangeDetectorRef) : null;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._disconnectOutputs();
    }
    /**
     * @param {?} componentInjector
     * @param {?=} options
     * @return {?}
     */
    init(componentInjector, options = {}) {
        this.checkInit = componentInjector ? noop : this.failInit;
        this.compInjector = componentInjector;
        if (options.trackOutputChanges) {
            /** @type {?} */
            const outputsDiffer = this.differs.find({}).create();
            this.outputsChanged = (/**
             * @param {?} outputs
             * @return {?}
             */
            outputs => !!outputsDiffer.diff(outputs));
        }
    }
    /**
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} inputsChanged
     * @param {?} outputsChanged
     * @return {?}
     */
    update(inputs, outputs, inputsChanged, outputsChanged) {
        this.checkInit();
        this.updateIO(inputs, outputs);
        /** @type {?} */
        const compChanged = this.componentInstChanged;
        if (compChanged || inputsChanged) {
            /** @type {?} */
            const inputsChanges = this._getInputsChanges();
            if (inputsChanges) {
                this._updateInputChanges(inputsChanges);
            }
            this.updateInputs(compChanged || !this.lastInputChanges);
        }
        if (compChanged || outputsChanged) {
            this.bindOutputs();
        }
    }
    /**
     * @return {?}
     */
    maybeUpdate() {
        this.checkInit();
        if (this.componentInstChanged) {
            this.updateInputs(true);
            this.bindOutputs();
            return;
        }
        if (this.outputsChanged(this.outputs)) {
            this.bindOutputs();
        }
        if (!this.inputs) {
            return;
        }
        /** @type {?} */
        const inputsChanges = this._getInputsChanges();
        if (inputsChanges) {
            /** @type {?} */
            const isNotFirstChange = !!this.lastInputChanges;
            this._updateInputChanges(inputsChanges);
            if (isNotFirstChange) {
                this.updateInputs();
            }
        }
    }
    /**
     * @private
     * @param {?} inputs
     * @param {?} outputs
     * @return {?}
     */
    updateIO(inputs, outputs) {
        this.inputs = inputs;
        this.outputs = outputs;
    }
    /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    updateInputs(isFirstChange = false) {
        if (isFirstChange) {
            this._updateCompFactory();
        }
        /** @type {?} */
        const compInst = this.componentInst;
        /** @type {?} */
        let inputs = this.inputs;
        if (!inputs || !compInst) {
            return;
        }
        inputs = this._resolveInputs(inputs);
        Object.keys(inputs).forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => (compInst[p] = inputs[p])));
        // Mark component for check to re-render with new inputs
        if (this.compCdr) {
            this.compCdr.markForCheck();
        }
        this.notifyOnInputChanges(this.lastInputChanges, isFirstChange);
    }
    /**
     * @private
     * @return {?}
     */
    bindOutputs() {
        this._disconnectOutputs();
        /** @type {?} */
        const compInst = this.componentInst;
        /** @type {?} */
        let outputs = this.outputs;
        if (!outputs || !compInst) {
            return;
        }
        outputs = this._resolveOutputs(outputs);
        Object.keys(outputs)
            .filter((/**
         * @param {?} p
         * @return {?}
         */
        p => compInst[p]))
            .forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => compInst[p]
            .pipe(takeUntil(this.outputsShouldDisconnect$))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => ((/** @type {?} */ (outputs[p])))(event)))));
    }
    /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    notifyOnInputChanges(changes = {}, forceFirstChanges) {
        // Exit early if component not interested to receive changes
        if (!this.componentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this._collectFirstChanges();
        }
        this.componentInst.ngOnChanges(changes);
    }
    /**
     * @private
     * @return {?}
     */
    _disconnectOutputs() {
        this.outputsShouldDisconnect$.next();
    }
    /**
     * @private
     * @return {?}
     */
    _getInputsChanges() {
        return this.inputsDiffer.diff(this.inputs);
    }
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    _updateInputChanges(differ) {
        this.lastInputChanges = this._collectChangesFromDiffer(differ);
    }
    /**
     * @private
     * @return {?}
     */
    _collectFirstChanges() {
        /** @type {?} */
        const changes = (/** @type {?} */ ({}));
        /** @type {?} */
        const inputs = this.inputs;
        Object.keys(inputs).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => (changes[prop] = createNewChange(inputs[prop]))));
        return this._resolveChanges(changes);
    }
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    _collectChangesFromDiffer(differ) {
        /** @type {?} */
        const changes = {};
        differ.forEachAddedItem((/**
         * @param {?} record
         * @return {?}
         */
        record => (changes[record.key] = createNewChange(record.currentValue))));
        differ.forEachChangedItem((/**
         * @param {?} record
         * @return {?}
         */
        record => (changes[record.key] = createChange(record.currentValue, record.previousValue))));
        return this._resolveChanges(changes);
    }
    /**
     * @private
     * @return {?}
     */
    _resolveCompFactory() {
        try {
            try {
                return this.cfr.resolveComponentFactory(this.compRef.componentType);
            }
            catch (e) {
                // Fallback if componentType does not exist (happens on NgComponentOutlet)
                return this.cfr.resolveComponentFactory(this.compRef.instance.constructor);
            }
        }
        catch (e) {
            // Factory not available - bailout
            return null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateCompFactory() {
        this.compFactory = this._resolveCompFactory();
    }
    /**
     * @private
     * @param {?} inputs
     * @return {?}
     */
    _resolveInputs(inputs) {
        if (!this.compFactory) {
            return inputs;
        }
        return this._remapIO(inputs, this.compFactory.inputs);
    }
    /**
     * @private
     * @param {?} outputs
     * @return {?}
     */
    _resolveOutputs(outputs) {
        outputs = this._processOutputs(outputs);
        if (!this.compFactory) {
            return outputs;
        }
        return this._remapIO(outputs, this.compFactory.outputs);
    }
    /**
     * @private
     * @param {?} outputs
     * @return {?}
     */
    _processOutputs(outputs) {
        /** @type {?} */
        const processedOutputs = {};
        Object.keys(outputs).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const outputExpr = outputs[key];
            if (typeof outputExpr === 'function') {
                processedOutputs[key] = outputExpr;
            }
            else {
                processedOutputs[key] =
                    outputExpr && this._processOutputArgs(outputExpr);
            }
        }));
        return processedOutputs;
    }
    /**
     * @private
     * @param {?} output
     * @return {?}
     */
    _processOutputArgs(output) {
        const { handler } = output;
        /** @type {?} */
        const args = 'args' in output ? output.args || [] : [this.eventArgument];
        return (/**
         * @param {?} event
         * @return {?}
         */
        event => handler(...args.map((/**
         * @param {?} arg
         * @return {?}
         */
        arg => (arg === this.eventArgument ? event : arg)))));
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _resolveChanges(changes) {
        if (!this.compFactory) {
            return changes;
        }
        return this._remapIO(changes, this.compFactory.inputs);
    }
    /**
     * @private
     * @template T
     * @param {?} io
     * @param {?} mapping
     * @return {?}
     */
    _remapIO(io, mapping) {
        /** @type {?} */
        const newIO = {};
        Object.keys(io).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const newKey = this._findPropByTplInMapping(key, mapping) || key;
            newIO[newKey] = io[key];
        }));
        return (/** @type {?} */ (newIO));
    }
    /**
     * @private
     * @param {?} tplName
     * @param {?} mapping
     * @return {?}
     */
    _findPropByTplInMapping(tplName, mapping) {
        for (const map of mapping) {
            if (map.templateName === tplName) {
                return map.propName;
            }
        }
        return null;
    }
    /**
     * @private
     * @return {?}
     */
    failInit() {
        throw Error('IoService: ComponentInjector was not set! Please call init() method!');
    }
}
IoService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
IoService.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver },
    { type: String, decorators: [{ type: Inject, args: [EventArgumentToken,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.checkInit;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.lastComponentInst;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.lastInputChanges;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.inputsDiffer;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.compFactory;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.outputsShouldDisconnect$;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.inputs;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.outputs;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.compInjector;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.outputsChanged;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    IoService.prototype.eventArgument;
}
//# sourceMappingURL=data:application/json;base64,