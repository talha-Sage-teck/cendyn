/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-io/dynamic-io.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject, Input, Optional, } from '@angular/core';
import { DynamicComponentInjectorToken, } from '../component-injector/token';
import { IoService } from '../io/io.service';
// tslint:disable-next-line: no-conflicting-lifecycle
export class DynamicIoDirective {
    /**
     * @param {?} ioService
     * @param {?=} componentInjector
     */
    constructor(ioService, componentInjector) {
        this.ioService = ioService;
        this.componentInjector = componentInjector;
        this.ioService.init(this.componentInjector);
    }
    /**
     * @private
     * @return {?}
     */
    get inputs() {
        return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;
    }
    /**
     * @private
     * @return {?}
     */
    get outputs() {
        return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.ioService.update(this.inputs, this.outputs, this.inputsChanged(changes), this.outputsChanged(changes));
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.ioService.maybeUpdate();
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    inputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicInputs' in changes ||
            'ndcDynamicInputs' in changes);
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    outputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicOutputs' in changes ||
            'ndcDynamicOutputs' in changes);
    }
}
DynamicIoDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]',
                providers: [IoService],
            },] }
];
/** @nocollapse */
DynamicIoDirective.ctorParameters = () => [
    { type: IoService },
    { type: undefined, decorators: [{ type: Inject, args: [DynamicComponentInjectorToken,] }, { type: Optional }] }
];
DynamicIoDirective.propDecorators = {
    ndcDynamicInputs: [{ type: Input }],
    ngComponentOutletNdcDynamicInputs: [{ type: Input }],
    ndcDynamicOutputs: [{ type: Input }],
    ngComponentOutletNdcDynamicOutputs: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicIoDirective.prototype.ndcDynamicInputs;
    /** @type {?} */
    DynamicIoDirective.prototype.ngComponentOutletNdcDynamicInputs;
    /** @type {?} */
    DynamicIoDirective.prototype.ndcDynamicOutputs;
    /** @type {?} */
    DynamicIoDirective.prototype.ngComponentOutletNdcDynamicOutputs;
    /**
     * @type {?}
     * @private
     */
    DynamicIoDirective.prototype.ioService;
    /**
     * @type {?}
     * @private
     */
    DynamicIoDirective.prototype.componentInjector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pby5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1jb21wb25lbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtaW8vZHluYW1pYy1pby5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULE1BQU0sRUFDTixLQUFLLEVBRUwsUUFBUSxHQUVULE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFFTCw2QkFBNkIsR0FDOUIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBUzdDLE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBa0I3QixZQUNVLFNBQW9CLEVBR3BCLGlCQUE0QztRQUg1QyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBR3BCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMkI7UUFFcEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFmRCxJQUFZLE1BQU07UUFDaEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGlDQUFpQyxDQUFDO0lBQ3pFLENBQUM7Ozs7O0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQztJQUMzRSxDQUFDOzs7OztJQVdELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDbkIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQzNCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQzdCLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU8sYUFBYSxDQUFDLE9BQXNCO1FBQzFDLE9BQU8sQ0FDTCxtQ0FBbUMsSUFBSSxPQUFPO1lBQzlDLGtCQUFrQixJQUFJLE9BQU8sQ0FDOUIsQ0FBQztJQUNKLENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxPQUFzQjtRQUMzQyxPQUFPLENBQ0wsb0NBQW9DLElBQUksT0FBTztZQUMvQyxtQkFBbUIsSUFBSSxPQUFPLENBQy9CLENBQUM7SUFDSixDQUFDOzs7WUF6REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFDTixpSEFBaUg7Z0JBQ25ILFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQzthQUN2Qjs7OztZQVJRLFNBQVM7NENBNkJiLE1BQU0sU0FBQyw2QkFBNkIsY0FDcEMsUUFBUTs7OytCQXBCVixLQUFLO2dEQUVMLEtBQUs7Z0NBRUwsS0FBSztpREFFTCxLQUFLOzs7O0lBTk4sOENBQzZCOztJQUM3QiwrREFDOEM7O0lBQzlDLCtDQUMrQjs7SUFDL0IsZ0VBQ2dEOzs7OztJQVc5Qyx1Q0FBNEI7Ozs7O0lBQzVCLCtDQUVvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRG9DaGVjayxcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPcHRpb25hbCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbXBvbmVudE91dGxldEluamVjdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi4vY29tcG9uZW50LWluamVjdG9yL2NvbXBvbmVudC1vdXRsZXQtaW5qZWN0b3IuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIER5bmFtaWNDb21wb25lbnRJbmplY3RvcixcbiAgRHluYW1pY0NvbXBvbmVudEluamVjdG9yVG9rZW4sXG59IGZyb20gJy4uL2NvbXBvbmVudC1pbmplY3Rvci90b2tlbic7XG5pbXBvcnQgeyBJb1NlcnZpY2UgfSBmcm9tICcuLi9pby9pby5zZXJ2aWNlJztcbmltcG9ydCB7IElucHV0c1R5cGUsIE91dHB1dHNUeXBlIH0gZnJvbSAnLi4vaW8vdHlwZXMnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbmZsaWN0aW5nLWxpZmVjeWNsZVxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOlxuICAgICdbbmRjRHluYW1pY0lucHV0c10sW25kY0R5bmFtaWNPdXRwdXRzXSxbbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljSW5wdXRzXSxbbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0c10nLFxuICBwcm92aWRlcnM6IFtJb1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljSW9EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIERvQ2hlY2sge1xuICBASW5wdXQoKVxuICBuZGNEeW5hbWljSW5wdXRzOiBJbnB1dHNUeXBlO1xuICBASW5wdXQoKVxuICBuZ0NvbXBvbmVudE91dGxldE5kY0R5bmFtaWNJbnB1dHM6IElucHV0c1R5cGU7XG4gIEBJbnB1dCgpXG4gIG5kY0R5bmFtaWNPdXRwdXRzOiBPdXRwdXRzVHlwZTtcbiAgQElucHV0KClcbiAgbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0czogT3V0cHV0c1R5cGU7XG5cbiAgcHJpdmF0ZSBnZXQgaW5wdXRzKCkge1xuICAgIHJldHVybiB0aGlzLm5kY0R5bmFtaWNJbnB1dHMgfHwgdGhpcy5uZ0NvbXBvbmVudE91dGxldE5kY0R5bmFtaWNJbnB1dHM7XG4gIH1cblxuICBwcml2YXRlIGdldCBvdXRwdXRzKCkge1xuICAgIHJldHVybiB0aGlzLm5kY0R5bmFtaWNPdXRwdXRzIHx8IHRoaXMubmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0cztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW9TZXJ2aWNlOiBJb1NlcnZpY2UsXG4gICAgQEluamVjdChEeW5hbWljQ29tcG9uZW50SW5qZWN0b3JUb2tlbilcbiAgICBAT3B0aW9uYWwoKVxuICAgIHByaXZhdGUgY29tcG9uZW50SW5qZWN0b3I/OiBEeW5hbWljQ29tcG9uZW50SW5qZWN0b3IsXG4gICkge1xuICAgIHRoaXMuaW9TZXJ2aWNlLmluaXQodGhpcy5jb21wb25lbnRJbmplY3Rvcik7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5pb1NlcnZpY2UudXBkYXRlKFxuICAgICAgdGhpcy5pbnB1dHMsXG4gICAgICB0aGlzLm91dHB1dHMsXG4gICAgICB0aGlzLmlucHV0c0NoYW5nZWQoY2hhbmdlcyksXG4gICAgICB0aGlzLm91dHB1dHNDaGFuZ2VkKGNoYW5nZXMpLFxuICAgICk7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgdGhpcy5pb1NlcnZpY2UubWF5YmVVcGRhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5wdXRzQ2hhbmdlZChjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgICduZ0NvbXBvbmVudE91dGxldE5kY0R5bmFtaWNJbnB1dHMnIGluIGNoYW5nZXMgfHxcbiAgICAgICduZGNEeW5hbWljSW5wdXRzJyBpbiBjaGFuZ2VzXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgb3V0cHV0c0NoYW5nZWQoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAnbmdDb21wb25lbnRPdXRsZXROZGNEeW5hbWljT3V0cHV0cycgaW4gY2hhbmdlcyB8fFxuICAgICAgJ25kY0R5bmFtaWNPdXRwdXRzJyBpbiBjaGFuZ2VzXG4gICAgKTtcbiAgfVxufVxuIl19