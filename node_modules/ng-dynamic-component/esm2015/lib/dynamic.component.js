/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, EventEmitter, Injector, Input, Output, Type, ViewContainerRef, } from '@angular/core';
import { DynamicComponentInjectorToken, } from './component-injector';
import * as ɵngcc0 from '@angular/core';
export class DynamicComponent {
    /**
     * @param {?} vcr
     * @param {?} cfr
     */
    constructor(vcr, cfr) {
        this.vcr = vcr;
        this.cfr = cfr;
        this.ndcDynamicCreated = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.ndcDynamicComponent) {
            this.createDynamicComponent();
        }
    }
    /**
     * @return {?}
     */
    createDynamicComponent() {
        this.vcr.clear();
        this.componentRef = null;
        if (this.ndcDynamicComponent) {
            this.componentRef = this.vcr.createComponent(this.cfr.resolveComponentFactory(this.ndcDynamicComponent), 0, this._resolveInjector(), this.ndcDynamicContent);
            this.ndcDynamicCreated.emit(this.componentRef);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _resolveInjector() {
        /** @type {?} */
        let injector = this.ndcDynamicInjector || this.vcr.injector;
        if (this.ndcDynamicProviders) {
            injector = Injector.create({
                providers: this.ndcDynamicProviders,
                parent: injector,
            });
        }
        return injector;
    }
}
DynamicComponent.ɵfac = function DynamicComponent_Factory(t) { return new (t || DynamicComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
DynamicComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DynamicComponent, selectors: [["ndc-dynamic"]], inputs: { ndcDynamicComponent: "ndcDynamicComponent", ndcDynamicInjector: "ndcDynamicInjector", ndcDynamicProviders: "ndcDynamicProviders", ndcDynamicContent: "ndcDynamicContent" }, outputs: { ndcDynamicCreated: "ndcDynamicCreated" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DynamicComponentInjectorToken, useExisting: DynamicComponent },
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DynamicComponent_Template(rf, ctx) { }, encapsulation: 2 });
/** @nocollapse */
DynamicComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
DynamicComponent.propDecorators = {
    ndcDynamicComponent: [{ type: Input }],
    ndcDynamicInjector: [{ type: Input }],
    ndcDynamicProviders: [{ type: Input }],
    ndcDynamicContent: [{ type: Input }],
    ndcDynamicCreated: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicComponent, [{
        type: Component,
        args: [{
                selector: 'ndc-dynamic',
                template: '',
                providers: [
                    { provide: DynamicComponentInjectorToken, useExisting: DynamicComponent },
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { ndcDynamicCreated: [{
            type: Output
        }], ndcDynamicComponent: [{
            type: Input
        }], ndcDynamicInjector: [{
            type: Input
        }], ndcDynamicProviders: [{
            type: Input
        }], ndcDynamicContent: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicComponent;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicInjector;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicProviders;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicContent;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicCreated;
    /** @type {?} */
    DynamicComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicComponent.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    DynamicComponent.prototype.cfr;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtY29tcG9uZW50L3NyYy9saWIvZHluYW1pYy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHdCQUF3QixFQUV4QixZQUFZLEVBQ1osUUFBUSxFQUNSLEtBQUssRUFFTCxNQUFNLEVBR04sSUFBSSxFQUNKLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBRUwsNkJBQTZCLEdBQzlCLE1BQU0sc0JBQXNCLENBQUM7O0FBUzlCLE1BQU0sT0FBTyxnQkFBZ0I7QUFBRztBQUFRO0FBQXNCO0FBQ3pEO0FBQ0gsSUFhQSxZQUNVLEdBQXFCLEVBQ3JCLEdBQTZCO0FBQ3ZDLFFBRlUsUUFBRyxHQUFILEdBQUcsQ0FBa0I7QUFBQyxRQUN0QixRQUFHLEdBQUgsR0FBRyxDQUEwQjtBQUFDLFFBTnhDLHNCQUFpQixHQUFvQyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzFFLElBTUssQ0FBQztBQUNOO0FBQ087QUFBMEI7QUFDckI7QUFBUSxJQURsQixXQUFXLENBQUMsT0FBc0I7QUFDcEMsUUFBSSxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRTtBQUNyQyxZQUFNLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ3BDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBQ3JCLElBREgsc0JBQXNCO0FBQ3hCLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNyQixRQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQzdCLFFBQ0ksSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7QUFDbEMsWUFBTSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUMxRCxDQUFDLEVBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQ3ZCLElBQUksQ0FBQyxpQkFBaUIsQ0FDdkIsQ0FBQztBQUNSLFlBQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckQsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBZ0I7QUFDdEI7QUFBUSxJQURDLGdCQUFnQjtBQUFLO0FBQ2hCLFlBQVAsUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVE7QUFDL0QsUUFDSSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtBQUNsQyxZQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ2pDLGdCQUFRLFNBQVMsRUFBRSxJQUFJLENBQUMsbUJBQW1CO0FBQzNDLGdCQUFRLE1BQU0sRUFBRSxRQUFRO0FBQ3hCLGFBQU8sQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLFFBQ0ksT0FBTyxRQUFRLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0g7NENBNURDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsYUFBYSxrQkFDdkIsUUFBUSxFQUFFLEVBQUUsa0JBQ1osU0FBUyxFQUFFLHNCQUNULEVBQUUsT0FBTyxFQUFFO1lBQTZCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLG1CQUMxRSxjQUNGOzs0SUFDRztBQUFDO0FBQW1CO0FBQTBDLFlBZmhFLGdCQUFnQjtBQUNoQixZQVhBLHdCQUF3QjtBQUN6QjtBQUFHO0FBRUksa0NBdUJMLEtBQUs7QUFDTixpQ0FDQyxLQUFLO0FBQ04sa0NBQ0MsS0FBSztBQUNOLGdDQUNDLEtBQUs7QUFDTixnQ0FFQyxNQUFNO0FBQ1I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUM7QUFBYTtBQUFxQixJQVZwQywrQ0FDK0I7QUFDakM7QUFDVSxJQURSLDhDQUM2QjtBQUMvQjtBQUNVLElBRFIsK0NBQ3NDO0FBQ3hDO0FBQ1UsSUFEUiw2Q0FDMkI7QUFDN0I7QUFFUSxJQUROLDZDQUN3RTtBQUMxRTtBQUNvQixJQUFsQix3Q0FBdUM7QUFDekM7QUFDTztBQUNFO0FBQWdCO0FBQVEsSUFBN0IsK0JBQTZCO0FBQUM7QUFDM0I7QUFBaUI7QUFBZ0I7QUFDbkMsSUFERCwrQkFBcUM7QUFBQztBQUN6QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBDb21wb25lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgU3RhdGljUHJvdmlkZXIsXG4gIFR5cGUsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBEeW5hbWljQ29tcG9uZW50SW5qZWN0b3IsXG4gIER5bmFtaWNDb21wb25lbnRJbmplY3RvclRva2VuLFxufSBmcm9tICcuL2NvbXBvbmVudC1pbmplY3Rvcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25kYy1keW5hbWljJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IER5bmFtaWNDb21wb25lbnRJbmplY3RvclRva2VuLCB1c2VFeGlzdGluZzogRHluYW1pY0NvbXBvbmVudCB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBEeW5hbWljQ29tcG9uZW50SW5qZWN0b3Ige1xuICBASW5wdXQoKVxuICBuZGNEeW5hbWljQ29tcG9uZW50OiBUeXBlPGFueT47XG4gIEBJbnB1dCgpXG4gIG5kY0R5bmFtaWNJbmplY3RvcjogSW5qZWN0b3I7XG4gIEBJbnB1dCgpXG4gIG5kY0R5bmFtaWNQcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW107XG4gIEBJbnB1dCgpXG4gIG5kY0R5bmFtaWNDb250ZW50OiBhbnlbXVtdO1xuXG4gIEBPdXRwdXQoKVxuICBuZGNEeW5hbWljQ3JlYXRlZDogRXZlbnRFbWl0dGVyPENvbXBvbmVudFJlZjxhbnk+PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+IHwgbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLm5kY0R5bmFtaWNDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY3JlYXRlRHluYW1pY0NvbXBvbmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUR5bmFtaWNDb21wb25lbnQoKSB7XG4gICAgdGhpcy52Y3IuY2xlYXIoKTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5uZGNEeW5hbWljQ29tcG9uZW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMudmNyLmNyZWF0ZUNvbXBvbmVudChcbiAgICAgICAgdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy5uZGNEeW5hbWljQ29tcG9uZW50KSxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy5fcmVzb2x2ZUluamVjdG9yKCksXG4gICAgICAgIHRoaXMubmRjRHluYW1pY0NvbnRlbnQsXG4gICAgICApO1xuICAgICAgdGhpcy5uZGNEeW5hbWljQ3JlYXRlZC5lbWl0KHRoaXMuY29tcG9uZW50UmVmKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9yZXNvbHZlSW5qZWN0b3IoKTogSW5qZWN0b3Ige1xuICAgIGxldCBpbmplY3RvciA9IHRoaXMubmRjRHluYW1pY0luamVjdG9yIHx8IHRoaXMudmNyLmluamVjdG9yO1xuXG4gICAgaWYgKHRoaXMubmRjRHluYW1pY1Byb3ZpZGVycykge1xuICAgICAgaW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICBwcm92aWRlcnM6IHRoaXMubmRjRHluYW1pY1Byb3ZpZGVycyxcbiAgICAgICAgcGFyZW50OiBpbmplY3RvcixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbmplY3RvcjtcbiAgfVxufVxuIl19