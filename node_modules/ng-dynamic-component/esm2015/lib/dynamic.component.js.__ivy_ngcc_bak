/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, EventEmitter, Injector, Input, Output, Type, ViewContainerRef, } from '@angular/core';
import { DynamicComponentInjectorToken, } from './component-injector';
export class DynamicComponent {
    /**
     * @param {?} vcr
     * @param {?} cfr
     */
    constructor(vcr, cfr) {
        this.vcr = vcr;
        this.cfr = cfr;
        this.ndcDynamicCreated = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.ndcDynamicComponent) {
            this.createDynamicComponent();
        }
    }
    /**
     * @return {?}
     */
    createDynamicComponent() {
        this.vcr.clear();
        this.componentRef = null;
        if (this.ndcDynamicComponent) {
            this.componentRef = this.vcr.createComponent(this.cfr.resolveComponentFactory(this.ndcDynamicComponent), 0, this._resolveInjector(), this.ndcDynamicContent);
            this.ndcDynamicCreated.emit(this.componentRef);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _resolveInjector() {
        /** @type {?} */
        let injector = this.ndcDynamicInjector || this.vcr.injector;
        if (this.ndcDynamicProviders) {
            injector = Injector.create({
                providers: this.ndcDynamicProviders,
                parent: injector,
            });
        }
        return injector;
    }
}
DynamicComponent.decorators = [
    { type: Component, args: [{
                selector: 'ndc-dynamic',
                template: '',
                providers: [
                    { provide: DynamicComponentInjectorToken, useExisting: DynamicComponent },
                ]
            }] }
];
/** @nocollapse */
DynamicComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
DynamicComponent.propDecorators = {
    ndcDynamicComponent: [{ type: Input }],
    ndcDynamicInjector: [{ type: Input }],
    ndcDynamicProviders: [{ type: Input }],
    ndcDynamicContent: [{ type: Input }],
    ndcDynamicCreated: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicComponent;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicInjector;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicProviders;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicContent;
    /** @type {?} */
    DynamicComponent.prototype.ndcDynamicCreated;
    /** @type {?} */
    DynamicComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicComponent.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    DynamicComponent.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1jb21wb25lbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCx3QkFBd0IsRUFFeEIsWUFBWSxFQUNaLFFBQVEsRUFDUixLQUFLLEVBRUwsTUFBTSxFQUdOLElBQUksRUFDSixnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUVMLDZCQUE2QixHQUM5QixNQUFNLHNCQUFzQixDQUFDO0FBUzlCLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBZTNCLFlBQ1UsR0FBcUIsRUFDckIsR0FBNkI7UUFEN0IsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFDckIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFOdkMsc0JBQWlCLEdBQW9DLElBQUksWUFBWSxFQUFFLENBQUM7SUFPckUsQ0FBQzs7Ozs7SUFFSixXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsbUJBQW1CLEVBQUU7WUFDL0IsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDL0I7SUFDSCxDQUFDOzs7O0lBRUQsc0JBQXNCO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFekIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFDMUQsQ0FBQyxFQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQ3ZCLENBQUM7WUFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7Ozs7O0lBRU8sZ0JBQWdCOztZQUNsQixRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUTtRQUUzRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM1QixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDekIsU0FBUyxFQUFFLElBQUksQ0FBQyxtQkFBbUI7Z0JBQ25DLE1BQU0sRUFBRSxRQUFRO2FBQ2pCLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQzs7O1lBM0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osU0FBUyxFQUFFO29CQUNULEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTtpQkFDMUU7YUFDRjs7OztZQWRDLGdCQUFnQjtZQVZoQix3QkFBd0I7OztrQ0EwQnZCLEtBQUs7aUNBRUwsS0FBSztrQ0FFTCxLQUFLO2dDQUVMLEtBQUs7Z0NBR0wsTUFBTTs7OztJQVRQLCtDQUMrQjs7SUFDL0IsOENBQzZCOztJQUM3QiwrQ0FDc0M7O0lBQ3RDLDZDQUMyQjs7SUFFM0IsNkNBQ3dFOztJQUV4RSx3Q0FBdUM7Ozs7O0lBR3JDLCtCQUE2Qjs7Ozs7SUFDN0IsK0JBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBTdGF0aWNQcm92aWRlcixcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gIER5bmFtaWNDb21wb25lbnRJbmplY3RvcixcbiAgRHluYW1pY0NvbXBvbmVudEluamVjdG9yVG9rZW4sXG59IGZyb20gJy4vY29tcG9uZW50LWluamVjdG9yJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmRjLWR5bmFtaWMnLFxuICB0ZW1wbGF0ZTogJycsXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogRHluYW1pY0NvbXBvbmVudEluamVjdG9yVG9rZW4sIHVzZUV4aXN0aW5nOiBEeW5hbWljQ29tcG9uZW50IH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIER5bmFtaWNDb21wb25lbnRJbmplY3RvciB7XG4gIEBJbnB1dCgpXG4gIG5kY0R5bmFtaWNDb21wb25lbnQ6IFR5cGU8YW55PjtcbiAgQElucHV0KClcbiAgbmRjRHluYW1pY0luamVjdG9yOiBJbmplY3RvcjtcbiAgQElucHV0KClcbiAgbmRjRHluYW1pY1Byb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXTtcbiAgQElucHV0KClcbiAgbmRjRHluYW1pY0NvbnRlbnQ6IGFueVtdW107XG5cbiAgQE91dHB1dCgpXG4gIG5kY0R5bmFtaWNDcmVhdGVkOiBFdmVudEVtaXR0ZXI8Q29tcG9uZW50UmVmPGFueT4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMubmRjRHluYW1pY0NvbXBvbmVudCkge1xuICAgICAgdGhpcy5jcmVhdGVEeW5hbWljQ29tcG9uZW50KCk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRHluYW1pY0NvbXBvbmVudCgpIHtcbiAgICB0aGlzLnZjci5jbGVhcigpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmID0gbnVsbDtcblxuICAgIGlmICh0aGlzLm5kY0R5bmFtaWNDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy52Y3IuY3JlYXRlQ29tcG9uZW50KFxuICAgICAgICB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0aGlzLm5kY0R5bmFtaWNDb21wb25lbnQpLFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLl9yZXNvbHZlSW5qZWN0b3IoKSxcbiAgICAgICAgdGhpcy5uZGNEeW5hbWljQ29udGVudCxcbiAgICAgICk7XG4gICAgICB0aGlzLm5kY0R5bmFtaWNDcmVhdGVkLmVtaXQodGhpcy5jb21wb25lbnRSZWYpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3Jlc29sdmVJbmplY3RvcigpOiBJbmplY3RvciB7XG4gICAgbGV0IGluamVjdG9yID0gdGhpcy5uZGNEeW5hbWljSW5qZWN0b3IgfHwgdGhpcy52Y3IuaW5qZWN0b3I7XG5cbiAgICBpZiAodGhpcy5uZGNEeW5hbWljUHJvdmlkZXJzKSB7XG4gICAgICBpbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICAgIHByb3ZpZGVyczogdGhpcy5uZGNEeW5hbWljUHJvdmlkZXJzLFxuICAgICAgICBwYXJlbnQ6IGluamVjdG9yLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluamVjdG9yO1xuICB9XG59XG4iXX0=