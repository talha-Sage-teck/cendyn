/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic-attributes/dynamic-attributes.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject, Injector, Input, KeyValueDiffers, Optional, Renderer2, } from '@angular/core';
import { DynamicComponentInjectorToken, } from '../component-injector/token';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function AttributesMap() { }
/**
 * @record
 */
function AttributeActions() { }
if (false) {
    /** @type {?} */
    AttributeActions.prototype.set;
    /** @type {?} */
    AttributeActions.prototype.remove;
}
export class DynamicAttributesDirective {
    /**
     * @param {?} renderer
     * @param {?} differs
     * @param {?} injector
     * @param {?=} componentInjector
     */
    constructor(renderer, differs, injector, componentInjector) {
        this.renderer = renderer;
        this.differs = differs;
        this.injector = injector;
        this.componentInjector = componentInjector;
        this.attrsDiffer = this.differs.find({}).create();
    }
    /**
     * @private
     * @return {?}
     */
    get _attributes() {
        return (this.ndcDynamicAttributes || this.ngComponentOutletNdcDynamicAttributes);
    }
    /**
     * @private
     * @return {?}
     */
    get _nativeElement() {
        var _a;
        return (_a = this.componentInjector.componentRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement;
    }
    /**
     * @private
     * @return {?}
     */
    get _compType() {
        var _a;
        return (_a = this.componentInjector.componentRef) === null || _a === void 0 ? void 0 : _a.componentType;
    }
    /**
     * @private
     * @return {?}
     */
    get _isCompChanged() {
        if (this.lastCompType !== this._compType) {
            this.lastCompType = this._compType;
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const isCompChanged = this._isCompChanged;
        /** @type {?} */
        const changes = this.attrsDiffer.diff(this._attributes);
        if (changes) {
            this.lastAttrActions = this._changesToAttrActions(changes);
        }
        if (changes || (isCompChanged && this.lastAttrActions)) {
            this._updateAttributes(this.lastAttrActions);
        }
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(name, value, namespace) {
        if (this._nativeElement) {
            this.renderer.setAttribute(this._nativeElement, name, value, namespace);
        }
    }
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(name, namespace) {
        if (this._nativeElement) {
            this.renderer.removeAttribute(this._nativeElement, name, namespace);
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    _updateAttributes(actions) {
        // ? Early exit if no dynamic component
        if (!this._compType) {
            return;
        }
        Object.keys(actions.set).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => this.setAttribute(key, actions.set[key])));
        actions.remove.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => this.removeAttribute(key)));
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _changesToAttrActions(changes) {
        /** @type {?} */
        const attrActions = {
            set: {},
            remove: [],
        };
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => (attrActions.set[r.key] = r.currentValue)));
        changes.forEachChangedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => (attrActions.set[r.key] = r.currentValue)));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => attrActions.remove.push(r.key)));
        return attrActions;
    }
}
DynamicAttributesDirective.ɵfac = function DynamicAttributesDirective_Factory(t) { return new (t || DynamicAttributesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(DynamicComponentInjectorToken, 8)); };
DynamicAttributesDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DynamicAttributesDirective, selectors: [["", "ndcDynamicAttributes", ""], ["", "ngComponentOutletNdcDynamicAttributes", ""]], inputs: { ndcDynamicAttributes: "ndcDynamicAttributes", ngComponentOutletNdcDynamicAttributes: "ngComponentOutletNdcDynamicAttributes" }, exportAs: ["ndcDynamicAttributes"] });
/** @nocollapse */
DynamicAttributesDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: KeyValueDiffers },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [DynamicComponentInjectorToken,] }, { type: Optional }] }
];
DynamicAttributesDirective.propDecorators = {
    ndcDynamicAttributes: [{ type: Input }],
    ngComponentOutletNdcDynamicAttributes: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicAttributesDirective, [{
        type: Directive,
        args: [{
                selector: '[ndcDynamicAttributes],[ngComponentOutletNdcDynamicAttributes]',
                exportAs: 'ndcDynamicAttributes'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.KeyValueDiffers }, { type: ɵngcc0.Injector }, { type: undefined, decorators: [{
                type: Inject,
                args: [DynamicComponentInjectorToken]
            }, {
                type: Optional
            }] }]; }, { ndcDynamicAttributes: [{
            type: Input
        }], ngComponentOutletNdcDynamicAttributes: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    DynamicAttributesDirective.prototype.ndcDynamicAttributes;
    /** @type {?} */
    DynamicAttributesDirective.prototype.ngComponentOutletNdcDynamicAttributes;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.attrsDiffer;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.lastCompType;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.lastAttrActions;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.componentInjector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,