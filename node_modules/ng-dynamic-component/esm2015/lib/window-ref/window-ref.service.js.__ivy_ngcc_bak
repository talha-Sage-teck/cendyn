/**
 * @fileoverview added by tsickle
 * Generated from: lib/window-ref/window-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, InjectionToken, Injector } from '@angular/core';
import { browserWindowFactory } from './window-ref-browser';
import * as i0 from "@angular/core";
/** @type {?} */
export const WindowRefToken = new InjectionToken('WindowRef', {
    providedIn: 'root',
    factory: browserWindowFactory,
});
export class WindowRefService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.nativeWindow = this.injector.get(WindowRefToken, null);
    }
}
WindowRefService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
WindowRefService.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ WindowRefService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WindowRefService_Factory() { return new WindowRefService(i0.ɵɵinject(i0.INJECTOR)); }, token: WindowRefService, providedIn: "root" });
if (false) {
    /** @type {?} */
    WindowRefService.prototype.nativeWindow;
    /**
     * @type {?}
     * @private
     */
    WindowRefService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXJlZi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtY29tcG9uZW50L3NyYy8iLCJzb3VyY2VzIjpbImxpYi93aW5kb3ctcmVmL3dpbmRvdy1yZWYuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBRTVELE1BQU0sT0FBTyxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQVMsV0FBVyxFQUFFO0lBQ3BFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxvQkFBb0I7Q0FDOUIsQ0FBQztBQUdGLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFHM0IsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUZ0QyxpQkFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVkLENBQUM7OztZQUozQyxVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBVEcsUUFBUTs7Ozs7SUFXM0Msd0NBQXVEOzs7OztJQUUzQyxvQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgYnJvd3NlcldpbmRvd0ZhY3RvcnkgfSBmcm9tICcuL3dpbmRvdy1yZWYtYnJvd3Nlcic7XG5cbmV4cG9ydCBjb25zdCBXaW5kb3dSZWZUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxXaW5kb3c+KCdXaW5kb3dSZWYnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogYnJvd3NlcldpbmRvd0ZhY3RvcnksXG59KTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBXaW5kb3dSZWZTZXJ2aWNlIHtcbiAgbmF0aXZlV2luZG93ID0gdGhpcy5pbmplY3Rvci5nZXQoV2luZG93UmVmVG9rZW4sIG51bGwpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxufVxuIl19