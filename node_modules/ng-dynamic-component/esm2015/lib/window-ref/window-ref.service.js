/**
 * @fileoverview added by tsickle
 * Generated from: lib/window-ref/window-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, InjectionToken, Injector } from '@angular/core';
import { browserWindowFactory } from './window-ref-browser';
import * as i0 from "@angular/core";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
export const WindowRefToken = new InjectionToken('WindowRef', {
    providedIn: 'root',
    factory: browserWindowFactory,
});
export class WindowRefService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.nativeWindow = this.injector.get(WindowRefToken, null);
    }
}
WindowRefService.ɵfac = function WindowRefService_Factory(t) { return new (t || WindowRefService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
/** @nocollapse */
WindowRefService.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ WindowRefService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WindowRefService_Factory() { return new WindowRefService(i0.ɵɵinject(i0.INJECTOR)); }, token: WindowRefService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowRefService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
if (false) {
    /** @type {?} */
    WindowRefService.prototype.nativeWindow;
    /**
     * @type {?}
     * @private
     */
    WindowRefService.prototype.injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXJlZi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWNvbXBvbmVudC9zcmMvbGliL3dpbmRvdy1yZWYvd2luZG93LXJlZi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVEO0FBQ29DOztBQUFwQyxNQUFNLE9BQU8sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFTLFdBQVcsRUFBRTtBQUN0RSxJQUFFLFVBQVUsRUFBRSxNQUFNO0FBQ3BCLElBQUUsT0FBTyxFQUFFLG9CQUFvQjtBQUMvQixDQUFDLENBQUM7QUFHRixNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCO0FBQVE7QUFBMkI7QUFBUSxJQUV6QyxZQUFvQixRQUFrQjtBQUFJLFFBQXRCLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxRQUZ2QyxpQkFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RCxJQUMyQyxDQUFDO0FBQzVDOzRDQUxDLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsa0RBQzdCO0FBQUM7QUFBbUI7QUFDVSxZQVhFLFFBQVE7QUFBRztBQUFHOzs7O3lFQVM3QztBQUFDO0FBQWE7QUFDZixJQUNILHdDQUF1RDtBQUN6RDtBQUNPO0FBQWlCO0FBQWdCO0FBRXZDLElBRmEsb0NBQTBCO0FBQUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyV2luZG93RmFjdG9yeSB9IGZyb20gJy4vd2luZG93LXJlZi1icm93c2VyJztcblxuZXhwb3J0IGNvbnN0IFdpbmRvd1JlZlRva2VuID0gbmV3IEluamVjdGlvblRva2VuPFdpbmRvdz4oJ1dpbmRvd1JlZicsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5OiBicm93c2VyV2luZG93RmFjdG9yeSxcbn0pO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFdpbmRvd1JlZlNlcnZpY2Uge1xuICBuYXRpdmVXaW5kb3cgPSB0aGlzLmluamVjdG9yLmdldChXaW5kb3dSZWZUb2tlbiwgbnVsbCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG59XG4iXX0=