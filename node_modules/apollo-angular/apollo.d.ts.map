{"version":3,"file":"apollo.d.ts","sources":["apollo.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\nimport { ApolloClient, QueryOptions, MutationOptions, ApolloQueryResult, SubscriptionOptions, ApolloClientOptions, FetchResult } from '@apollo/client/core';\nimport { Observable } from 'rxjs';\nimport { QueryRef } from './query-ref';\nimport { WatchQueryOptions, ExtraSubscriptionOptions, EmptyObject, NamedOptions, Flags } from './types';\nexport declare class ApolloBase<TCacheShape = any> {\n    protected ngZone: NgZone;\n    protected flags?: Flags;\n    protected _client?: ApolloClient<TCacheShape>;\n    private useInitialLoading;\n    constructor(ngZone: NgZone, flags?: Flags, _client?: ApolloClient<TCacheShape>);\n    watchQuery<TData, TVariables = EmptyObject>(options: WatchQueryOptions<TVariables, TData>): QueryRef<TData, TVariables>;\n    query<T, V = EmptyObject>(options: QueryOptions<V, T>): Observable<ApolloQueryResult<T>>;\n    mutate<T, V = EmptyObject>(options: MutationOptions<T, V>): Observable<FetchResult<T>>;\n    subscribe<T, V = EmptyObject>(options: SubscriptionOptions<V, T>, extra?: ExtraSubscriptionOptions): Observable<FetchResult<T>>;\n    /**\n     * Get an access to an instance of ApolloClient\n     * @deprecated use `apollo.client` instead\n     */\n    getClient(): ApolloClient<TCacheShape>;\n    /**\n     * Set a new instance of ApolloClient\n     * Remember to clean up the store before setting a new client.\n     * @deprecated use `apollo.client = client` instead\n     *\n     * @param client ApolloClient instance\n     */\n    setClient(client: ApolloClient<TCacheShape>): void;\n    /**\n     * Get an access to an instance of ApolloClient\n     */\n    get client(): ApolloClient<TCacheShape>;\n    /**\n     * Set a new instance of ApolloClient\n     * Remember to clean up the store before setting a new client.\n     *\n     * @param client ApolloClient instance\n     */\n    set client(client: ApolloClient<TCacheShape>);\n    private ensureClient;\n    private checkInstance;\n}\nexport declare class Apollo extends ApolloBase<any> {\n    private _ngZone;\n    private map;\n    constructor(_ngZone: NgZone, apolloOptions?: ApolloClientOptions<any>, apolloNamedOptions?: NamedOptions, flags?: Flags);\n    /**\n     * Create an instance of ApolloClient\n     * @param options Options required to create ApolloClient\n     * @param name client's name\n     */\n    create<TCacheShape>(options: ApolloClientOptions<TCacheShape>, name?: string): void;\n    /**\n     * Use a default ApolloClient\n     */\n    default(): ApolloBase<any>;\n    /**\n     * Use a named ApolloClient\n     * @param name client's name\n     */\n    use(name: string): ApolloBase<any>;\n    /**\n     * Create a default ApolloClient, same as `apollo.create(options)`\n     * @param options ApolloClient's options\n     */\n    createDefault<TCacheShape>(options: ApolloClientOptions<TCacheShape>): void;\n    /**\n     * Create a named ApolloClient, same as `apollo.create(options, name)`\n     * @param name client's name\n     * @param options ApolloClient's options\n     */\n    createNamed<TCacheShape>(name: string, options: ApolloClientOptions<TCacheShape>): void;\n    /**\n     * Remember to clean up the store before removing a client\n     * @param name client's name\n     */\n    removeClient(name?: string): void;\n}\n"]}