(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@apollo/client/link/core'), require('@apollo/client/link/context'), require('@apollo/client/link/persisted-queries')) :
    typeof define === 'function' && define.amd ? define('apollo-angular/persisted-queries', ['exports', '@apollo/client/link/core', '@apollo/client/link/context', '@apollo/client/link/persisted-queries'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngApollo = global.ngApollo || {}, global.ngApollo['persisted-queries'] = {}), global.core, global.context, global.persistedQueries));
}(this, (function (exports, core, context, persistedQueries) { 'use strict';

    var ɵ0 = function (_, context) {
        var ctx = {};
        if (context.http) {
            ctx.includeQuery = context.http.includeQuery;
            ctx.includeExtensions = context.http.includeExtensions;
        }
        if (context.fetchOptions && context.fetchOptions.method) {
            ctx.method = context.fetchOptions.method;
        }
        return ctx;
    };
    var transformLink = context.setContext(ɵ0);
    var createPersistedQueryLink = function (options) { return core.ApolloLink.from([persistedQueries.createPersistedQueryLink(options), transformLink]); };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.createPersistedQueryLink = createPersistedQueryLink;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngApolloLinkPersisted.umd.js.map