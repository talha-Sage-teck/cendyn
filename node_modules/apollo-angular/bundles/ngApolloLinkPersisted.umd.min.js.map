{"version":3,"sources":["../../persisted-queries/src/index.ts"],"names":["_","context","ctx","http","includeQuery","includeExtensions","fetchOptions","method","transformLink","setContext","Éµ0","options","ApolloLink","from","_createPersistedQueryLink"],"mappings":"ilBAMiC,SAACA,EAAGC,GACnC,IAAMC,EAAW,GAWjB,OATID,EAAQE,OACVD,EAAIE,aAAeH,EAAQE,KAAKC,aAChCF,EAAIG,kBAAoBJ,EAAQE,KAAKE,mBAGnCJ,EAAQK,cAAgBL,EAAQK,aAAaC,SAC/CL,EAAIK,OAASN,EAAQK,aAAaC,QAG7BL,GAZHM,EAAgBC,EAAAA,WAAUC,8BAeQ,SAACC,GACvC,OAAAC,EAAAA,WAAWC,KAAK,CAACC,EAAAA,yBAA0BH,GAAUH","sourcesContent":["import {ApolloLink} from '@apollo/client/link/core';\nimport {setContext} from '@apollo/client/link/context';\nimport {createPersistedQueryLink as _createPersistedQueryLink} from '@apollo/client/link/persisted-queries';\n\nexport type Options = Parameters<typeof _createPersistedQueryLink>[0];\n\nconst transformLink = setContext((_, context) => {\n  const ctx: any = {};\n\n  if (context.http) {\n    ctx.includeQuery = context.http.includeQuery;\n    ctx.includeExtensions = context.http.includeExtensions;\n  }\n\n  if (context.fetchOptions && context.fetchOptions.method) {\n    ctx.method = context.fetchOptions.method;\n  }\n\n  return ctx;\n});\n\nexport const createPersistedQueryLink = (options?: Options) =>\n  ApolloLink.from([_createPersistedQueryLink(options), transformLink as any]);\n"]}