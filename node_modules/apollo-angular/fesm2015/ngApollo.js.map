{"version":3,"file":"ngApollo.js","sources":["../../src/utils.ts","../../src/query-ref.ts","../../src/tokens.ts","../../src/apollo.ts","../../src/query.ts","../../src/mutation.ts","../../src/subscription.ts","../../src/ngApollo.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgZone} from '@angular/core';\nimport {observeOn} from 'rxjs/operators';\nimport {\n  ObservableQuery,\n  ApolloQueryResult,\n  Observable as AObservable,\n} from '@apollo/client/core';\nimport {\n  Observable,\n  Subscription,\n  queueScheduler,\n  SchedulerLike,\n  SchedulerAction,\n  observable,\n} from 'rxjs';\n\nexport function fromPromise<T>(promiseFn: () => Promise<T>): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    promiseFn().then(\n      (result) => {\n        if (!subscriber.closed) {\n          subscriber.next(result);\n          subscriber.complete();\n        }\n      },\n      (error) => {\n        if (!subscriber.closed) {\n          subscriber.error(error);\n        }\n      },\n    );\n\n    return () => subscriber.unsubscribe();\n  });\n}\n\nexport class ZoneScheduler implements SchedulerLike {\n  constructor(private zone: NgZone) {}\n\n  public now = Date.now ? Date.now : () => +new Date();\n\n  public schedule<T>(\n    work: (this: SchedulerAction<T>, state?: T) => void,\n    delay: number = 0,\n    state?: T,\n  ): Subscription {\n    return this.zone.run(() =>\n      queueScheduler.schedule(work, delay, state),\n    ) as Subscription;\n  }\n}\n\n// XXX: Apollo's QueryObservable is not compatible with RxJS\n// TODO: remove it in one of future releases\n// https://github.com/ReactiveX/rxjs/blob/9fb0ce9e09c865920cf37915cc675e3b3a75050b/src/internal/util/subscribeTo.ts#L32\nexport function fixObservable<T>(\n  obs: ObservableQuery<T>,\n): Observable<ApolloQueryResult<T>>;\nexport function fixObservable<T>(obs: AObservable<T>): Observable<T>;\nexport function fixObservable<T>(\n  obs: AObservable<T> | ObservableQuery<T>,\n): Observable<ApolloQueryResult<T>> | Observable<T> {\n  (obs as any)[observable] = () => obs;\n  return obs as any;\n}\n\nexport function wrapWithZone<T>(\n  obs: Observable<T>,\n  ngZone: NgZone,\n): Observable<T> {\n  return obs.pipe(observeOn(new ZoneScheduler(ngZone)));\n}\n\nexport function pickFlag<TFlags, K extends keyof TFlags>(\n  flags: TFlags | undefined,\n  flag: K,\n  defaultValue: TFlags[K],\n): TFlags[K] {\n  return flags && typeof flags[flag] !== 'undefined'\n    ? flags[flag]\n    : defaultValue;\n}\n","import {NgZone} from '@angular/core';\nimport {\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  FetchMoreQueryOptions,\n  FetchMoreOptions,\n  SubscribeToMoreOptions,\n  UpdateQueryOptions,\n} from '@apollo/client/core';\nimport {Observable, from} from 'rxjs';\n\nimport {wrapWithZone, fixObservable} from './utils';\nimport {WatchQueryOptions, EmptyObject} from './types';\nimport {startWith} from 'rxjs/operators';\n\nexport class QueryRef<T, V = EmptyObject> {\n  public valueChanges: Observable<ApolloQueryResult<T>>;\n  public options: ObservableQuery<T, V>['options'];\n  public queryId: ObservableQuery<T, V>['queryId'];\n  public variables: V;\n\n  constructor(\n    private obsQuery: ObservableQuery<T, V>,\n    ngZone: NgZone,\n    options: WatchQueryOptions<V, T>,\n  ) {\n    const wrapped = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);\n\n    this.valueChanges = options.useInitialLoading\n      ? wrapped.pipe(\n          startWith({\n            ...this.obsQuery.getCurrentResult(false),\n            error: undefined,\n            partial: undefined,\n            stale: true,\n          }),\n        )\n      : wrapped;\n    this.queryId = this.obsQuery.queryId;\n  }\n\n  // ObservableQuery's methods\n\n  public result(): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.result();\n  }\n\n  public getCurrentResult(): ApolloQueryResult<T> {\n    return this.obsQuery.getCurrentResult();\n  }\n\n  public getLastResult(): ApolloQueryResult<T> {\n    return this.obsQuery.getLastResult();\n  }\n\n  public getLastError(): ApolloError {\n    return this.obsQuery.getLastError();\n  }\n\n  public resetLastResults(): void {\n    return this.obsQuery.resetLastResults();\n  }\n\n  public refetch(variables?: V): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.refetch(variables);\n  }\n\n  public fetchMore<K extends keyof V>(\n    fetchMoreOptions: FetchMoreQueryOptions<V, K> & FetchMoreOptions<T, V>,\n  ): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.fetchMore(fetchMoreOptions);\n  }\n\n  public subscribeToMore<MT = any, MV = EmptyObject>(\n    options: SubscribeToMoreOptions<T, MV, MT>,\n  ): () => void {\n    // XXX: there's a bug in apollo-client typings\n    // it should not inherit types from ObservableQuery\n    return this.obsQuery.subscribeToMore(options as any);\n  }\n  public updateQuery(\n    mapFn: (previousQueryResult: T, options: UpdateQueryOptions<V>) => T,\n  ): void {\n    return this.obsQuery.updateQuery(mapFn);\n  }\n\n  public stopPolling(): void {\n    return this.obsQuery.stopPolling();\n  }\n\n  public startPolling(pollInterval: number): void {\n    return this.obsQuery.startPolling(pollInterval);\n  }\n\n  public setOptions(opts: any) {\n    return this.obsQuery.setOptions(opts);\n  }\n\n  public setVariables(variables: V) {\n    return this.obsQuery.setVariables(variables);\n  }\n}\n","import {InjectionToken} from '@angular/core';\nimport {ApolloClientOptions} from '@apollo/client/core';\nimport {NamedOptions, Flags} from './types';\n\nexport const APOLLO_FLAGS = new InjectionToken<Flags>('APOLLO_FLAGS');\n\nexport const APOLLO_OPTIONS = new InjectionToken<ApolloClientOptions<any>>(\n  'APOLLO_OPTIONS',\n);\n\nexport const APOLLO_NAMED_OPTIONS = new InjectionToken<NamedOptions>(\n  'APOLLO_NAMED_OPTIONS',\n);\n","import {Injectable, Optional, Inject, NgZone} from '@angular/core';\nimport {\n  ApolloClient,\n  QueryOptions,\n  MutationOptions,\n  ApolloQueryResult,\n  SubscriptionOptions,\n  ApolloClientOptions,\n  ObservableQuery,\n  FetchResult,\n} from '@apollo/client/core';\nimport {Observable, from} from 'rxjs';\n\nimport {QueryRef} from './query-ref';\nimport {\n  WatchQueryOptions,\n  ExtraSubscriptionOptions,\n  EmptyObject,\n  NamedOptions,\n  Flags,\n} from './types';\nimport {APOLLO_OPTIONS, APOLLO_NAMED_OPTIONS, APOLLO_FLAGS} from './tokens';\nimport {fromPromise, wrapWithZone, fixObservable, pickFlag} from './utils';\n\nexport class ApolloBase<TCacheShape = any> {\n  private useInitialLoading: boolean;\n\n  constructor(\n    protected ngZone: NgZone,\n    protected flags?: Flags,\n    protected _client?: ApolloClient<TCacheShape>,\n  ) {\n    this.useInitialLoading = pickFlag(flags, 'useInitialLoading', false);\n  }\n\n  public watchQuery<TData, TVariables = EmptyObject>(\n    options: WatchQueryOptions<TVariables, TData>,\n  ): QueryRef<TData, TVariables> {\n    return new QueryRef<TData, TVariables>(\n      this.ensureClient().watchQuery<TData, TVariables>({\n        ...options,\n      }) as ObservableQuery<TData, TVariables>,\n      this.ngZone,\n      {\n        useInitialLoading: this.useInitialLoading,\n        ...options,\n      },\n    );\n  }\n\n  public query<T, V = EmptyObject>(\n    options: QueryOptions<V, T>,\n  ): Observable<ApolloQueryResult<T>> {\n    return fromPromise<ApolloQueryResult<T>>(() =>\n      this.ensureClient().query<T, V>({...options}),\n    );\n  }\n\n  public mutate<T, V = EmptyObject>(\n    options: MutationOptions<T, V>,\n  ): Observable<FetchResult<T>> {\n    return fromPromise<FetchResult<T>>(() =>\n      this.ensureClient().mutate<T, V>({...options}),\n    );\n  }\n\n  public subscribe<T, V = EmptyObject>(\n    options: SubscriptionOptions<V, T>,\n    extra?: ExtraSubscriptionOptions,\n  ): Observable<FetchResult<T>> {\n    const obs = from(\n      fixObservable(\n        this.ensureClient().subscribe<T, V>({...options}),\n      ),\n    );\n\n    return extra && extra.useZone !== true\n      ? obs\n      : wrapWithZone(obs, this.ngZone);\n  }\n\n  /**\n   * Get an access to an instance of ApolloClient\n   * @deprecated use `apollo.client` instead\n   */\n  public getClient() {\n    return this.client;\n  }\n\n  /**\n   * Set a new instance of ApolloClient\n   * Remember to clean up the store before setting a new client.\n   * @deprecated use `apollo.client = client` instead\n   *\n   * @param client ApolloClient instance\n   */\n  public setClient(client: ApolloClient<TCacheShape>) {\n    this.client = client;\n  }\n\n  /**\n   * Get an access to an instance of ApolloClient\n   */\n  public get client(): ApolloClient<TCacheShape> {\n    return this._client;\n  }\n\n  /**\n   * Set a new instance of ApolloClient\n   * Remember to clean up the store before setting a new client.\n   *\n   * @param client ApolloClient instance\n   */\n  public set client(client: ApolloClient<TCacheShape>) {\n    if (this._client) {\n      throw new Error('Client has been already defined');\n    }\n\n    this._client = client;\n  }\n\n  private ensureClient() {\n    this.checkInstance();\n\n    return this._client;\n  }\n\n  private checkInstance(): void {\n    if (!this._client) {\n      throw new Error('Client has not been defined yet');\n    }\n  }\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Apollo extends ApolloBase<any> {\n  private map: Map<string, ApolloBase<any>> = new Map<\n    string,\n    ApolloBase<any>\n  >();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Optional()\n    @Inject(APOLLO_OPTIONS)\n    apolloOptions?: ApolloClientOptions<any>,\n    @Optional()\n    @Inject(APOLLO_NAMED_OPTIONS)\n    apolloNamedOptions?: NamedOptions,\n    @Optional() @Inject(APOLLO_FLAGS) flags?: Flags,\n  ) {\n    super(_ngZone, flags);\n\n    if (apolloOptions) {\n      this.createDefault(apolloOptions);\n    }\n\n    if (apolloNamedOptions && typeof apolloNamedOptions === 'object') {\n      for (let name in apolloNamedOptions) {\n        if (apolloNamedOptions.hasOwnProperty(name)) {\n          const options = apolloNamedOptions[name];\n          this.createNamed(name, options);\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an instance of ApolloClient\n   * @param options Options required to create ApolloClient\n   * @param name client's name\n   */\n  public create<TCacheShape>(\n    options: ApolloClientOptions<TCacheShape>,\n    name?: string,\n  ): void {\n    if (isDefault(name)) {\n      this.createDefault<TCacheShape>(options);\n    } else {\n      this.createNamed<TCacheShape>(name, options);\n    }\n  }\n\n  /**\n   * Use a default ApolloClient\n   */\n  public default(): ApolloBase<any> {\n    return this;\n  }\n\n  /**\n   * Use a named ApolloClient\n   * @param name client's name\n   */\n  public use(name: string): ApolloBase<any> {\n    if (isDefault(name)) {\n      return this.default();\n    }\n    return this.map.get(name);\n  }\n\n  /**\n   * Create a default ApolloClient, same as `apollo.create(options)`\n   * @param options ApolloClient's options\n   */\n  public createDefault<TCacheShape>(\n    options: ApolloClientOptions<TCacheShape>,\n  ): void {\n    if (this.getClient()) {\n      throw new Error('Apollo has been already created.');\n    }\n\n    return this.setClient(new ApolloClient<TCacheShape>(options));\n  }\n\n  /**\n   * Create a named ApolloClient, same as `apollo.create(options, name)`\n   * @param name client's name\n   * @param options ApolloClient's options\n   */\n  public createNamed<TCacheShape>(\n    name: string,\n    options: ApolloClientOptions<TCacheShape>,\n  ): void {\n    if (this.map.has(name)) {\n      throw new Error(`Client ${name} has been already created`);\n    }\n    this.map.set(\n      name,\n      new ApolloBase(\n        this._ngZone,\n        this.flags,\n        new ApolloClient<TCacheShape>(options),\n      ),\n    );\n  }\n\n  /**\n   * Remember to clean up the store before removing a client\n   * @param name client's name\n   */\n  public removeClient(name?: string): void {\n    if (isDefault(name)) {\n      this._client = undefined;\n    } else {\n      this.map.delete(name);\n    }\n  }\n}\n\nfunction isDefault(name?: string): boolean {\n  return !name || name === 'default';\n}\n","import {Injectable} from '@angular/core';\nimport {DocumentNode} from 'graphql';\nimport {ApolloQueryResult} from '@apollo/client/core';\nimport {TypedDocumentNode} from '@graphql-typed-document-node/core';\nimport {Observable} from 'rxjs';\n\nimport {Apollo} from './apollo';\nimport {QueryRef} from './query-ref';\nimport {WatchQueryOptionsAlone, QueryOptionsAlone, EmptyObject} from './types';\n\n@Injectable()\nexport class Query<T = {}, V = EmptyObject> {\n  public readonly document: DocumentNode | TypedDocumentNode<T, V>;\n  public client = 'default';\n\n  constructor(protected apollo: Apollo) {}\n\n  public watch(\n    variables?: V,\n    options?: WatchQueryOptionsAlone<V, T>,\n  ): QueryRef<T, V> {\n    return this.apollo.use(this.client).watchQuery<T, V>({\n      ...options,\n      variables,\n      query: this.document,\n    });\n  }\n\n  public fetch(\n    variables?: V,\n    options?: QueryOptionsAlone<V, T>,\n  ): Observable<ApolloQueryResult<T>> {\n    return this.apollo.use(this.client).query<T, V>({\n      ...options,\n      variables,\n      query: this.document,\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {DocumentNode} from 'graphql';\nimport {Observable} from 'rxjs';\nimport {FetchResult} from '@apollo/client/core';\nimport {TypedDocumentNode} from '@graphql-typed-document-node/core';\n\nimport {Apollo} from './apollo';\nimport {MutationOptionsAlone, EmptyObject} from './types';\n\n@Injectable()\nexport class Mutation<T = {}, V = EmptyObject> {\n  public readonly document: DocumentNode | TypedDocumentNode<T, V>;\n  public client = 'default';\n\n  constructor(protected apollo: Apollo) {}\n\n  public mutate(\n    variables?: V,\n    options?: MutationOptionsAlone<T, V>,\n  ): Observable<FetchResult<T>> {\n    return this.apollo.use(this.client).mutate<T, V>({\n      ...options,\n      variables,\n      mutation: this.document,\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TypedDocumentNode} from '@graphql-typed-document-node/core';\nimport {DocumentNode} from 'graphql';\nimport {Observable} from 'rxjs';\n\nimport {Apollo} from './apollo';\nimport {\n  SubscriptionOptionsAlone,\n  ExtraSubscriptionOptions,\n  SubscriptionResult,\n  EmptyObject,\n} from './types';\n\n@Injectable()\nexport class Subscription<T = any, V = EmptyObject> {\n  public readonly document: DocumentNode | TypedDocumentNode<T, V>;\n  public client = 'default';\n\n  constructor(protected apollo: Apollo) {}\n\n  public subscribe(\n    variables?: V,\n    options?: SubscriptionOptionsAlone<V, T>,\n    extra?: ExtraSubscriptionOptions,\n  ): Observable<SubscriptionResult<T>> {\n    return this.apollo.use(this.client).subscribe<T, V>(\n      {\n        ...options,\n        variables,\n        query: this.document,\n      },\n      extra,\n    );\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}