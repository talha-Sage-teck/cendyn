import { ApolloError, } from '@apollo/client/core';
const isApolloError = (err) => err && err.hasOwnProperty('graphQLErrors');
const ɵ0 = isApolloError;
export class TestOperation {
    constructor(operation, observer) {
        this.operation = operation;
        this.observer = observer;
    }
    flush(result) {
        if (isApolloError(result)) {
            this.observer.error(result);
        }
        else {
            const fetchResult = result ? Object.assign({}, result) : result;
            this.observer.next(fetchResult);
            this.observer.complete();
        }
    }
    flushData(data) {
        this.flush({
            data,
        });
    }
    networkError(error) {
        const apolloError = new ApolloError({
            networkError: error,
        });
        this.flush(apolloError);
    }
    graphqlErrors(errors) {
        this.flush({
            errors,
        });
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6Ii93b3Jrc3BhY2VzL2Fwb2xsby1hbmd1bGFyL3BhY2thZ2VzL2Fwb2xsby1hbmd1bGFyL3Rlc3Rpbmcvc3JjLyIsInNvdXJjZXMiOlsib3BlcmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEdBR1osTUFBTSxxQkFBcUIsQ0FBQztBQUk3QixNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQVEsRUFBc0IsRUFBRSxDQUNyRCxHQUFHLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQzs7QUFNN0MsTUFBTSxPQUFPLGFBQWE7SUFDeEIsWUFDUyxTQUFvQixFQUNuQixRQUFrQztRQURuQyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ25CLGFBQVEsR0FBUixRQUFRLENBQTBCO0lBQ3pDLENBQUM7SUFFRyxLQUFLLENBQUMsTUFBcUM7UUFDaEQsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0I7YUFBTTtZQUNMLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLG1CQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQTZCLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVNLFNBQVMsQ0FBQyxJQUFpQztRQUNoRCxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ1QsSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsS0FBWTtRQUM5QixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQztZQUNsQyxZQUFZLEVBQUUsS0FBSztTQUNwQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSxhQUFhLENBQUMsTUFBc0I7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNULE1BQU07U0FDUCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBcG9sbG9FcnJvcixcbiAgT3BlcmF0aW9uIGFzIExpbmtPcGVyYXRpb24sXG4gIEZldGNoUmVzdWx0LFxufSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcbmltcG9ydCB7R3JhcGhRTEVycm9yLCBFeGVjdXRpb25SZXN1bHR9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHtPYnNlcnZlcn0gZnJvbSAncnhqcyc7XG5cbmNvbnN0IGlzQXBvbGxvRXJyb3IgPSAoZXJyOiBhbnkpOiBlcnIgaXMgQXBvbGxvRXJyb3IgPT5cbiAgZXJyICYmIGVyci5oYXNPd25Qcm9wZXJ0eSgnZ3JhcGhRTEVycm9ycycpO1xuXG5leHBvcnQgdHlwZSBPcGVyYXRpb24gPSBMaW5rT3BlcmF0aW9uICYge1xuICBjbGllbnROYW1lOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY2xhc3MgVGVzdE9wZXJhdGlvbjxUID0ge1trZXk6IHN0cmluZ106IGFueX0+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG9wZXJhdGlvbjogT3BlcmF0aW9uLFxuICAgIHByaXZhdGUgb2JzZXJ2ZXI6IE9ic2VydmVyPEZldGNoUmVzdWx0PFQ+PixcbiAgKSB7fVxuXG4gIHB1YmxpYyBmbHVzaChyZXN1bHQ6IEV4ZWN1dGlvblJlc3VsdCB8IEFwb2xsb0Vycm9yKTogdm9pZCB7XG4gICAgaWYgKGlzQXBvbGxvRXJyb3IocmVzdWx0KSkge1xuICAgICAgdGhpcy5vYnNlcnZlci5lcnJvcihyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmZXRjaFJlc3VsdCA9IHJlc3VsdCA/IHsuLi5yZXN1bHR9IDogcmVzdWx0O1xuICAgICAgdGhpcy5vYnNlcnZlci5uZXh0KGZldGNoUmVzdWx0IGFzIEZldGNoUmVzdWx0PFQ+KTtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZmx1c2hEYXRhKGRhdGE6IHtba2V5OiBzdHJpbmddOiBhbnl9IHwgbnVsbCk6IHZvaWQge1xuICAgIHRoaXMuZmx1c2goe1xuICAgICAgZGF0YSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBuZXR3b3JrRXJyb3IoZXJyb3I6IEVycm9yKTogdm9pZCB7XG4gICAgY29uc3QgYXBvbGxvRXJyb3IgPSBuZXcgQXBvbGxvRXJyb3Ioe1xuICAgICAgbmV0d29ya0Vycm9yOiBlcnJvcixcbiAgICB9KTtcblxuICAgIHRoaXMuZmx1c2goYXBvbGxvRXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGdyYXBocWxFcnJvcnMoZXJyb3JzOiBHcmFwaFFMRXJyb3JbXSk6IHZvaWQge1xuICAgIHRoaXMuZmx1c2goe1xuICAgICAgZXJyb3JzLFxuICAgIH0pO1xuICB9XG59XG4iXX0=