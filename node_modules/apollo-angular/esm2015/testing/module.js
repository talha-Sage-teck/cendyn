import { Apollo } from 'apollo-angular';
import { ApolloLink, InMemoryCache, ApolloCache, } from '@apollo/client/core';
import { NgModule, InjectionToken, Inject, Optional } from '@angular/core';
import { ApolloTestingController } from './controller';
import { ApolloTestingBackend } from './backend';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'apollo-angular';
import * as ɵngcc2 from './backend';
import * as ɵngcc3 from '@apollo/client/core';
export const APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
export const APOLLO_TESTING_NAMED_CACHE = new InjectionToken('apollo-angular/testing named cache');
export const APOLLO_TESTING_CLIENTS = new InjectionToken('apollo-angular/testing named clients');
function addClient(name, op) {
    op.clientName = name;
    return op;
}
export class ApolloTestingModuleCore {
    constructor(apollo, backend, namedClients, cache, namedCaches) {
        function createOptions(name, c) {
            return {
                link: new ApolloLink((operation) => backend.handle(addClient(name, operation))),
                cache: c ||
                    new InMemoryCache({
                        addTypename: false,
                    }),
            };
        }
        apollo.create(createOptions('default', cache));
        if (namedClients && namedClients.length) {
            namedClients.forEach((name) => {
                const caches = namedCaches && typeof namedCaches === 'object' ? namedCaches : {};
                apollo.createNamed(name, createOptions(name, caches[name]));
            });
        }
    }
}
ApolloTestingModuleCore.ɵfac = function ApolloTestingModuleCore_Factory(t) { return new (t || ApolloTestingModuleCore)(ɵngcc0.ɵɵinject(ɵngcc1.Apollo), ɵngcc0.ɵɵinject(ɵngcc2.ApolloTestingBackend), ɵngcc0.ɵɵinject(APOLLO_TESTING_CLIENTS, 8), ɵngcc0.ɵɵinject(APOLLO_TESTING_CACHE, 8), ɵngcc0.ɵɵinject(APOLLO_TESTING_NAMED_CACHE, 8)); };
ApolloTestingModuleCore.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ApolloTestingModuleCore });
ApolloTestingModuleCore.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        ApolloTestingBackend,
        { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
    ] });
ApolloTestingModuleCore.ctorParameters = () => [
    { type: Apollo },
    { type: ApolloTestingBackend },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CLIENTS,] }] },
    { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_NAMED_CACHE,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApolloTestingModuleCore, [{
        type: NgModule,
        args: [{
                providers: [
                    ApolloTestingBackend,
                    { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.Apollo }, { type: ɵngcc2.ApolloTestingBackend }, { type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [APOLLO_TESTING_CLIENTS]
            }] }, { type: ɵngcc3.ApolloCache, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [APOLLO_TESTING_CACHE]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [APOLLO_TESTING_NAMED_CACHE]
            }] }]; }, null); })();
export class ApolloTestingModule {
    static withClients(names) {
        return {
            ngModule: ApolloTestingModuleCore,
            providers: [
                {
                    provide: APOLLO_TESTING_CLIENTS,
                    useValue: names,
                },
            ],
        };
    }
}
ApolloTestingModule.ɵfac = function ApolloTestingModule_Factory(t) { return new (t || ApolloTestingModule)(); };
ApolloTestingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ApolloTestingModule });
ApolloTestingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ApolloTestingModuleCore]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApolloTestingModule, [{
        type: NgModule,
        args: [{
                imports: [ApolloTestingModuleCore]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ApolloTestingModule, { imports: [ApolloTestingModuleCore] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi93b3Jrc3BhY2VzL2Fwb2xsby1hbmd1bGFyL3BhY2thZ2VzL2Fwb2xsby1hbmd1bGFyL3Rlc3Rpbmcvc3JjL21vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUNMLFVBQVUsRUFFVixhQUFhLEVBQ2IsV0FBVyxHQUNaLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDckQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sV0FBVyxDQUFDOzs7OztBQUsvQyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FDcEQsOEJBQThCLENBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FDMUQsb0NBQW9DLENBQ3JDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGNBQWMsQ0FDdEQsc0NBQXNDLENBQ3ZDLENBQUM7QUFFRixTQUFTLFNBQVMsQ0FBQyxJQUFZLEVBQUUsRUFBaUI7QUFBSSxJQUNuRCxFQUFnQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDdEMsSUFDRSxPQUFPLEVBQWUsQ0FBQztBQUN6QixDQUFDO0FBUUQsTUFBTSxPQUFPLHVCQUF1QjtBQUNwQyxJQUFFLFlBQ0UsTUFBYyxFQUNkLE9BQTZCLEVBRzdCLFlBQXVCLEVBR3ZCLEtBQXdCLEVBR3hCLFdBQWlCO0FBQUksUUFFckIsU0FBUyxhQUFhLENBQUMsSUFBWSxFQUFFLENBQTJCO0FBQ3BFLFlBQU0sT0FBTztBQUNiLGdCQUFRLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQ2pDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUMzQztBQUNULGdCQUFRLEtBQUssRUFDSCxDQUFDO0FBQ1gsb0JBQVUsSUFBSSxhQUFhLENBQUM7QUFDNUIsd0JBQVksV0FBVyxFQUFFLEtBQUs7QUFDOUIscUJBQVcsQ0FBQztBQUNaLGFBQU8sQ0FBQztBQUNSLFFBQUksQ0FBQztBQUNMLFFBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbkQsUUFDSSxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO0FBQzdDLFlBQU0sWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO0FBQ3BDLGdCQUFRLE1BQU0sTUFBTSxHQUNWLFdBQVcsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzVFLGdCQUNRLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO21EQTVDQyxRQUFRLFNBQUMsa0JBQ1IsU0FBUyxFQUFFLHNCQUNULG9CQUFvQixzQkFDcEIsRUFBQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFDLG1CQUN0RSxlQUNGOzs7OztTQUNJO0FBQUM7QUFFTCxZQXpDTyxNQUFNO0FBQUksWUFVVixvQkFBb0I7QUFBSSx3Q0FpQzNCLFFBQVEsWUFDUixNQUFNLFNBQUMsc0JBQXNCO0FBQzNCLFlBeENMLFdBQVcsdUJBeUNSLFFBQVEsWUFDUixNQUFNLFNBQUMsb0JBQW9CO0FBQ3pCLDRDQUNGLFFBQVEsWUFDUixNQUFNLFNBQUMsMEJBQTBCO0FBQ2hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBQUU7QUErQlIsTUFBTSxPQUFPLG1CQUFtQjtBQUNoQyxJQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBZTtBQUNwQyxRQUFJLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSx1QkFBdUI7QUFDdkMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsc0JBQXNCO0FBQ3pDLG9CQUFVLFFBQVEsRUFBRSxLQUFLO0FBQ3pCLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOytDQWZDLFFBQVEsU0FBQyxrQkFDUixPQUFPLEVBQUUsQ0FBQztFQUF1QixDQUFDLGVBQ25DOzs7Ozs7OzsrSkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcG9sbG99IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcbmltcG9ydCB7XG4gIEFwb2xsb0xpbmssXG4gIE9wZXJhdGlvbiBhcyBMaW5rT3BlcmF0aW9uLFxuICBJbk1lbW9yeUNhY2hlLFxuICBBcG9sbG9DYWNoZSxcbn0gZnJvbSAnQGFwb2xsby9jbGllbnQvY29yZSc7XG5pbXBvcnQge05nTW9kdWxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QXBvbGxvVGVzdGluZ0NvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQge0Fwb2xsb1Rlc3RpbmdCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQnO1xuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3BlcmF0aW9uJztcblxuZXhwb3J0IHR5cGUgTmFtZWRDYWNoZXMgPSBSZWNvcmQ8c3RyaW5nLCBBcG9sbG9DYWNoZTxhbnk+IHwgdW5kZWZpbmVkIHwgbnVsbD47XG5cbmV4cG9ydCBjb25zdCBBUE9MTE9fVEVTVElOR19DQUNIRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBcG9sbG9DYWNoZTxhbnk+PihcbiAgJ2Fwb2xsby1hbmd1bGFyL3Rlc3RpbmcgY2FjaGUnLFxuKTtcblxuZXhwb3J0IGNvbnN0IEFQT0xMT19URVNUSU5HX05BTUVEX0NBQ0hFID0gbmV3IEluamVjdGlvblRva2VuPE5hbWVkQ2FjaGVzPihcbiAgJ2Fwb2xsby1hbmd1bGFyL3Rlc3RpbmcgbmFtZWQgY2FjaGUnLFxuKTtcblxuZXhwb3J0IGNvbnN0IEFQT0xMT19URVNUSU5HX0NMSUVOVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nW10+KFxuICAnYXBvbGxvLWFuZ3VsYXIvdGVzdGluZyBuYW1lZCBjbGllbnRzJyxcbik7XG5cbmZ1bmN0aW9uIGFkZENsaWVudChuYW1lOiBzdHJpbmcsIG9wOiBMaW5rT3BlcmF0aW9uKTogT3BlcmF0aW9uIHtcbiAgKG9wIGFzIE9wZXJhdGlvbikuY2xpZW50TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIG9wIGFzIE9wZXJhdGlvbjtcbn1cblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgQXBvbGxvVGVzdGluZ0JhY2tlbmQsXG4gICAge3Byb3ZpZGU6IEFwb2xsb1Rlc3RpbmdDb250cm9sbGVyLCB1c2VFeGlzdGluZzogQXBvbGxvVGVzdGluZ0JhY2tlbmR9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBBcG9sbG9UZXN0aW5nTW9kdWxlQ29yZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGFwb2xsbzogQXBvbGxvLFxuICAgIGJhY2tlbmQ6IEFwb2xsb1Rlc3RpbmdCYWNrZW5kLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChBUE9MTE9fVEVTVElOR19DTElFTlRTKVxuICAgIG5hbWVkQ2xpZW50cz86IHN0cmluZ1tdLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChBUE9MTE9fVEVTVElOR19DQUNIRSlcbiAgICBjYWNoZT86IEFwb2xsb0NhY2hlPGFueT4sXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEFQT0xMT19URVNUSU5HX05BTUVEX0NBQ0hFKVxuICAgIG5hbWVkQ2FjaGVzPzogYW55LCAvLyBGSVg6IHVzaW5nIE5hbWVkQ2FjaGVzIGhlcmUgbWFrZXMgbmdjIGZhaWxcbiAgKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyhuYW1lOiBzdHJpbmcsIGM/OiBBcG9sbG9DYWNoZTxhbnk+IHwgbnVsbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluazogbmV3IEFwb2xsb0xpbmsoKG9wZXJhdGlvbikgPT5cbiAgICAgICAgICBiYWNrZW5kLmhhbmRsZShhZGRDbGllbnQobmFtZSwgb3BlcmF0aW9uKSksXG4gICAgICAgICksXG4gICAgICAgIGNhY2hlOlxuICAgICAgICAgIGMgfHxcbiAgICAgICAgICBuZXcgSW5NZW1vcnlDYWNoZSh7XG4gICAgICAgICAgICBhZGRUeXBlbmFtZTogZmFsc2UsXG4gICAgICAgICAgfSksXG4gICAgICB9O1xuICAgIH1cblxuICAgIGFwb2xsby5jcmVhdGUoY3JlYXRlT3B0aW9ucygnZGVmYXVsdCcsIGNhY2hlKSk7XG5cbiAgICBpZiAobmFtZWRDbGllbnRzICYmIG5hbWVkQ2xpZW50cy5sZW5ndGgpIHtcbiAgICAgIG5hbWVkQ2xpZW50cy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhY2hlcyA9XG4gICAgICAgICAgbmFtZWRDYWNoZXMgJiYgdHlwZW9mIG5hbWVkQ2FjaGVzID09PSAnb2JqZWN0JyA/IG5hbWVkQ2FjaGVzIDoge307XG5cbiAgICAgICAgYXBvbGxvLmNyZWF0ZU5hbWVkKG5hbWUsIGNyZWF0ZU9wdGlvbnMobmFtZSwgY2FjaGVzW25hbWVdKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0Fwb2xsb1Rlc3RpbmdNb2R1bGVDb3JlXSxcbn0pXG5leHBvcnQgY2xhc3MgQXBvbGxvVGVzdGluZ01vZHVsZSB7XG4gIHN0YXRpYyB3aXRoQ2xpZW50cyhuYW1lczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEFwb2xsb1Rlc3RpbmdNb2R1bGVDb3JlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBUE9MTE9fVEVTVElOR19DTElFTlRTLFxuICAgICAgICAgIHVzZVZhbHVlOiBuYW1lcyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19