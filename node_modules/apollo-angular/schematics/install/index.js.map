{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../schematics/install/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {dirname} from 'path';\nimport {\n  apply,\n  chain,\n  url,\n  template,\n  Tree,\n  Rule,\n  SchematicContext,\n  mergeWith,\n  move,\n} from '@angular-devkit/schematics';\nimport {NodePackageInstallTask} from '@angular-devkit/schematics/tasks';\nimport {getAppModulePath} from '@schematics/angular/utility/ng-ast-utils';\nimport {tags, terminal} from '@angular-devkit/core';\nimport {CompilerOptions} from 'typescript';\n\nimport {getJsonFile, getMainPath} from '../utils';\nimport {Schema} from './schema';\nimport {addModuleImportToRootModule} from '../utils/ast';\n\nexport default function install(options: Schema): Rule {\n  return chain([\n    addDependencies(),\n    inludeAsyncIterableLib(),\n    allowSyntheticDefaultImports(),\n    addSetupFiles(options),\n    importSetupModule(options),\n    importHttpClientModule(options),\n  ]);\n}\n\nexport const dependenciesMap: Record<string, string> = {\n  'apollo-angular': '^2.6.0',\n  '@apollo/client': '^3.0.0',\n  graphql: '^15.0.0',\n};\n\n/**\n * Add all necessary node packages\n * as dependencies in the package.json\n * and installs them by running `npm install`.\n */\nfunction addDependencies() {\n  return (host: Tree, context: SchematicContext) => {\n    const packageJsonPath = 'package.json';\n    const packageJson = getJsonFile(host, packageJsonPath);\n\n    packageJson.dependencies = packageJson.dependencies || {};\n\n    for (const dependency in dependenciesMap) {\n      if (dependenciesMap.hasOwnProperty(dependency)) {\n        const version = dependenciesMap[dependency];\n        if (!packageJson.dependencies[dependency]) {\n          packageJson.dependencies[dependency] = version;\n        }\n      }\n    }\n\n    // save the changed file\n    host.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n    // schedule `npm install`\n    context.addTask(new NodePackageInstallTask());\n\n    return host;\n  };\n}\n\nfunction inludeAsyncIterableLib() {\n  return (host: Tree) => {\n    const requiredLib = 'esnext.asynciterable';\n    const tsconfigPath = 'tsconfig.json';\n    const tsconfig = getJsonFile(host, tsconfigPath);\n    const compilerOptions: CompilerOptions = tsconfig.compilerOptions;\n\n    if (\n      compilerOptions &&\n      compilerOptions.lib &&\n      !compilerOptions.lib.find((lib) => lib.toLowerCase() === requiredLib)\n    ) {\n      compilerOptions.lib.push(requiredLib);\n      host.overwrite(tsconfigPath, JSON.stringify(tsconfig, null, 2));\n    } else {\n      const tsconfigBasePath = 'tsconfig.base.json';\n      const tsconfigBase = getJsonFile(host, tsconfigBasePath);\n      const baseCompilerOptions: CompilerOptions = tsconfigBase.compilerOptions;\n\n      if (\n        baseCompilerOptions &&\n        baseCompilerOptions.lib &&\n        !baseCompilerOptions.lib.find(\n          (lib) => lib.toLowerCase() === requiredLib,\n        )\n      ) {\n        baseCompilerOptions.lib.push(requiredLib);\n        host.overwrite(tsconfigBasePath, JSON.stringify(tsconfigBase, null, 2));\n      } else {\n        console.error(\n          terminal.yellow(\n            '\\n' +\n              tags.stripIndent`\n                We couln't find '${requiredLib}' in the list of library files to be included in the compilation.\n                It's required by '@apollo/client/core' package so please add it to your tsconfig.\n              ` +\n              '\\n',\n          ),\n        );\n      }\n    }\n\n    return host;\n  };\n}\n\nfunction allowSyntheticDefaultImports() {\n  return (host: Tree) => {\n    const tsconfigPath = 'tsconfig.json';\n    const tsconfig = getJsonFile(host, tsconfigPath);\n    const compilerOptions: CompilerOptions = tsconfig.compilerOptions;\n\n    if (\n      compilerOptions &&\n      compilerOptions.lib &&\n      !compilerOptions.allowSyntheticDefaultImports\n    ) {\n      compilerOptions.allowSyntheticDefaultImports = true;\n      host.overwrite(tsconfigPath, JSON.stringify(tsconfig, null, 2));\n    } else {\n      const tsconfigBasePath = 'tsconfig.base.json';\n      const tsconfigBase = getJsonFile(host, tsconfigBasePath);\n      const baseCompilerOptions: CompilerOptions = tsconfigBase.compilerOptions;\n\n      if (\n        baseCompilerOptions &&\n        baseCompilerOptions.lib &&\n        !baseCompilerOptions.allowSyntheticDefaultImports\n      ) {\n        baseCompilerOptions.allowSyntheticDefaultImports = true;\n        host.overwrite(tsconfigBasePath, JSON.stringify(tsconfigBase, null, 2));\n      } else {\n        console.error(\n          terminal.yellow(\n            '\\n' +\n              tags.stripIndent`\n                We couln't enable 'allowSyntheticDefaultImports' flag.\n                It's required by '@apollo/client/core' package so please add it to your tsconfig.\n              ` +\n              '\\n',\n          ),\n        );\n      }\n    }\n\n    return host;\n  };\n}\n\nfunction addSetupFiles(options: Schema) {\n  return (host: Tree) => {\n    const mainPath = getMainPath(host, options.project);\n    const appModulePath = getAppModulePath(host, mainPath);\n    const appModuleDirectory = dirname(appModulePath);\n\n    const templateSource = apply(url('./files'), [\n      template({\n        endpoint: options.endpoint,\n      }),\n      move(appModuleDirectory),\n    ]);\n\n    return mergeWith(templateSource);\n  };\n}\n\nfunction importSetupModule(options: Schema) {\n  return (host: Tree) => {\n    addModuleImportToRootModule(\n      host,\n      'GraphQLModule',\n      './graphql.module',\n      options.project,\n    );\n\n    return host;\n  };\n}\n\nfunction importHttpClientModule(options: Schema) {\n  return (host: Tree) => {\n    addModuleImportToRootModule(\n      host,\n      'HttpClientModule',\n      '@angular/common/http',\n      options.project,\n    );\n  };\n}\n"]}