{"version":3,"file":"angular-architects-module-federation-runtime.js","sources":["../../../../libs/mf-runtime/src/lib/loader/dynamic-federation.ts","../../../../libs/mf-runtime/src/angular-architects-module-federation-runtime.ts"],"names":[],"mappings":";;AAYA,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB,MAAM,SAAS,GAAG,EAAE,CAAA;AACpB,IAAI,yBAAyB,GAAG,KAAK,CAAC;AAEtC,SAAe,mBAAmB,CAAI,UAAkB,EAAE,aAAqB;AAAK;AACrC,QAAzC,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAc,CAAC;AACxD,QAAM,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACzD,QAAM,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC;AAC/B,QAAM,OAAO,MAAW,CAAC;AACzB,KAAC;AAED,CAFC;AAED,SAAe,UAAU,CAAC,UAAkB;AAC5C;AAEC,QAFG,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAc,CAAC;AACtD;AAEE,QAAE,IAAI,SAAS,CAAC,UAAU,CAAC,EAAE;AAC/B,YAAQ,OAAO,SAAS,CAAC;AACzB,SAAK;AACL;AAEE,QAAE,IAAI,CAAC,yBAAyB,EAAE;AAAG,YAC/B,MAAM,wBAAwB,CAAC,SAAS,CAAC,CAAC;AAClD,YAAQ,yBAAyB,GAAG,IAAI,CAAC;AACzC,SAAK;AACL,QACI,MAAM,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;AAC3D,QAAI,SAAS,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;AACjC,QAAI,OAAO,SAAS,CAAC;AACrB,KAAC;AAED,CAFC;AACD,SAOgB,eAAe,CAAC,WAAmB,EAAE,UAAkB;AAAK,IACxE,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;AAC7C;AACyC,QACjC,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE;AACpC,YAAY,OAAO,EAAE,CAAC;AACtB,YAAY,OAAO;AACnB,SAAS;AACT,QACQ,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AACxD,QAAQ,MAAM,CAAC,GAAG,GAAG,WAAW,CAAC;AACjC,QACQ,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;AAChC,QACQ,MAAM,CAAC,MAAM,GAAG;AACxB,YAAY,UAAU,CAAC,UAAU,CAAC,CAAC;AACnC,YAAY,SAAS,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;AAC1C,YAAY,OAAO,EAAE,CAAC;AAAE,SACf,CAAA;AACT,QACQ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC1C,KAAK,CAAC,CAAC;AACP,CAAC;AACD,SACsB,gBAAgB,CAAU,OAAgC;AAAK;AAEtE,QADX,IAAI,OAAO,CAAC,WAAW,EAAE;AAC7B,YAAQ,MAAM,eAAe,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;AACvE,SAAK;AACL,QAAI,OAAO,MAAM,mBAAmB,CAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;AACnF,KAAC;AACC;AAAE;AC9EJ;AACC;AACC;AAED;AAAC;AACqB","sourcesContent":["type Scope = unknown;\r\ntype Factory = () => any;\r\n\r\ntype Container = {\r\n    init(shareScope: Scope): void;\r\n    get(module: string): Factory;\r\n};\r\n\r\ndeclare const __webpack_init_sharing__: (shareScope: string) => Promise<void>;\r\ndeclare const __webpack_share_scopes__: { default: Scope };\r\n\r\n\r\nconst moduleMap = {};\r\nconst remoteMap = {}\r\nlet isDefaultScopeInitialized = false;\r\n\r\nasync function lookupExposedModule<T>(remoteName: string, exposedModule: string): Promise<T> {\r\n      const container = window[remoteName] as Container;\r\n      const factory = await container.get(exposedModule);\r\n      const Module = factory();\r\n      return Module as T;\r\n}\r\n\r\nasync function initRemote(remoteName: string) {\r\n    const container = window[remoteName] as Container;\r\n\r\n    // Do we still need to initialize the remote?\r\n    if (remoteMap[remoteName]) {\r\n        return container;\r\n    }\r\n\r\n    // Do we still need to initialize the share scope?\r\n    if (!isDefaultScopeInitialized) { \r\n        await __webpack_init_sharing__('default');\r\n        isDefaultScopeInitialized = true;\r\n    }\r\n\r\n    await container.init(__webpack_share_scopes__.default);\r\n    remoteMap[remoteName] = true;\r\n    return container;\r\n}\r\n\r\nexport type LoadRemoteModuleOptions = { \r\n    remoteEntry?: string; \r\n    remoteName: string; \r\n    exposedModule: string\r\n}\r\n\r\nexport function loadRemoteEntry(remoteEntry: string, remoteName: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n\r\n        // Is remoteEntry already loaded?\r\n        if (moduleMap[remoteEntry]) {\r\n            resolve();\r\n            return;\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        script.src = remoteEntry;\r\n\r\n        script.onerror = reject;\r\n\r\n        script.onload = () => {\r\n            initRemote(remoteName);\r\n            moduleMap[remoteEntry] = true;\r\n            resolve(); \r\n        }\r\n\r\n        document.body.appendChild(script);\r\n    });\r\n}\r\n\r\nexport async function loadRemoteModule<T = any>(options: LoadRemoteModuleOptions): Promise<T> {\r\n    if (options.remoteEntry) {\r\n        await loadRemoteEntry(options.remoteEntry, options.remoteName);\r\n    }\r\n    return await lookupExposedModule<T>(options.remoteName, options.exposedModule);\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}