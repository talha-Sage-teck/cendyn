import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SVG_ICON_REGISTRY_PROVIDER } from './svg-icon-registry.service';
import { SvgIconComponent } from './svg-icon.component';
import { SvgHttpLoader, SvgLoader } from './svg-loader';
import * as ɵngcc0 from '@angular/core';
export class AngularSvgIconModule {
    static forRoot(config = {}) {
        return {
            ngModule: AngularSvgIconModule,
            providers: [
                SVG_ICON_REGISTRY_PROVIDER,
                config.loader || { provide: SvgLoader, useClass: SvgHttpLoader }
            ]
        };
    }
}
AngularSvgIconModule.ɵfac = function AngularSvgIconModule_Factory(t) { return new (t || AngularSvgIconModule)(); };
AngularSvgIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AngularSvgIconModule });
AngularSvgIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularSvgIconModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    SvgIconComponent
                ],
                exports: [SvgIconComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularSvgIconModule, { declarations: function () { return [SvgIconComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SvgIconComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1zdmctaWNvbi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItc3ZnLWljb24vc3JjL2xpYi9hbmd1bGFyLXN2Zy1pY29uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBZXhELE1BQU0sT0FBTyxvQkFBb0I7QUFDakMsSUFDQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQStCLEVBQUU7QUFBSSxRQUNuRCxPQUFPO0FBQ1QsWUFBRyxRQUFRLEVBQUUsb0JBQW9CO0FBQ2pDLFlBQUcsU0FBUyxFQUFFO0FBQ2QsZ0JBQUksMEJBQTBCO0FBQzlCLGdCQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUU7QUFDcEUsYUFBSTtBQUNKLFNBQUcsQ0FBQztBQUNKLElBQUMsQ0FBQztBQUNGO2dEQXBCQyxRQUFRLFNBQUMsa0JBQ1QsT0FBTyxFQUFFLHNCQUNSO1VBQVksbUJBQ1osa0JBQ0QsWUFBWSxFQUFFLHNCQUNiO0FBQWdCLGtCQUNoQixrQkFDRCxPQUFPLEVBQUUsQ0FBRSxnQkFBZ0IsQ0FBRSxjQUM3Qjs7Ozs7Ozs7Ozs7Ozs7OzRSQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFNWR19JQ09OX1JFR0lTVFJZX1BST1ZJREVSIH0gZnJvbSAnLi9zdmctaWNvbi1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IFN2Z0ljb25Db21wb25lbnQgfSBmcm9tICcuL3N2Zy1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdmdIdHRwTG9hZGVyLCBTdmdMb2FkZXIgfSBmcm9tICcuL3N2Zy1sb2FkZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJTdmdJY29uQ29uZmlnIHtcblx0bG9hZGVyPzogUHJvdmlkZXI7XG59XG5cbkBOZ01vZHVsZSh7XG5cdGltcG9ydHM6IFtcblx0XHRDb21tb25Nb2R1bGUsXG5cdF0sXG5cdGRlY2xhcmF0aW9uczogW1xuXHRcdFN2Z0ljb25Db21wb25lbnRcblx0XSxcblx0ZXhwb3J0czogWyBTdmdJY29uQ29tcG9uZW50IF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhclN2Z0ljb25Nb2R1bGUge1xuXG5cdHN0YXRpYyBmb3JSb290KGNvbmZpZzogQW5ndWxhclN2Z0ljb25Db25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QW5ndWxhclN2Z0ljb25Nb2R1bGU+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bmdNb2R1bGU6IEFuZ3VsYXJTdmdJY29uTW9kdWxlLFxuXHRcdFx0cHJvdmlkZXJzOiBbXG5cdFx0XHRcdFNWR19JQ09OX1JFR0lTVFJZX1BST1ZJREVSLFxuXHRcdFx0XHRjb25maWcubG9hZGVyIHx8IHsgcHJvdmlkZTogU3ZnTG9hZGVyLCB1c2VDbGFzczogU3ZnSHR0cExvYWRlciB9XG5cdFx0XHRdXG5cdFx0fTtcblx0fVxufVxuIl19