"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(Object.hasOwnProperty.call(mod,k))result[k]=mod[k];result["default"]=mod;return result};Object.defineProperty(exports,"__esModule",{value:true});const architect_1=require("@angular-devkit/architect");const eslint_1=__importDefault(require("eslint"));const fs_1=require("fs");const glob_1=__importDefault(require("glob"));const minimatch_1=require("minimatch");const path_1=__importDefault(require("path"));const typescript_1=__importDefault(require("typescript"));function stripBom(data){return data.replace(/^\uFEFF/,"")}exports.stripBom=stripBom;function getFileContents(file){try{return stripBom(fs_1.readFileSync(file,"utf-8"))}catch(_a){throw new Error(`Could not read file '${file}'.`)}}async function _loadESLint(){let eslint;try{eslint=await Promise.resolve().then(()=>__importStar(require("eslint")));return eslint}catch(_a){throw new Error("Unable to find ESLint. Ensure ESLint is installed.")}}function mapDefined(inputs,getOutput){const out=[];for(const input of inputs){const output=getOutput(input);if(output!==undefined){out.push(output)}}return out}exports.mapDefined=mapDefined;function getFileNamesFromProgram(program){return mapDefined(program.getSourceFiles(),file=>file.fileName.endsWith(".d.ts")||file.fileName.endsWith(".json")||program.isSourceFileFromExternalLibrary(file)?undefined:file.fileName)}function getFilesToLint(root,options,program){const ignore=options.exclude;const files=options.files||[];if(files.length>0){return files.map(file=>glob_1.default.sync(file,{cwd:root,ignore:ignore,nodir:true})).reduce((prev,curr)=>prev.concat(curr),[]).map(file=>path_1.default.join(root,file))}if(!program){return[]}let programFiles=getFileNamesFromProgram(program);if(ignore&&ignore.length>0){const ignoreMatchers=ignore.map(pattern=>new minimatch_1.Minimatch(path_1.default.normalize(pattern),{dot:true}));programFiles=programFiles.filter(file=>!ignoreMatchers.some(matcher=>matcher.match(path_1.default.relative(root,file))))}return programFiles}class FatalError extends Error{constructor(message,innerError){super(message);this.message=message;this.innerError=innerError;this.name=FatalError.NAME;Object.setPrototypeOf(this,FatalError.prototype)}}FatalError.NAME="FatalError";exports.FatalError=FatalError;function createProgram(configFile,projectDirectory=path_1.default.dirname(configFile)){const config=typescript_1.default.readConfigFile(configFile,typescript_1.default.sys.readFile);if(config.error!==undefined){throw new FatalError(typescript_1.default.formatDiagnostics([config.error],{getCanonicalFileName:f=>f,getCurrentDirectory:process.cwd,getNewLine:()=>"\n"}))}const parseConfigHost={fileExists:fs_1.existsSync,readDirectory:typescript_1.default.sys.readDirectory,readFile:file=>fs_1.readFileSync(file,"utf8"),useCaseSensitiveFileNames:true};const parsed=typescript_1.default.parseJsonConfigFileContent(config.config,parseConfigHost,path_1.default.resolve(projectDirectory),{noEmit:true});if(parsed.errors!==undefined){const errors=parsed.errors.filter(d=>d.category===typescript_1.default.DiagnosticCategory.Error&&d.code!==18003);if(errors.length!==0){throw new FatalError(typescript_1.default.formatDiagnostics(errors,{getCanonicalFileName:f=>f,getCurrentDirectory:process.cwd,getNewLine:()=>"\n"}))}}const host=typescript_1.default.createCompilerHost(parsed.options,true);const program=typescript_1.default.createProgram(parsed.fileNames,parsed.options,host);return program}async function _lint(projectESLint,systemRoot,eslintConfigPath,options,lintedFiles,program,allPrograms){const files=getFilesToLint(systemRoot,options,program);const cli=new projectESLint.CLIEngine({configFile:eslintConfigPath,useEslintrc:false,fix:!!options.fix});const lintReports=[];for(const file of files){if(program&&allPrograms){if(allPrograms.every(p=>p.getSourceFile(file)===undefined)){throw new Error(`File ${JSON.stringify(file)} is not part of a TypeScript project '${options.tsConfig}'.`)}else if(program.getSourceFile(file)===undefined){continue}}if(lintedFiles.has(file)){continue}const contents=getFileContents(file);await Promise.resolve();lintReports.push(cli.executeOnText(contents,file));lintedFiles.add(file)}return lintReports}async function _run(options,context){const systemRoot=context.workspaceRoot;process.chdir(context.currentDirectory);const projectName=context.target&&context.target.project||"<???>";const printInfo=options.format&&!options.silent;context.reportStatus(`Linting ${JSON.stringify(projectName)}...`);if(printInfo){context.logger.info(`\nLinting ${JSON.stringify(projectName)}...`)}const projectESLint=await _loadESLint();const version=eslint_1.default.Linter.version&&eslint_1.default.Linter.version.split(".");if(!version||version.length<2||Number(version[0])<6||Number(version[1])<1){throw new Error("ESLint must be version 6.1 or higher.")}const eslintConfigPath=path_1.default.resolve(systemRoot,options.eslintConfig);let lintReports=[];const lintedFiles=new Set;if(options.tsConfig){const tsConfigs=Array.isArray(options.tsConfig)?options.tsConfig:[options.tsConfig];context.reportProgress(0,tsConfigs.length);const allPrograms=tsConfigs.map(tsConfig=>createProgram(path_1.default.resolve(systemRoot,tsConfig)));let i=0;for(const program of allPrograms){lintReports=[...lintReports,...await _lint(projectESLint,systemRoot,eslintConfigPath,options,lintedFiles,program,allPrograms)];context.reportProgress(++i,allPrograms.length)}}else{lintReports=[...lintReports,...await _lint(projectESLint,systemRoot,eslintConfigPath,options,lintedFiles)]}if(lintReports.length===0){throw new Error("Invalid lint configuration. Nothing to lint.")}const formatter=eslint_1.default.CLIEngine.getFormatter(options.format);let totalErrors=0;let totalWarnings=0;for(const report of lintReports){eslint_1.default.CLIEngine.outputFixes(report);if(report.errorCount||report.warningCount){totalErrors+=report.errorCount;totalWarnings+=report.warningCount;context.logger.info(formatter(report.results))}}if(totalWarnings>0&&printInfo){context.logger.warn("Lint warnings found in the listed files.\n")}if(totalErrors>0&&printInfo){context.logger.error("Lint errors found in the listed files.\n")}if(totalWarnings===0&&totalErrors===0&&printInfo){context.logger.info("All files pass linting.\n")}return{success:options.force||totalErrors===0}}exports.default=architect_1.createBuilder(_run);