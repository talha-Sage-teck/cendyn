{"version":3,"mappings":"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","names":["MutationObserverFactory","create","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","_","element","_cleanupObserver","observe","elementOrRef","coerceElement","Observable","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","Subject","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","ContentObserver_Factory","ɵngcc0","ɵɵinject","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","value","coerceBooleanProperty","_unsubscribe","_subscribe","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","debounceTime","_a","CdkObserveContent_Factory","ɵdir","type","selectors","inputs","outputs","exportAs","ObserversModule","ObserversModule_Factory","ɵmod","ɵinj","providers","ngJitMode","declarations","exports"],"sources":["webpack:///node_modules/@angular/cdk/fesm2015/observers.js"],"sourcesContent":["import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nclass MutationObserverFactory {\r\n    create(callback) {\r\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n    }\r\n}\r\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\r\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n/** An injectable service that allows watching elements for changes to their content. */\r\nclass ContentObserver {\r\n    constructor(_mutationObserverFactory) {\r\n        this._mutationObserverFactory = _mutationObserverFactory;\r\n        /** Keeps track of the existing MutationObservers so they can be reused. */\r\n        this._observedElements = new Map();\r\n    }\r\n    ngOnDestroy() {\r\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n    }\r\n    observe(elementOrRef) {\r\n        const element = coerceElement(elementOrRef);\r\n        return new Observable((observer) => {\r\n            const stream = this._observeElement(element);\r\n            const subscription = stream.subscribe(observer);\r\n            return () => {\r\n                subscription.unsubscribe();\r\n                this._unobserveElement(element);\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Observes the given element by using the existing MutationObserver if available, or creating a\r\n     * new one if not.\r\n     */\r\n    _observeElement(element) {\r\n        if (!this._observedElements.has(element)) {\r\n            const stream = new Subject();\r\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n            if (observer) {\r\n                observer.observe(element, {\r\n                    characterData: true,\r\n                    childList: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n            this._observedElements.set(element, { observer, stream, count: 1 });\r\n        }\r\n        else {\r\n            this._observedElements.get(element).count++;\r\n        }\r\n        return this._observedElements.get(element).stream;\r\n    }\r\n    /**\r\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n     * observing this element.\r\n     */\r\n    _unobserveElement(element) {\r\n        if (this._observedElements.has(element)) {\r\n            this._observedElements.get(element).count--;\r\n            if (!this._observedElements.get(element).count) {\r\n                this._cleanupObserver(element);\r\n            }\r\n        }\r\n    }\r\n    /** Clean up the underlying MutationObserver for the specified element. */\r\n    _cleanupObserver(element) {\r\n        if (this._observedElements.has(element)) {\r\n            const { observer, stream } = this._observedElements.get(element);\r\n            if (observer) {\r\n                observer.disconnect();\r\n            }\r\n            stream.complete();\r\n            this._observedElements.delete(element);\r\n        }\r\n    }\r\n}\r\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\r\nContentObserver.ɵprov = ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\r\nContentObserver.ctorParameters = () => [\r\n    { type: MutationObserverFactory }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\nclass CdkObserveContent {\r\n    constructor(_contentObserver, _elementRef, _ngZone) {\r\n        this._contentObserver = _contentObserver;\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        /** Event emitted for each change in the element's content. */\r\n        this.event = new EventEmitter();\r\n        this._disabled = false;\r\n        this._currentSubscription = null;\r\n    }\r\n    /**\r\n     * Whether observing content is disabled. This option can be used\r\n     * to disconnect the underlying MutationObserver until it is needed.\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._disabled ? this._unsubscribe() : this._subscribe();\r\n    }\r\n    /** Debounce interval for emitting the changes. */\r\n    get debounce() { return this._debounce; }\r\n    set debounce(value) {\r\n        this._debounce = coerceNumberProperty(value);\r\n        this._subscribe();\r\n    }\r\n    ngAfterContentInit() {\r\n        if (!this._currentSubscription && !this.disabled) {\r\n            this._subscribe();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._unsubscribe();\r\n    }\r\n    _subscribe() {\r\n        this._unsubscribe();\r\n        const stream = this._contentObserver.observe(this._elementRef);\r\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n        // Consider brining it back inside the zone next time we're making breaking changes.\r\n        // Bringing it back inside can cause things like infinite change detection loops and changed\r\n        // after checked errors if people's code isn't handling it properly.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._currentSubscription =\r\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n        });\r\n    }\r\n    _unsubscribe() {\r\n        var _a;\r\n        (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\r\n    }\r\n}\r\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nCdkObserveContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\r\nCdkObserveContent.ctorParameters = () => [\r\n    { type: ContentObserver },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\nCdkObserveContent.propDecorators = {\r\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\r\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\r\n    debounce: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkObserveContent]',\r\n                exportAs: 'cdkObserveContent'\r\n            }]\r\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\r\n            type: Output,\r\n            args: ['cdkObserveContent']\r\n        }], disabled: [{\r\n            type: Input,\r\n            args: ['cdkObserveContentDisabled']\r\n        }], debounce: [{\r\n            type: Input\r\n        }] }); })();\r\nclass ObserversModule {\r\n}\r\nObserversModule.ɵfac = function ObserversModule_Factory(t) { return new (t || ObserversModule)(); };\r\nObserversModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\r\nObserversModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MutationObserverFactory] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: [CdkObserveContent],\r\n                declarations: [CdkObserveContent],\r\n                providers: [MutationObserverFactory]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\r\n\r\n"]}