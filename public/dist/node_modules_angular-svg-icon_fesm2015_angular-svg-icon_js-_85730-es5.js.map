{"version":3,"mappings":"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","names":["i","_c0","d","SvgHttpLoader","constructor","http","super","getSvg","url","this","get","responseType","SvgLoader","ɵfac","t","ɵngcc0","ɵngcc1","ɵprov","token","factory","SERVER_URL","InjectionToken","SvgIconRegistryService","loader","platformId","serverUrl","_document","iconsByUrl","Map","iconsLoadingByUrl","document","addSvg","name","data","has","div","createElement","innerHTML","svg","querySelector","set","loadSvg","match","of","o","pipe","map","tap","catchError","err","console","error","throwError","finalize","share","getSvgByName","unloadSvg","PLATFORM_ID","DOCUMENT","parentRegistry","SVG_ICON_REGISTRY_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","SVG_ICON_REGISTRY_PROVIDER_FACTORY","S","loaded","SvgIconComponent","element","differs","renderer","iconReg","cdr","stretch","applyClass","applyCss","helper","SvgIconHelper","_svgStyle","values","differ","find","create","ngOnInit","init","ngOnDestroy","destroy","ngOnChanges","changeRecord","elemSvg","nativeElement","firstChild","src","stylize","setClass","klass","svgClass","previousValue","currentValue","viewBox","warn","svgAriaLabel","doAria","ngDoCheck","changes","diff","applyChanges","svgObs","icnSub","subscribe","initSvg","markForCheck","setSvg","resetDiffer","unsubscribe","icon","cloneNode","elem","appendChild","copyNgContentAttribute","w","getAttribute","h","setAttribute","removeAttribute","hasAttribute","hostElem","attributes","len","length","attribute","item","startsWith","setNgContentAttribute","parent","attributeName","childNodes","child","Element","forEachRemovedItem","record","setStyle","key","forEachAddedItem","forEachChangedItem","nameAndUnit","value","split","_e$split2","unit","concat","removeStyle","target","previous","current","_step","Array","isArray","k","removeClass","_step2","addClass","label","ɵcmp","type","selectors","inputs","svgStyle","features","ngContentSelectors","decls","vars","template","rf","ctx","encapsulation","AngularSvgIconModule","forRoot","config","arguments","ngModule","providers","useClass","ɵmod","ɵinj","imports","CommonModule"],"sources":["webpack:///node_modules/angular-svg-icon/fesm2015/angular-svg-icon.js"],"sourcesContent":["import { Injectable, InjectionToken, Inject, PLATFORM_ID, Optional, SkipSelf, Component, ElementRef, KeyValueDiffers, Renderer2, ChangeDetectorRef, Input, NgModule } from '@angular/core';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { of, throwError } from 'rxjs';\r\nimport { map, tap, catchError, finalize, share } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common/http';\r\n\r\nconst _c0 = [\"*\"];\r\nclass SvgLoader {\r\n}\r\nclass SvgHttpLoader extends SvgLoader {\r\n    constructor(http) {\r\n        super();\r\n        this.http = http;\r\n    }\r\n    getSvg(url) {\r\n        return this.http.get(url, { responseType: 'text' });\r\n    }\r\n}\r\nSvgHttpLoader.ɵfac = function SvgHttpLoader_Factory(t) { return new (t || SvgHttpLoader)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };\r\nSvgHttpLoader.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SvgHttpLoader, factory: SvgHttpLoader.ɵfac });\r\nSvgHttpLoader.ctorParameters = () => [\r\n    { type: HttpClient }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgHttpLoader, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();\r\n\r\nconst SERVER_URL = new InjectionToken('SERVER_URL');\r\nclass SvgIconRegistryService {\r\n    constructor(loader, platformId, serverUrl, _document) {\r\n        this.loader = loader;\r\n        this.platformId = platformId;\r\n        this.serverUrl = serverUrl;\r\n        this._document = _document;\r\n        this.iconsByUrl = new Map();\r\n        this.iconsLoadingByUrl = new Map();\r\n        this.document = this._document;\r\n    }\r\n    /** Add a SVG to the registry by passing a name and the SVG. */\r\n    addSvg(name, data) {\r\n        if (!this.iconsByUrl.has(name)) {\r\n            const div = this.document.createElement('DIV');\r\n            div.innerHTML = data;\r\n            const svg = div.querySelector('svg');\r\n            this.iconsByUrl.set(name, svg);\r\n        }\r\n    }\r\n    /** Load a SVG to the registry from a URL. */\r\n    loadSvg(url, name = url) {\r\n        // not sure if there should be a possibility to use name for server usage\r\n        // so overriding it for now if provided\r\n        // maybe should separate functionality for url and name use-cases\r\n        if (this.serverUrl && url.match(/^(http(s)?):/) === null) {\r\n            url = this.serverUrl + url;\r\n            name = url;\r\n        }\r\n        if (this.iconsByUrl.has(name)) {\r\n            return of(this.iconsByUrl.get(name));\r\n        }\r\n        else if (this.iconsLoadingByUrl.has(name)) {\r\n            return this.iconsLoadingByUrl.get(name);\r\n        }\r\n        const o = this.loader.getSvg(url).pipe(map(svg => {\r\n            const div = this.document.createElement('DIV');\r\n            div.innerHTML = svg;\r\n            return div.querySelector('svg');\r\n        }), tap(svg => this.iconsByUrl.set(name, svg)), catchError(err => {\r\n            console.error(err);\r\n            return throwError(err);\r\n        }), finalize(() => this.iconsLoadingByUrl.delete(name)), share());\r\n        this.iconsLoadingByUrl.set(name, o);\r\n        return o;\r\n    }\r\n    /** Get loaded SVG from registry by name. (also works by url because of blended map) */\r\n    getSvgByName(name) {\r\n        if (this.iconsByUrl.has(name)) {\r\n            return of(this.iconsByUrl.get(name));\r\n        }\r\n        else if (this.iconsLoadingByUrl.has(name)) {\r\n            return this.iconsLoadingByUrl.get(name);\r\n        }\r\n        return throwError(`No svg with name '${name}' has been loaded`);\r\n    }\r\n    /** Remove a SVG from the registry by URL (or name). */\r\n    unloadSvg(url) {\r\n        if (this.iconsByUrl.has(url)) {\r\n            this.iconsByUrl.delete(url);\r\n        }\r\n    }\r\n}\r\nSvgIconRegistryService.ɵfac = function SvgIconRegistryService_Factory(t) { return new (t || SvgIconRegistryService)(ɵngcc0.ɵɵinject(SvgLoader), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(SERVER_URL, 8), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\r\nSvgIconRegistryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SvgIconRegistryService, factory: SvgIconRegistryService.ɵfac });\r\nSvgIconRegistryService.ctorParameters = () => [\r\n    { type: SvgLoader },\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_URL,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgIconRegistryService, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: SvgLoader }, { type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [SERVER_URL]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\nfunction SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, loader, platformId, serverUrl, document) {\r\n    return parentRegistry || new SvgIconRegistryService(loader, platformId, serverUrl, document);\r\n}\r\nconst SVG_ICON_REGISTRY_PROVIDER = {\r\n    provide: SvgIconRegistryService,\r\n    deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService], SvgLoader, [PLATFORM_ID],\r\n        [new Optional(), SERVER_URL], [new Optional(), DOCUMENT]\r\n    ],\r\n    useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY\r\n};\r\n\r\nclass SvgIconHelper {\r\n    constructor() {\r\n        this.loaded = false;\r\n    }\r\n}\r\nclass SvgIconComponent {\r\n    constructor(element, differs, renderer, iconReg, cdr) {\r\n        this.element = element;\r\n        this.differs = differs;\r\n        this.renderer = renderer;\r\n        this.iconReg = iconReg;\r\n        this.cdr = cdr;\r\n        this.stretch = false;\r\n        this.applyClass = false;\r\n        /** @deprecated since 9.1.0 */\r\n        this.applyCss = false;\r\n        this.helper = new SvgIconHelper();\r\n        this._svgStyle = null;\r\n    }\r\n    // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)\r\n    set svgStyle(values) {\r\n        this._svgStyle = values;\r\n        if (!this.helper.differ && values) {\r\n            this.helper.differ = this.differs.find(values).create();\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n    ngOnChanges(changeRecord) {\r\n        const elemSvg = this.element.nativeElement.firstChild;\r\n        if (changeRecord.src || changeRecord.name) {\r\n            if (this.helper.loaded) {\r\n                this.destroy();\r\n            }\r\n            this.init();\r\n        }\r\n        if (changeRecord.stretch) {\r\n            this.stylize();\r\n        }\r\n        if (changeRecord.applyClass) {\r\n            if (this.applyClass) {\r\n                this.setClass(elemSvg, null, this.klass);\r\n            }\r\n            else {\r\n                this.setClass(elemSvg, this.klass, null);\r\n            }\r\n        }\r\n        if (changeRecord.svgClass) {\r\n            this.setClass(elemSvg, changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);\r\n        }\r\n        if (changeRecord.klass) {\r\n            const elem = this.element.nativeElement;\r\n            this.setClass(elem, changeRecord.klass.previousValue, changeRecord.klass.currentValue);\r\n            if (this.applyClass) {\r\n                this.setClass(elemSvg, changeRecord.klass.previousValue, changeRecord.klass.currentValue);\r\n            }\r\n            else {\r\n                this.setClass(elemSvg, changeRecord.klass.previousValue, null);\r\n            }\r\n        }\r\n        if (changeRecord.viewBox) {\r\n            if (this.helper.loaded) {\r\n                this.destroy();\r\n            }\r\n            this.init();\r\n        }\r\n        if (changeRecord.applyCss) {\r\n            console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');\r\n            console.warn('use applyClass instead');\r\n        }\r\n        if (changeRecord.svgAriaLabel) {\r\n            this.doAria(changeRecord.svgAriaLabel.currentValue);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        if (this.helper.svg && this.helper.differ) {\r\n            const changes = this.helper.differ.diff(this._svgStyle);\r\n            if (changes) {\r\n                this.applyChanges(changes);\r\n            }\r\n        }\r\n    }\r\n    init() {\r\n        if (this.name) {\r\n            const svgObs = this.iconReg.getSvgByName(this.name);\r\n            if (svgObs) {\r\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\r\n            }\r\n        }\r\n        else if (this.src) {\r\n            const svgObs = this.iconReg.loadSvg(this.src);\r\n            if (svgObs) {\r\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\r\n            }\r\n        }\r\n        else {\r\n            const elem = this.element.nativeElement;\r\n            elem.innerHTML = '';\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n    initSvg(svg) {\r\n        if (!this.helper.loaded && svg) {\r\n            this.setSvg(svg);\r\n            this.resetDiffer();\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.helper.icnSub) {\r\n            this.helper.icnSub.unsubscribe();\r\n        }\r\n        this.helper = new SvgIconHelper();\r\n    }\r\n    resetDiffer() {\r\n        if (this._svgStyle && !this.helper.differ) {\r\n            this.helper.differ = this.differs.find(this._svgStyle).create();\r\n        }\r\n    }\r\n    setSvg(svg) {\r\n        if (!this.helper.loaded && svg) {\r\n            this.helper.svg = svg;\r\n            const icon = svg.cloneNode(true);\r\n            const elem = this.element.nativeElement;\r\n            elem.innerHTML = '';\r\n            this.renderer.appendChild(elem, icon);\r\n            this.helper.loaded = true;\r\n            this.copyNgContentAttribute(elem, icon);\r\n            if (this.klass && this.applyClass) {\r\n                this.setClass(elem.firstChild, null, this.klass);\r\n            }\r\n            if (this.svgClass) {\r\n                this.setClass(elem.firstChild, null, this.svgClass);\r\n            }\r\n            if (this.viewBox) {\r\n                if (this.viewBox === 'auto') {\r\n                    // Attempt to convert height & width to a viewBox.\r\n                    const w = icon.getAttribute('width');\r\n                    const h = icon.getAttribute('height');\r\n                    if (h && w) {\r\n                        const vb = `0 0 ${w} ${h}`;\r\n                        this.renderer.setAttribute(icon, 'viewBox', vb);\r\n                        this.renderer.removeAttribute(icon, 'width');\r\n                        this.renderer.removeAttribute(icon, 'height');\r\n                    }\r\n                }\r\n                else if (this.viewBox !== '') {\r\n                    this.renderer.setAttribute(icon, 'viewBox', this.viewBox);\r\n                    this.renderer.removeAttribute(icon, 'width');\r\n                    this.renderer.removeAttribute(icon, 'height');\r\n                }\r\n            }\r\n            this.stylize();\r\n            // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override\r\n            // the SVG's aria-label.\r\n            if (!(this.svgAriaLabel === undefined && elem.firstChild.hasAttribute('aria-label'))) {\r\n                this.doAria(this.svgAriaLabel || '');\r\n            }\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n    copyNgContentAttribute(hostElem, icon) {\r\n        const attributes = hostElem.attributes;\r\n        const len = attributes.length;\r\n        for (let i = 0; i < len; i += 1) {\r\n            const attribute = attributes.item(i);\r\n            if (attribute && attribute.name.startsWith('_ngcontent')) {\r\n                this.setNgContentAttribute(icon, attribute.name);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    setNgContentAttribute(parent, attributeName) {\r\n        this.renderer.setAttribute(parent, attributeName, '');\r\n        const len = parent.childNodes.length;\r\n        for (let i = 0; i < len; i += 1) {\r\n            const child = parent.childNodes[i];\r\n            if (child instanceof Element) {\r\n                this.setNgContentAttribute(child, attributeName);\r\n            }\r\n        }\r\n    }\r\n    stylize() {\r\n        if (this.helper.svg) {\r\n            const svg = this.element.nativeElement.firstChild;\r\n            if (this.stretch === true) {\r\n                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');\r\n            }\r\n            else if (this.stretch === false) {\r\n                this.renderer.removeAttribute(svg, 'preserveAspectRatio');\r\n            }\r\n        }\r\n    }\r\n    applyChanges(changes) {\r\n        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));\r\n        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));\r\n        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));\r\n    }\r\n    setStyle(nameAndUnit, value) {\r\n        const [name, unit] = nameAndUnit.split('.');\r\n        value = value !== null && unit ? `${value}${unit}` : value;\r\n        const svg = this.element.nativeElement.firstChild;\r\n        if (value !== null) {\r\n            this.renderer.setStyle(svg, name, value);\r\n        }\r\n        else {\r\n            this.renderer.removeStyle(svg, name);\r\n        }\r\n    }\r\n    setClass(target, previous, current) {\r\n        if (target) {\r\n            if (previous) {\r\n                const klasses = Array.isArray(previous) ? previous : previous.split(' ');\r\n                for (const k of klasses) {\r\n                    this.renderer.removeClass(target, k);\r\n                }\r\n            }\r\n            if (current) {\r\n                const klasses = Array.isArray(current) ? current : current.split(' ');\r\n                for (const k of klasses) {\r\n                    this.renderer.addClass(target, k);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    doAria(label) {\r\n        const svg = this.element.nativeElement.firstChild;\r\n        if (svg) {\r\n            if (label === '') {\r\n                this.renderer.setAttribute(svg, 'aria-hidden', 'true');\r\n                this.renderer.removeAttribute(svg, 'aria-label');\r\n            }\r\n            else {\r\n                this.renderer.removeAttribute(svg, 'aria-hidden');\r\n                this.renderer.setAttribute(svg, 'aria-label', label);\r\n            }\r\n        }\r\n    }\r\n}\r\nSvgIconComponent.ɵfac = function SvgIconComponent_Factory(t) { return new (t || SvgIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SvgIconRegistryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\nSvgIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SvgIconComponent, selectors: [[\"svg-icon\"]], inputs: { stretch: \"stretch\", applyClass: \"applyClass\", applyCss: \"applyCss\", svgStyle: \"svgStyle\", src: \"src\", name: \"name\", svgClass: \"svgClass\", klass: [\"class\", \"klass\"], viewBox: \"viewBox\", svgAriaLabel: \"svgAriaLabel\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function SvgIconComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\nSvgIconComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: KeyValueDiffers },\r\n    { type: Renderer2 },\r\n    { type: SvgIconRegistryService },\r\n    { type: ChangeDetectorRef }\r\n];\r\nSvgIconComponent.propDecorators = {\r\n    src: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    stretch: [{ type: Input }],\r\n    applyClass: [{ type: Input }],\r\n    applyCss: [{ type: Input }],\r\n    svgClass: [{ type: Input }],\r\n    klass: [{ type: Input, args: ['class',] }],\r\n    viewBox: [{ type: Input }],\r\n    svgAriaLabel: [{ type: Input }],\r\n    svgStyle: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgIconComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'svg-icon',\r\n                template: '<ng-content></ng-content>'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }, { type: ɵngcc0.Renderer2 }, { type: SvgIconRegistryService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { stretch: [{\r\n            type: Input\r\n        }], applyClass: [{\r\n            type: Input\r\n        }], applyCss: [{\r\n            type: Input\r\n        }], svgStyle: [{\r\n            type: Input\r\n        }], src: [{\r\n            type: Input\r\n        }], name: [{\r\n            type: Input\r\n        }], svgClass: [{\r\n            type: Input\r\n        }], klass: [{\r\n            type: Input,\r\n            args: ['class']\r\n        }], viewBox: [{\r\n            type: Input\r\n        }], svgAriaLabel: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\nclass AngularSvgIconModule {\r\n    static forRoot(config = {}) {\r\n        return {\r\n            ngModule: AngularSvgIconModule,\r\n            providers: [\r\n                SVG_ICON_REGISTRY_PROVIDER,\r\n                config.loader || { provide: SvgLoader, useClass: SvgHttpLoader }\r\n            ]\r\n        };\r\n    }\r\n}\r\nAngularSvgIconModule.ɵfac = function AngularSvgIconModule_Factory(t) { return new (t || AngularSvgIconModule)(); };\r\nAngularSvgIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AngularSvgIconModule });\r\nAngularSvgIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\r\n            CommonModule,\r\n        ]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularSvgIconModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                ],\r\n                declarations: [\r\n                    SvgIconComponent\r\n                ],\r\n                exports: [SvgIconComponent]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularSvgIconModule, { declarations: function () { return [SvgIconComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SvgIconComponent]; } }); })();\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AngularSvgIconModule, SERVER_URL, SVG_ICON_REGISTRY_PROVIDER, SVG_ICON_REGISTRY_PROVIDER_FACTORY, SvgHttpLoader, SvgIconComponent, SvgIconRegistryService, SvgLoader };\r\n\r\n"]}