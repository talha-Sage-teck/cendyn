{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,eAASA,sBAAT,CAA+BC,KAA/B,EAAsC;AAClC,eAAOA,KAAK,IAAI,IAATA,IAAkB,UAAEA,KAAF,MAAc,OAAvC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAASC,qBAAT,CAA8BD,KAA9B,EAAwD;AAAA,YAAnBE,aAAmB,uEAAH,CAAG;AACpD,eAAOC,eAAc,CAACH,KAAD,CAAdG,GAAwBC,MAAM,CAACJ,KAAD,CAA9BG,GAAwCD,aAA/C;AACH;AACD;AACA;AACA;AACA;;;AACA,eAASC,eAAT,CAAwBH,KAAxB,EAA+B;AAC3B;AACA;AACA;AACA,eAAO,CAACK,KAAK,CAACC,UAAU,CAACN,KAAD,CAAX,CAAN,IAA6B,CAACK,KAAK,CAACD,MAAM,CAACJ,KAAD,CAAP,CAA1C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAASO,YAAT,CAAqBP,KAArB,EAA4B;AACxB,eAAOQ,KAAK,CAACC,OAAND,CAAcR,KAAdQ,IAAuBR,KAAvBQ,GAA+B,CAACR,KAAD,CAAtC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,eAASU,oBAAT,CAA6BV,KAA7B,EAAoC;AAChC,YAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,iBAAO,EAAP;AACH;;AACD,eAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,aAAuCA,KAAvC,OAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,eAASW,cAAT,CAAuBC,YAAvB,EAAqC;AACjC,eAAOA,YAAY,YAAYC,qDAAxBD,GAAqCA,YAAY,CAACE,aAAlDF,GAAkEA,YAAzE;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAASG,kBAAT,CAA2Bf,KAA3B,EAAqD;AAAA,YAAnBgB,SAAmB,uEAAP,KAAO;AACjD,YAAMC,MAAM,GAAG,EAAf;;AACA,YAAIjB,KAAK,IAAI,IAAb,EAAmB;AACf,cAAMkB,YAAY,GAAGV,KAAK,CAACC,OAAND,CAAcR,KAAdQ,IAAuBR,KAAvBQ,GAAgC,UAAER,KAAF,EAAUmB,KAAV,CAAgBH,SAAhB,CAArD;;AADe,qDAEWE,YAFX;AAAA;;AAAA;AAEf,gEAAwC;AAAA,kBAA7BE,WAA6B;AACpC,kBAAMC,aAAa,GAAI,UAAED,WAAF,EAAgBE,IAAhB,EAAvB;;AACA,kBAAID,aAAJ,EAAmB;AACfJ,sBAAM,CAACM,IAAPN,CAAYI,aAAZJ;AACH;AACJ;AAPc;AAAA;AAAA;AAAA;AAAA;AAQlB;;AACD,eAAOA,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;UAEMO;AAAAA;AAAAA;AAAAA;AAAAA;;AAAAA;AAAAA;AAAAA,mBACFC,gBAAOC,QAAPD,EAAiB;AACb,qBAAO,OAAOE,gBAAP,KAA4B,WAA5B,GAA0C,IAA1C,GAAiD,IAAIA,gBAAJ,CAAqBD,QAArB,CAAxD;AACH;AAHCF;;AAAAA;AAAAA;;AAKNA,+BAAuB,CAACI,IAAxBJ,GAA+B,SAASK,+BAAT,CAAyCC,CAAzC,EAA4C;AAAE,iBAAO,KAAKA,CAAC,IAAIN,uBAAV,GAAP;AAA7E;;AACAA,+BAAuB,CAACO,KAAxBP,GAAgCQ,sEAAmB;AAAEC,iBAAO,EAAE,SAASJ,+BAAT,GAA2C;AAAE,mBAAO,IAAIL,uBAAJ,EAAP;AAAxD;AAAiGU,eAAK,EAAEV,uBAAxG;AAAiIW,oBAAU,EAAE;AAA7I,SAAnBH,CAAhCR;eANMA;OAAAA;AAON;;;AAAA,OAAC,YAAY;AAAE,SAAC,OAAOY,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAAf;AAIA;;;UACMC;AAAAA;AACFC,mCAAYC,wBAAZD,EAAsC;AAAA;;AAClC,iBAAKC,wBAAL,GAAgCA,wBAAhC;AACA;;AACA,iBAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACH;;AALCJ;AAAAA;AAAAA,mBAMFK,uBAAc;AAAA;;AACV,mBAAKF,iBAAL,CAAuBG,OAAvB,CAA+B,UAACC,CAAD,EAAIC,OAAJ;AAAA,uBAAgB,MAAKC,gBAAL,CAAsBD,OAAtB,CAAhB;AAAA,eAA/B;AACH;AARCR;AAAAA;AAAAA,mBASFU,iBAAQnC,YAARmC,EAAsB;AAAA;;AAClB,kBAAMF,OAAO,GAAGlC,sEAAcC,YAAdD,CAAhB;AACA,qBAAO,IAAIqC,4CAAJ,CAAgBC,kBAAD,EAAc;AAChC,oBAAMC,MAAM,GAAG,OAAKC,eAAL,CAAqBN,OAArB,CAAf;;AACA,oBAAMO,YAAY,GAAGF,MAAM,CAACG,SAAPH,CAAiBD,QAAjBC,CAArB;AACA,uBAAO,YAAM;AACTE,8BAAY,CAACE,WAAbF;;AACA,yBAAKG,iBAAL,CAAuBV,OAAvB;AAFJ;AAHG,gBAAP;AAQH;AACD;AACJ;AACA;AACA;;AAvBMR;AAAAA;AAAAA,mBAwBFc,yBAAgBN,OAAhBM,EAAyB;AACrB,kBAAI,CAAC,KAAKX,iBAAL,CAAuBgB,GAAvB,CAA2BX,OAA3B,CAAL,EAA0C;AACtC,oBAAMK,MAAM,GAAG,IAAIO,yCAAJ,EAAf;;AACA,oBAAMR,QAAQ,GAAG,KAAKV,wBAAL,CAA8Bd,MAA9B,CAAqCiC,mBAAS;AAAA,yBAAIR,MAAM,CAACS,IAAPT,CAAYQ,SAAZR,CAAJ;AAAA,iBAA9C,CAAjB;;AACA,oBAAID,QAAJ,EAAc;AACVA,0BAAQ,CAACF,OAATE,CAAiBJ,OAAjBI,EAA0B;AACtBW,iCAAa,EAAE,IADO;AAEtBC,6BAAS,EAAE,IAFW;AAGtBC,2BAAO,EAAE;AAHa,mBAA1Bb;AAKH;;AACD,qBAAKT,iBAAL,CAAuBuB,GAAvB,CAA2BlB,OAA3B,EAAoC;AAAEI,0BAAF,EAAEA,QAAF;AAAYC,wBAAZ,EAAYA,MAAZ;AAAoBc,uBAAK,EAAE;AAA3B,iBAApC;AAVJ,qBAYK;AACD,qBAAKxB,iBAAL,CAAuByB,GAAvB,CAA2BpB,OAA3B,EAAoCmB,KAApC;AACH;;AACD,qBAAO,KAAKxB,iBAAL,CAAuByB,GAAvB,CAA2BpB,OAA3B,EAAoCK,MAA3C;AACH;AACD;AACJ;AACA;AACA;;AA7CMb;AAAAA;AAAAA,mBA8CFkB,2BAAkBV,OAAlBU,EAA2B;AACvB,kBAAI,KAAKf,iBAAL,CAAuBgB,GAAvB,CAA2BX,OAA3B,CAAJ,EAAyC;AACrC,qBAAKL,iBAAL,CAAuByB,GAAvB,CAA2BpB,OAA3B,EAAoCmB,KAApC;;AACA,oBAAI,CAAC,KAAKxB,iBAAL,CAAuByB,GAAvB,CAA2BpB,OAA3B,EAAoCmB,KAAzC,EAAgD;AAC5C,uBAAKlB,gBAAL,CAAsBD,OAAtB;AACH;AACJ;AACJ;AACD;;AAtDER;AAAAA;AAAAA,mBAuDFS,0BAAiBD,OAAjBC,EAA0B;AACtB,kBAAI,KAAKN,iBAAL,CAAuBgB,GAAvB,CAA2BX,OAA3B,CAAJ,EAAyC;AACrC,4CAA6B,KAAKL,iBAAL,CAAuByB,GAAvB,CAA2BpB,OAA3B,CAA7B;AAAA,oBAAQI,QAAR,yBAAQA,QAAR;AAAA,oBAAkBC,MAAlB,yBAAkBA,MAAlB;;AACA,oBAAID,QAAJ,EAAc;AACVA,0BAAQ,CAACiB,UAATjB;AACH;;AACDC,sBAAM,CAACiB,QAAPjB;;AACA,qBAAKV,iBAAL,WAA8BK,OAA9B;AACH;AACJ;AAhECR;;AAAAA;AAAAA;;AAkENA,uBAAe,CAACT,IAAhBS,GAAuB,SAAS+B,uBAAT,CAAiCtC,CAAjC,EAAoC;AAAE,iBAAO,KAAKA,CAAC,IAAIO,eAAV,EAA2BgC,uDAAgB7C,wBAAhB6C,CAA3B,CAAP;AAA7D;;AACAhC,uBAAe,CAACN,KAAhBM,GAAwBL,sEAAmB;AAAEC,iBAAO,EAAE,SAASmC,uBAAT,GAAmC;AAAE,mBAAO,IAAI/B,eAAJ,CAAoBiC,4DAAS9C,wBAAT8C,CAApB,CAAP;AAAhD;AAAkHpC,eAAK,EAAEG,eAAzH;AAA0IF,oBAAU,EAAE;AAAtJ,SAAnBH,CAAxBK;eAnEMA;OAAAA;AAuEN;;;AAAA,OAAC,YAAY;AAAE,SAAC,OAAOD,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAAf;AAIA;AACA;AACA;AACA;;;UACMmC;AAAAA;AACFjC,qCAAYkC,gBAAZlC,EAA8BmC,WAA9BnC,EAA2CoC,OAA3CpC,EAAoD;AAAA;;AAChD,iBAAKkC,gBAAL,GAAwBA,gBAAxB;AACA,iBAAKC,WAAL,GAAmBA,WAAnB;AACA,iBAAKC,OAAL,GAAeA,OAAf;AACA;;AACA,iBAAKC,KAAL,GAAa,IAAIC,uDAAJ,EAAb;AACA,iBAAKC,SAAL,GAAiB,KAAjB;AACA,iBAAKC,oBAAL,GAA4B,IAA5B;AACH;AACD;AACJ;AACA;AACA;;;AAbMP;AAAAA;AAAAA,iBAcU,eAAG;AAAE,qBAAO,KAAKM,SAAZ;AAAwB,aAdvCN;AAAAA,iBAeU,aAACvE,KAAD,EAAQ;AAChB,mBAAK6E,SAAL,GAAiB9E,8EAAsBC,KAAtBD,CAAjB;AACA,mBAAK8E,SAAL,GAAiB,KAAKE,YAAL,EAAjB,GAAuC,KAAKC,UAAL,EAAvC;AACH;AACD;;AAnBET;AAAAA;AAAAA,iBAoBU,eAAG;AAAE,qBAAO,KAAKU,SAAZ;AAAwB,aApBvCV;AAAAA,iBAqBU,aAACvE,KAAD,EAAQ;AAChB,mBAAKiF,SAAL,GAAiBhF,6EAAqBD,KAArBC,CAAjB;;AACA,mBAAK+E,UAAL;AACH;AAxBCT;AAAAA;AAAAA,mBAyBFW,8BAAqB;AACjB,kBAAI,CAAC,KAAKJ,oBAAN,IAA8B,CAAC,KAAKK,QAAxC,EAAkD;AAC9C,qBAAKH,UAAL;AACH;AACJ;AA7BCT;AAAAA;AAAAA,mBA8BF7B,uBAAc;AACV,mBAAKqC,YAAL;AACH;AAhCCR;AAAAA;AAAAA,mBAiCFS,sBAAa;AAAA;;AACT,mBAAKD,YAAL;;AACA,kBAAM7B,MAAM,GAAG,KAAKsB,gBAAL,CAAsBzB,OAAtB,CAA8B,KAAK0B,WAAnC,CAAf,CAFS,CAGT;AACA;AACA;AACA;;;AACA,mBAAKC,OAAL,CAAaU,iBAAb,CAA+B,YAAM;AACjC,uBAAKN,oBAAL,GACI,CAAC,OAAKO,QAAL,GAAgBnC,MAAM,CAACoC,IAAPpC,CAAYqC,8DAAa,OAAKF,QAAlBE,CAAZrC,CAAhB,GAA2DA,MAA5D,EAAoEG,SAApE,CAA8E,OAAKsB,KAAnF,CADJ;AADJ;AAIH;AA5CCJ;AAAAA;AAAAA,mBA6CFQ,wBAAe;AACX,kBAAIS,EAAJ;;AACA,eAACA,EAAE,GAAG,KAAKV,oBAAX,MAAqC,IAArC,IAA6CU,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAAClC,WAAHkC,EAAtE;AACH;AAhDCjB;;AAAAA;AAAAA;;AAkDNA,yBAAiB,CAAC3C,IAAlB2C,GAAyB,SAASkB,yBAAT,CAAmC3D,CAAnC,EAAsC;AAAE,iBAAO,KAAKA,CAAC,IAAIyC,iBAAV,EAA6BF,gEAAyBhC,gBAAzBgC,CAA7B,EAAwEA,gEAAyBA,qDAAzBA,CAAxE,EAAqHA,gEAAyBA,iDAAzBA,CAArH,CAAP;AAAjE;;AACAE,yBAAiB,CAACmB,IAAlBnB,GAAyB,aAAcF,gEAAyB;AAAEsB,cAAI,EAAEpB,iBAAR;AAA2BqB,mBAAS,EAAE,CAAC,CAAC,EAAD,EAAK,mBAAL,EAA0B,EAA1B,CAAD,CAAtC;AAAuEC,gBAAM,EAAE;AAAEV,oBAAQ,EAAE,CAAC,2BAAD,EAA8B,UAA9B,CAAZ;AAAuDE,oBAAQ,EAAE;AAAjE,WAA/E;AAA8JS,iBAAO,EAAE;AAAEnB,iBAAK,EAAE;AAAT,WAAvK;AAAuMoB,kBAAQ,EAAE,CAAC,mBAAD;AAAjN,SAAzB1B,CAAvCE;eAnDMA;OAAAA;AA8DN;;;AAAA,OAAC,YAAY;AAAE,SAAC,OAAOnC,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAAf;;UAeM4D;AAAAA;AAAAA;AAAAA;;AAENA,uBAAe,CAACpE,IAAhBoE,GAAuB,SAASC,uBAAT,CAAiCnE,CAAjC,EAAoC;AAAE,iBAAO,KAAKA,CAAC,IAAIkE,eAAV,GAAP;AAA7D;;AACAA,uBAAe,CAACE,IAAhBF,GAAuB,aAAc3B,+DAAwB;AAAEsB,cAAI,EAAEK;AAAR,SAAxB3B,CAArC2B;AACAA,uBAAe,CAACG,IAAhBH,GAAuB,aAAc3B,+DAAwB;AAAE+B,mBAAS,EAAE,CAAC5E,wBAAD;AAAb,SAAxB6C,CAArC2B;eAJMA;OAAAA;AAKN;;;AAAA,OAAC,YAAY;AAAE,SAAC,OAAO5D,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAAf;AAQA;;;AAAA,OAAC,YAAY;AAAE,SAAC,OAAOiE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDhC,iEAA0B2B,gBAA1B3B,EAA2C;AAAEiC,sBAAY,EAAE,CAAC/B,kBAAD,CAAhB;AAAqCgC,iBAAO,EAAE,CAAChC,kBAAD;AAA9C,SAA3CF,CAAnD;AAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;","names":["coerceBooleanProperty","value","coerceNumberProperty","fallbackValue","_isNumberValue","Number","isNaN","parseFloat","coerceArray","Array","isArray","coerceCssPixelValue","coerceElement","elementOrRef","ElementRef","nativeElement","coerceStringArray","separator","result","sourceValues","split","sourceValue","trimmedString","trim","push","MutationObserverFactory","create","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","_","element","_cleanupObserver","observe","Observable","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","Subject","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","ContentObserver_Factory","ɵngcc0","ɵɵinject","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","_unsubscribe","_subscribe","_debounce","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","debounceTime","_a","CdkObserveContent_Factory","ɵdir","type","selectors","inputs","outputs","exportAs","ObserversModule","ObserversModule_Factory","ɵmod","ɵinj","providers","ngJitMode","declarations","exports"],"sources":["webpack:///node_modules/@angular/cdk/fesm2015/coercion.js","webpack:///node_modules/@angular/cdk/fesm2015/observers.js"],"sourcesContent":["import { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Coerces a data-bound value (typically a string) to a boolean. */\r\nfunction coerceBooleanProperty(value) {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction coerceNumberProperty(value, fallbackValue = 0) {\r\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\r\n}\r\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\r\nfunction _isNumberValue(value) {\r\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\r\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\r\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\r\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction coerceArray(value) {\r\n    return Array.isArray(value) ? value : [value];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Coerces a value to a CSS pixel value. */\r\nfunction coerceCssPixelValue(value) {\r\n    if (value == null) {\r\n        return '';\r\n    }\r\n    return typeof value === 'string' ? value : `${value}px`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Coerces an ElementRef or an Element into an element.\r\n * Useful for APIs that can accept either a ref or the native element itself.\r\n */\r\nfunction coerceElement(elementOrRef) {\r\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Coerces a value to an array of trimmed non-empty strings.\r\n * Any input that is not an array, `null` or `undefined` will be turned into a string\r\n * via `toString()` and subsequently split with the given separator.\r\n * `null` and `undefined` will result in an empty array.\r\n * This results in the following outcomes:\r\n * - `null` -&gt; `[]`\r\n * - `[null]` -&gt; `[\"null\"]`\r\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\r\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\r\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\r\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\r\n *\r\n * Useful for defining CSS classes or table columns.\r\n * @param value the value to coerce into an array of strings\r\n * @param separator split-separator if value isn't an array\r\n */\r\nfunction coerceStringArray(value, separator = /\\s+/) {\r\n    const result = [];\r\n    if (value != null) {\r\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\r\n        for (const sourceValue of sourceValues) {\r\n            const trimmedString = `${sourceValue}`.trim();\r\n            if (trimmedString) {\r\n                result.push(trimmedString);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\r\n\n","import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nclass MutationObserverFactory {\r\n    create(callback) {\r\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n    }\r\n}\r\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\r\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n/** An injectable service that allows watching elements for changes to their content. */\r\nclass ContentObserver {\r\n    constructor(_mutationObserverFactory) {\r\n        this._mutationObserverFactory = _mutationObserverFactory;\r\n        /** Keeps track of the existing MutationObservers so they can be reused. */\r\n        this._observedElements = new Map();\r\n    }\r\n    ngOnDestroy() {\r\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n    }\r\n    observe(elementOrRef) {\r\n        const element = coerceElement(elementOrRef);\r\n        return new Observable((observer) => {\r\n            const stream = this._observeElement(element);\r\n            const subscription = stream.subscribe(observer);\r\n            return () => {\r\n                subscription.unsubscribe();\r\n                this._unobserveElement(element);\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Observes the given element by using the existing MutationObserver if available, or creating a\r\n     * new one if not.\r\n     */\r\n    _observeElement(element) {\r\n        if (!this._observedElements.has(element)) {\r\n            const stream = new Subject();\r\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n            if (observer) {\r\n                observer.observe(element, {\r\n                    characterData: true,\r\n                    childList: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n            this._observedElements.set(element, { observer, stream, count: 1 });\r\n        }\r\n        else {\r\n            this._observedElements.get(element).count++;\r\n        }\r\n        return this._observedElements.get(element).stream;\r\n    }\r\n    /**\r\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n     * observing this element.\r\n     */\r\n    _unobserveElement(element) {\r\n        if (this._observedElements.has(element)) {\r\n            this._observedElements.get(element).count--;\r\n            if (!this._observedElements.get(element).count) {\r\n                this._cleanupObserver(element);\r\n            }\r\n        }\r\n    }\r\n    /** Clean up the underlying MutationObserver for the specified element. */\r\n    _cleanupObserver(element) {\r\n        if (this._observedElements.has(element)) {\r\n            const { observer, stream } = this._observedElements.get(element);\r\n            if (observer) {\r\n                observer.disconnect();\r\n            }\r\n            stream.complete();\r\n            this._observedElements.delete(element);\r\n        }\r\n    }\r\n}\r\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\r\nContentObserver.ɵprov = ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\r\nContentObserver.ctorParameters = () => [\r\n    { type: MutationObserverFactory }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\nclass CdkObserveContent {\r\n    constructor(_contentObserver, _elementRef, _ngZone) {\r\n        this._contentObserver = _contentObserver;\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        /** Event emitted for each change in the element's content. */\r\n        this.event = new EventEmitter();\r\n        this._disabled = false;\r\n        this._currentSubscription = null;\r\n    }\r\n    /**\r\n     * Whether observing content is disabled. This option can be used\r\n     * to disconnect the underlying MutationObserver until it is needed.\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._disabled ? this._unsubscribe() : this._subscribe();\r\n    }\r\n    /** Debounce interval for emitting the changes. */\r\n    get debounce() { return this._debounce; }\r\n    set debounce(value) {\r\n        this._debounce = coerceNumberProperty(value);\r\n        this._subscribe();\r\n    }\r\n    ngAfterContentInit() {\r\n        if (!this._currentSubscription && !this.disabled) {\r\n            this._subscribe();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._unsubscribe();\r\n    }\r\n    _subscribe() {\r\n        this._unsubscribe();\r\n        const stream = this._contentObserver.observe(this._elementRef);\r\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n        // Consider brining it back inside the zone next time we're making breaking changes.\r\n        // Bringing it back inside can cause things like infinite change detection loops and changed\r\n        // after checked errors if people's code isn't handling it properly.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._currentSubscription =\r\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n        });\r\n    }\r\n    _unsubscribe() {\r\n        var _a;\r\n        (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\r\n    }\r\n}\r\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nCdkObserveContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\r\nCdkObserveContent.ctorParameters = () => [\r\n    { type: ContentObserver },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\nCdkObserveContent.propDecorators = {\r\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\r\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\r\n    debounce: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkObserveContent]',\r\n                exportAs: 'cdkObserveContent'\r\n            }]\r\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\r\n            type: Output,\r\n            args: ['cdkObserveContent']\r\n        }], disabled: [{\r\n            type: Input,\r\n            args: ['cdkObserveContentDisabled']\r\n        }], debounce: [{\r\n            type: Input\r\n        }] }); })();\r\nclass ObserversModule {\r\n}\r\nObserversModule.ɵfac = function ObserversModule_Factory(t) { return new (t || ObserversModule)(); };\r\nObserversModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\r\nObserversModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MutationObserverFactory] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: [CdkObserveContent],\r\n                declarations: [CdkObserveContent],\r\n                providers: [MutationObserverFactory]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\r\n\r\n"]}