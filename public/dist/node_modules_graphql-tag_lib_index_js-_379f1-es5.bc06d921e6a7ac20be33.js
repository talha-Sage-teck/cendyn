(function () {
  "use strict";

  (self["webpackChunkshell"] = self["webpackChunkshell"] || []).push([["node_modules_graphql-tag_lib_index_js-_379f1"], {
    /***/
    51144: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "gql": function gql() {
          return (
            /* binding */
            _gql
          );
        },

        /* harmony export */
        "resetCaches": function resetCaches() {
          return (
            /* binding */
            _resetCaches
          );
        },

        /* harmony export */
        "disableFragmentWarnings": function disableFragmentWarnings() {
          return (
            /* binding */
            _disableFragmentWarnings
          );
        },

        /* harmony export */
        "enableExperimentalFragmentVariables": function enableExperimentalFragmentVariables() {
          return (
            /* binding */
            _enableExperimentalFragmentVariables
          );
        },

        /* harmony export */
        "disableExperimentalFragmentVariables": function disableExperimentalFragmentVariables() {
          return (
            /* binding */
            _disableExperimentalFragmentVariables
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! tslib */
      75545);
      /* harmony import */


      var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! graphql */
      94005);
      /* harmony import */


      var graphql__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql__WEBPACK_IMPORTED_MODULE_0__);

      var docCache = new Map();
      var fragmentSourceMap = new Map();
      var printFragmentWarnings = true;
      var experimentalFragmentVariables = false;

      function normalize(string) {
        return string.replace(/[\s,]+/g, ' ').trim();
      }

      function cacheKeyFromLoc(loc) {
        return normalize(loc.source.body.substring(loc.start, loc.end));
      }

      function processFragments(ast) {
        var seenKeys = new Set();
        var definitions = [];
        ast.definitions.forEach(function (fragmentDefinition) {
          if (fragmentDefinition.kind === 'FragmentDefinition') {
            var fragmentName = fragmentDefinition.name.value;
            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
            var sourceKeySet = fragmentSourceMap.get(fragmentName);

            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
              if (printFragmentWarnings) {
                console.warn("Warning: fragment with name " + fragmentName + " already exists.\n" + "graphql-tag enforces all fragment names across your application to be unique; read more about\n" + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
              }
            } else if (!sourceKeySet) {
              fragmentSourceMap.set(fragmentName, sourceKeySet = new Set());
            }

            sourceKeySet.add(sourceKey);

            if (!seenKeys.has(sourceKey)) {
              seenKeys.add(sourceKey);
              definitions.push(fragmentDefinition);
            }
          } else {
            definitions.push(fragmentDefinition);
          }
        });
        return (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, ast), {
          definitions: definitions
        });
      }

      function stripLoc(doc) {
        var workSet = new Set(doc.definitions);
        workSet.forEach(function (node) {
          if (node.loc) delete node.loc;
          Object.keys(node).forEach(function (key) {
            var value = node[key];

            if (value && typeof value === 'object') {
              workSet.add(value);
            }
          });
        });
        var loc = doc.loc;

        if (loc) {
          delete loc.startToken;
          delete loc.endToken;
        }

        return doc;
      }

      function parseDocument(source) {
        var cacheKey = normalize(source);

        if (!docCache.has(cacheKey)) {
          var parsed = (0, graphql__WEBPACK_IMPORTED_MODULE_0__.parse)(source, {
            experimentalFragmentVariables: experimentalFragmentVariables
          });

          if (!parsed || parsed.kind !== 'Document') {
            throw new Error('Not a valid GraphQL document.');
          }

          docCache.set(cacheKey, stripLoc(processFragments(parsed)));
        }

        return docCache.get(cacheKey);
      }

      function _gql(literals) {
        var args = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }

        if (typeof literals === 'string') {
          literals = [literals];
        }

        var result = literals[0];
        args.forEach(function (arg, i) {
          if (arg && arg.kind === 'Document') {
            result += arg.loc.source.body;
          } else {
            result += arg;
          }

          result += literals[i + 1];
        });
        return parseDocument(result);
      }

      function _resetCaches() {
        docCache.clear();
        fragmentSourceMap.clear();
      }

      function _disableFragmentWarnings() {
        printFragmentWarnings = false;
      }

      function _enableExperimentalFragmentVariables() {
        experimentalFragmentVariables = true;
      }

      function _disableExperimentalFragmentVariables() {
        experimentalFragmentVariables = false;
      }

      var extras = {
        gql: _gql,
        resetCaches: _resetCaches,
        disableFragmentWarnings: _disableFragmentWarnings,
        enableExperimentalFragmentVariables: _enableExperimentalFragmentVariables,
        disableExperimentalFragmentVariables: _disableExperimentalFragmentVariables
      };

      (function (gql_1) {
        gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
      })(_gql || (_gql = {}));

      _gql["default"] = _gql;
      /* harmony default export */

      __webpack_exports__["default"] = _gql;
      /***/
    }
  }]);
})();
//# sourceMappingURL=node_modules_graphql-tag_lib_index_js-_379f1-es5.bc06d921e6a7ac20be33.js.map