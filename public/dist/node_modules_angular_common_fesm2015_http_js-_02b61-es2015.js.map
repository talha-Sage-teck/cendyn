{"version":3,"mappings":"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","names":["constructor","headers","this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","HttpHeaders","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","i","fn","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","v","encodeURIComponent","replace","options","updates","cloneFrom","encoder","HttpUrlEncodingCodec","fromString","fromObject","Error","map","rawParams","codec","param","eqIdx","val","list","isArray","res","appendAll","params","_value","toString","eKey","join","HttpParams","valueToString","idx","splice","r","defaultValue","token","ArrayBuffer","Blob","FormData","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","HttpContext","urlWithParams","qIdx","serializeBody","isArrayBuffer","isBlob","isFormData","URLSearchParams","JSON","stringify","detectContentTypeHeader","type","_a","setHeaders","reduce","setParams","HttpRequest","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","defaultStatus","defaultStatusText","status","statusText","ok","HttpResponseBase","super","HttpHeaderResponse","HttpResponse","message","error","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","addBody","post","put","ɵfac","t","ɵngcc0","HttpHandler","ɵprov","factory","next","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","HttpErrorResponse","onError","addEventListener","appendChild","removeEventListener","JsonpCallbackContext","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","HttpXhrBackend","xhrFactory","xhr","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","readyState","DONE","abort","ɵngcc1","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfTokenExtractor","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptorHandler","HttpBackend","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","useValue","ɵmod","ɵinj","useExisting","multi","HttpClientModule","imports","withOptions","HttpClientJsonpModule","useFactory","jsonpCallbackContext","XhrFactory","XhrFactory$1"],"sources":["webpack:///node_modules/@angular/common/fesm2015/http.js"],"sourcesContent":["/**\r\n * @license Angular v12.1.0\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\r\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const key = name.toLowerCase();\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            this.headers.get(key).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let values = headers[name];\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or overide for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n        // may start with the `?` char, so we strip it if it's present.\r\n        const params = rawParams.replace(/^\\?/, '').split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\nfunction valueToString(value) {\r\n    return `${value}`;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    constructor(options = {}) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const value = options.fromObject[key];\r\n                this.map.set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\r\n    appendAll(params) {\r\n        const updates = [];\r\n        Object.keys(params).forEach(param => {\r\n            const value = params[param];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(_value => {\r\n                    updates.push({ param, value: _value, op: 'a' });\r\n                });\r\n            }\r\n            else {\r\n                updates.push({ param, value: value, op: 'a' });\r\n            }\r\n        });\r\n        return this.clone(updates);\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter(param => param !== '')\r\n            .join('&');\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat(update);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(valueToString(update.value));\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(valueToString(update.value));\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContextToken {\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n}\r\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContext {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * Store a value in the context. If a value is already present it will be overwritten.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     * @param value The value to store.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    set(token, value) {\r\n        this.map.set(token, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\r\n    get(token) {\r\n        if (!this.map.has(token)) {\r\n            this.map.set(token, token.defaultValue());\r\n        }\r\n        return this.map.get(token);\r\n    }\r\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    delete(token) {\r\n        this.map.delete(token);\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\r\n    keys() {\r\n        return this.map.keys();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\r\nfunction isUrlSearchParams(value) {\r\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.context) {\r\n                this.context = options.context;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no context have been passed in, construct a new HttpContext instance.\r\n        if (!this.context) {\r\n            this.context = new HttpContext();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            typeof this.body === 'boolean') {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        var _a;\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Pass on context if needed\r\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            context,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        context: options.context,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                context: options.context,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\r\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\r\nclass HttpInterceptorHandler {\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\r\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\r\n        type: Injectable\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n        /**\r\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n         */\r\n        this.resolvedPromise = Promise.resolve();\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            let cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // We wrap it in an extra Promise, to ensure the microtask\r\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\r\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\r\n                this.resolvedPromise.then(() => {\r\n                    // Cleanup the page.\r\n                    cleanup();\r\n                    // Check whether the response callback has run.\r\n                    if (!finished) {\r\n                        // It hasn't, something went wrong with the request. Return an error via\r\n                        // the Observable error path. All JSONP errors have status 0.\r\n                        observer.error(new HttpErrorResponse({\r\n                            url,\r\n                            status: 0,\r\n                            statusText: 'JSONP Error',\r\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Success. body either contains the response body or null if none was\r\n                    // returned.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        status: 200 /* Ok */,\r\n                        statusText: 'OK',\r\n                        url,\r\n                    }));\r\n                    // Complete the stream, the response is over.\r\n                    observer.complete();\r\n                });\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n}\r\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param req The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(req);\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\r\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\r\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let body = null;\r\n                if (status !== 204 /* NoContent */) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 /* Ok */ : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = { error, text: body };\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const onError = (error) => {\r\n                const { url } = partialFromXhr();\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            xhr.addEventListener('timeout', onError);\r\n            xhr.addEventListener('abort', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('abort', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                xhr.removeEventListener('timeout', onError);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                if (xhr.readyState !== xhr.DONE) {\r\n                    xhr.abort();\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\r\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory$1 }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * @internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\r\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_COOKIE_NAME]\r\n            }] }]; }, null); })();\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    intercept(req, next) {\r\n        const lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        const token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\r\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_HEADER_NAME]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\r\nclass HttpInterceptingHandler {\r\n    constructor(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    handle(req) {\r\n        if (this.chain === null) {\r\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    }\r\n}\r\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\r\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\r\nHttpInterceptingHandler.ctorParameters = () => [\r\n    { type: HttpBackend },\r\n    { type: Injector }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\r\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\r\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\r\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpXsrfInterceptor,\r\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\r\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\r\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpClient,\r\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n        HttpXhrBackend,\r\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n    ], imports: [[\r\n            HttpClientXsrfModule.withOptions({\r\n                cookieName: 'XSRF-TOKEN',\r\n                headerName: 'X-XSRF-TOKEN'\r\n            }),\r\n        ]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                /**\r\n                 * Optional configuration for XSRF protection.\r\n                 */\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN'\r\n                    }),\r\n                ],\r\n                /**\r\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                 * with supporting services for HTTP communications.\r\n                 */\r\n                providers: [\r\n                    HttpClient,\r\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\r\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\r\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\r\nconst XhrFactory = XhrFactory$1;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\r\n\r\n"]}