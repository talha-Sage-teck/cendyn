(function () {
  "use strict";

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (self["webpackChunkshell"] = self["webpackChunkshell"] || []).push([["node_modules_angular-svg-icon_fesm2015_angular-svg-icon_js-_85730"], {
    /***/
    48622: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "AngularSvgIconModule": function AngularSvgIconModule() {
          return (
            /* binding */
            _AngularSvgIconModule
          );
        },

        /* harmony export */
        "SERVER_URL": function SERVER_URL() {
          return (
            /* binding */
            _SERVER_URL
          );
        },

        /* harmony export */
        "SVG_ICON_REGISTRY_PROVIDER": function SVG_ICON_REGISTRY_PROVIDER() {
          return (
            /* binding */
            _SVG_ICON_REGISTRY_PROVIDER
          );
        },

        /* harmony export */
        "SVG_ICON_REGISTRY_PROVIDER_FACTORY": function SVG_ICON_REGISTRY_PROVIDER_FACTORY() {
          return (
            /* binding */
            _SVG_ICON_REGISTRY_PROVIDER_FACTORY
          );
        },

        /* harmony export */
        "SvgHttpLoader": function SvgHttpLoader() {
          return (
            /* binding */
            _SvgHttpLoader
          );
        },

        /* harmony export */
        "SvgIconComponent": function SvgIconComponent() {
          return (
            /* binding */
            _SvgIconComponent
          );
        },

        /* harmony export */
        "SvgIconRegistryService": function SvgIconRegistryService() {
          return (
            /* binding */
            _SvgIconRegistryService
          );
        },

        /* harmony export */
        "SvgLoader": function SvgLoader() {
          return (
            /* binding */
            _SvgLoader
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      14468);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      1090);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      71180);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      92343);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__);
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/common/http */
      12445);
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_angular_common_http__WEBPACK_IMPORTED_MODULE_4__);

      var _c0 = ["*"];

      var _SvgLoader = function _SvgLoader() {
        _classCallCheck(this, _SvgLoader);
      };

      var _SvgHttpLoader = /*#__PURE__*/function () {
        var SvgHttpLoader = /*#__PURE__*/function (_SvgLoader2) {
          _inherits(SvgHttpLoader, _SvgLoader2);

          var _super = _createSuper(SvgHttpLoader);

          function SvgHttpLoader(http) {
            var _this;

            _classCallCheck(this, SvgHttpLoader);

            _this = _super.call(this);
            _this.http = http;
            return _this;
          }

          _createClass(SvgHttpLoader, [{
            key: "getSvg",
            value: function getSvg(url) {
              return this.http.get(url, {
                responseType: 'text'
              });
            }
          }]);

          return SvgHttpLoader;
        }(_SvgLoader);

        SvgHttpLoader.ɵfac = function SvgHttpLoader_Factory(t) {
          return new (t || SvgHttpLoader)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_4__.HttpClient));
        };

        SvgHttpLoader.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
          token: SvgHttpLoader,
          factory: SvgHttpLoader.ɵfac
        });
        return SvgHttpLoader;
      }();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();

      var _SERVER_URL = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('SERVER_URL');

      var _SvgIconRegistryService = /*#__PURE__*/function () {
        var SvgIconRegistryService = /*#__PURE__*/function () {
          function SvgIconRegistryService(loader, platformId, serverUrl, _document) {
            _classCallCheck(this, SvgIconRegistryService);

            this.loader = loader;
            this.platformId = platformId;
            this.serverUrl = serverUrl;
            this._document = _document;
            this.iconsByUrl = new Map();
            this.iconsLoadingByUrl = new Map();
            this.document = this._document;
          }
          /** Add a SVG to the registry by passing a name and the SVG. */


          _createClass(SvgIconRegistryService, [{
            key: "addSvg",
            value: function addSvg(name, data) {
              if (!this.iconsByUrl.has(name)) {
                var div = this.document.createElement('DIV');
                div.innerHTML = data;
                var svg = div.querySelector('svg');
                this.iconsByUrl.set(name, svg);
              }
            }
            /** Load a SVG to the registry from a URL. */

          }, {
            key: "loadSvg",
            value: function loadSvg(url) {
              var _this2 = this;

              var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;

              // not sure if there should be a possibility to use name for server usage
              // so overriding it for now if provided
              // maybe should separate functionality for url and name use-cases
              if (this.serverUrl && url.match(/^(http(s)?):/) === null) {
                url = this.serverUrl + url;
                name = url;
              }

              if (this.iconsByUrl.has(name)) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(this.iconsByUrl.get(name));
              } else if (this.iconsLoadingByUrl.has(name)) {
                return this.iconsLoadingByUrl.get(name);
              }

              var o = this.loader.getSvg(url).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(function (svg) {
                var div = _this2.document.createElement('DIV');

                div.innerHTML = svg;
                return div.querySelector('svg');
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(function (svg) {
                return _this2.iconsByUrl.set(name, svg);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)(function (err) {
                console.error(err);
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.throwError)(err);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.finalize)(function () {
                return _this2.iconsLoadingByUrl["delete"](name);
              }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.share)());
              this.iconsLoadingByUrl.set(name, o);
              return o;
            }
            /** Get loaded SVG from registry by name. (also works by url because of blended map) */

          }, {
            key: "getSvgByName",
            value: function getSvgByName(name) {
              if (this.iconsByUrl.has(name)) {
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(this.iconsByUrl.get(name));
              } else if (this.iconsLoadingByUrl.has(name)) {
                return this.iconsLoadingByUrl.get(name);
              }

              return (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.throwError)("No svg with name '".concat(name, "' has been loaded"));
            }
            /** Remove a SVG from the registry by URL (or name). */

          }, {
            key: "unloadSvg",
            value: function unloadSvg(url) {
              if (this.iconsByUrl.has(url)) {
                this.iconsByUrl["delete"](url);
              }
            }
          }]);

          return SvgIconRegistryService;
        }();

        SvgIconRegistryService.ɵfac = function SvgIconRegistryService_Factory(t) {
          return new (t || SvgIconRegistryService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_SvgLoader), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_SERVER_URL, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT, 8));
        };

        SvgIconRegistryService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
          token: SvgIconRegistryService,
          factory: SvgIconRegistryService.ɵfac
        });
        return SvgIconRegistryService;
      }();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();

      function _SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, loader, platformId, serverUrl, document) {
        return parentRegistry || new _SvgIconRegistryService(loader, platformId, serverUrl, document);
      }

      var _SVG_ICON_REGISTRY_PROVIDER = {
        provide: _SvgIconRegistryService,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), _SvgIconRegistryService], _SvgLoader, [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID], [new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _SERVER_URL], [new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]],
        useFactory: _SVG_ICON_REGISTRY_PROVIDER_FACTORY
      };

      var SvgIconHelper = function SvgIconHelper() {
        _classCallCheck(this, SvgIconHelper);

        this.loaded = false;
      };

      var _SvgIconComponent = /*#__PURE__*/function () {
        var SvgIconComponent = /*#__PURE__*/function () {
          function SvgIconComponent(element, differs, renderer, iconReg, cdr) {
            _classCallCheck(this, SvgIconComponent);

            this.element = element;
            this.differs = differs;
            this.renderer = renderer;
            this.iconReg = iconReg;
            this.cdr = cdr;
            this.stretch = false;
            this.applyClass = false;
            /** @deprecated since 9.1.0 */

            this.applyCss = false;
            this.helper = new SvgIconHelper();
            this._svgStyle = null;
          } // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)


          _createClass(SvgIconComponent, [{
            key: "svgStyle",
            set: function set(values) {
              this._svgStyle = values;

              if (!this.helper.differ && values) {
                this.helper.differ = this.differs.find(values).create();
              }
            }
          }, {
            key: "ngOnInit",
            value: function ngOnInit() {
              this.init();
            }
          }, {
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              this.destroy();
            }
          }, {
            key: "ngOnChanges",
            value: function ngOnChanges(changeRecord) {
              var elemSvg = this.element.nativeElement.firstChild;

              if (changeRecord.src || changeRecord.name) {
                if (this.helper.loaded) {
                  this.destroy();
                }

                this.init();
              }

              if (changeRecord.stretch) {
                this.stylize();
              }

              if (changeRecord.applyClass) {
                if (this.applyClass) {
                  this.setClass(elemSvg, null, this.klass);
                } else {
                  this.setClass(elemSvg, this.klass, null);
                }
              }

              if (changeRecord.svgClass) {
                this.setClass(elemSvg, changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);
              }

              if (changeRecord.klass) {
                var elem = this.element.nativeElement;
                this.setClass(elem, changeRecord.klass.previousValue, changeRecord.klass.currentValue);

                if (this.applyClass) {
                  this.setClass(elemSvg, changeRecord.klass.previousValue, changeRecord.klass.currentValue);
                } else {
                  this.setClass(elemSvg, changeRecord.klass.previousValue, null);
                }
              }

              if (changeRecord.viewBox) {
                if (this.helper.loaded) {
                  this.destroy();
                }

                this.init();
              }

              if (changeRecord.applyCss) {
                console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');
                console.warn('use applyClass instead');
              }

              if (changeRecord.svgAriaLabel) {
                this.doAria(changeRecord.svgAriaLabel.currentValue);
              }
            }
          }, {
            key: "ngDoCheck",
            value: function ngDoCheck() {
              if (this.helper.svg && this.helper.differ) {
                var changes = this.helper.differ.diff(this._svgStyle);

                if (changes) {
                  this.applyChanges(changes);
                }
              }
            }
          }, {
            key: "init",
            value: function init() {
              var _this3 = this;

              if (this.name) {
                var svgObs = this.iconReg.getSvgByName(this.name);

                if (svgObs) {
                  this.helper.icnSub = svgObs.subscribe(function (svg) {
                    return _this3.initSvg(svg);
                  });
                }
              } else if (this.src) {
                var _svgObs = this.iconReg.loadSvg(this.src);

                if (_svgObs) {
                  this.helper.icnSub = _svgObs.subscribe(function (svg) {
                    return _this3.initSvg(svg);
                  });
                }
              } else {
                var elem = this.element.nativeElement;
                elem.innerHTML = '';
                this.cdr.markForCheck();
              }
            }
          }, {
            key: "initSvg",
            value: function initSvg(svg) {
              if (!this.helper.loaded && svg) {
                this.setSvg(svg);
                this.resetDiffer();
              }
            }
          }, {
            key: "destroy",
            value: function destroy() {
              if (this.helper.icnSub) {
                this.helper.icnSub.unsubscribe();
              }

              this.helper = new SvgIconHelper();
            }
          }, {
            key: "resetDiffer",
            value: function resetDiffer() {
              if (this._svgStyle && !this.helper.differ) {
                this.helper.differ = this.differs.find(this._svgStyle).create();
              }
            }
          }, {
            key: "setSvg",
            value: function setSvg(svg) {
              if (!this.helper.loaded && svg) {
                this.helper.svg = svg;
                var icon = svg.cloneNode(true);
                var elem = this.element.nativeElement;
                elem.innerHTML = '';
                this.renderer.appendChild(elem, icon);
                this.helper.loaded = true;
                this.copyNgContentAttribute(elem, icon);

                if (this.klass && this.applyClass) {
                  this.setClass(elem.firstChild, null, this.klass);
                }

                if (this.svgClass) {
                  this.setClass(elem.firstChild, null, this.svgClass);
                }

                if (this.viewBox) {
                  if (this.viewBox === 'auto') {
                    // Attempt to convert height & width to a viewBox.
                    var w = icon.getAttribute('width');
                    var h = icon.getAttribute('height');

                    if (h && w) {
                      var vb = "0 0 ".concat(w, " ").concat(h);
                      this.renderer.setAttribute(icon, 'viewBox', vb);
                      this.renderer.removeAttribute(icon, 'width');
                      this.renderer.removeAttribute(icon, 'height');
                    }
                  } else if (this.viewBox !== '') {
                    this.renderer.setAttribute(icon, 'viewBox', this.viewBox);
                    this.renderer.removeAttribute(icon, 'width');
                    this.renderer.removeAttribute(icon, 'height');
                  }
                }

                this.stylize(); // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override
                // the SVG's aria-label.

                if (!(this.svgAriaLabel === undefined && elem.firstChild.hasAttribute('aria-label'))) {
                  this.doAria(this.svgAriaLabel || '');
                }

                this.cdr.markForCheck();
              }
            }
          }, {
            key: "copyNgContentAttribute",
            value: function copyNgContentAttribute(hostElem, icon) {
              var attributes = hostElem.attributes;
              var len = attributes.length;

              for (var i = 0; i < len; i += 1) {
                var attribute = attributes.item(i);

                if (attribute && attribute.name.startsWith('_ngcontent')) {
                  this.setNgContentAttribute(icon, attribute.name);
                  break;
                }
              }
            }
          }, {
            key: "setNgContentAttribute",
            value: function setNgContentAttribute(parent, attributeName) {
              this.renderer.setAttribute(parent, attributeName, '');
              var len = parent.childNodes.length;

              for (var i = 0; i < len; i += 1) {
                var child = parent.childNodes[i];

                if (child instanceof Element) {
                  this.setNgContentAttribute(child, attributeName);
                }
              }
            }
          }, {
            key: "stylize",
            value: function stylize() {
              if (this.helper.svg) {
                var svg = this.element.nativeElement.firstChild;

                if (this.stretch === true) {
                  this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
                } else if (this.stretch === false) {
                  this.renderer.removeAttribute(svg, 'preserveAspectRatio');
                }
              }
            }
          }, {
            key: "applyChanges",
            value: function applyChanges(changes) {
              var _this4 = this;

              changes.forEachRemovedItem(function (record) {
                return _this4.setStyle(record.key, null);
              });
              changes.forEachAddedItem(function (record) {
                return _this4.setStyle(record.key, record.currentValue);
              });
              changes.forEachChangedItem(function (record) {
                return _this4.setStyle(record.key, record.currentValue);
              });
            }
          }, {
            key: "setStyle",
            value: function setStyle(nameAndUnit, value) {
              var _nameAndUnit$split = nameAndUnit.split('.'),
                  _nameAndUnit$split2 = _slicedToArray(_nameAndUnit$split, 2),
                  name = _nameAndUnit$split2[0],
                  unit = _nameAndUnit$split2[1];

              value = value !== null && unit ? "".concat(value).concat(unit) : value;
              var svg = this.element.nativeElement.firstChild;

              if (value !== null) {
                this.renderer.setStyle(svg, name, value);
              } else {
                this.renderer.removeStyle(svg, name);
              }
            }
          }, {
            key: "setClass",
            value: function setClass(target, previous, current) {
              if (target) {
                if (previous) {
                  var klasses = Array.isArray(previous) ? previous : previous.split(' ');

                  var _iterator = _createForOfIteratorHelper(klasses),
                      _step;

                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      var k = _step.value;
                      this.renderer.removeClass(target, k);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                }

                if (current) {
                  var _klasses = Array.isArray(current) ? current : current.split(' ');

                  var _iterator2 = _createForOfIteratorHelper(_klasses),
                      _step2;

                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      var _k = _step2.value;
                      this.renderer.addClass(target, _k);
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                }
              }
            }
          }, {
            key: "doAria",
            value: function doAria(label) {
              var svg = this.element.nativeElement.firstChild;

              if (svg) {
                if (label === '') {
                  this.renderer.setAttribute(svg, 'aria-hidden', 'true');
                  this.renderer.removeAttribute(svg, 'aria-label');
                } else {
                  this.renderer.removeAttribute(svg, 'aria-hidden');
                  this.renderer.setAttribute(svg, 'aria-label', label);
                }
              }
            }
          }]);

          return SvgIconComponent;
        }();

        SvgIconComponent.ɵfac = function SvgIconComponent_Factory(t) {
          return new (t || SvgIconComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_SvgIconRegistryService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
        };

        SvgIconComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: SvgIconComponent,
          selectors: [["svg-icon"]],
          inputs: {
            stretch: "stretch",
            applyClass: "applyClass",
            applyCss: "applyCss",
            svgStyle: "svgStyle",
            src: "src",
            name: "name",
            svgClass: "svgClass",
            klass: ["class", "klass"],
            viewBox: "viewBox",
            svgAriaLabel: "svgAriaLabel"
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
          ngContentSelectors: _c0,
          decls: 1,
          vars: 0,
          template: function SvgIconComponent_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
            }
          },
          encapsulation: 2
        });
        return SvgIconComponent;
      }();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();

      var _AngularSvgIconModule = /*#__PURE__*/function () {
        var AngularSvgIconModule = /*#__PURE__*/function () {
          function AngularSvgIconModule() {
            _classCallCheck(this, AngularSvgIconModule);
          }

          _createClass(AngularSvgIconModule, null, [{
            key: "forRoot",
            value: function forRoot() {
              var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              return {
                ngModule: AngularSvgIconModule,
                providers: [_SVG_ICON_REGISTRY_PROVIDER, config.loader || {
                  provide: _SvgLoader,
                  useClass: _SvgHttpLoader
                }]
              };
            }
          }]);

          return AngularSvgIconModule;
        }();

        AngularSvgIconModule.ɵfac = function AngularSvgIconModule_Factory(t) {
          return new (t || AngularSvgIconModule)();
        };

        AngularSvgIconModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
          type: AngularSvgIconModule
        });
        AngularSvgIconModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
          imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]]
        });
        return AngularSvgIconModule;
      }();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_AngularSvgIconModule, {
          declarations: function declarations() {
            return [_SvgIconComponent];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule];
          },
          exports: function exports() {
            return [_SvgIconComponent];
          }
        });
      })();
      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    }
  }]);
})();
//# sourceMappingURL=node_modules_angular-svg-icon_fesm2015_angular-svg-icon_js-_85730-es5.1a3fc90ee712479098a2.js.map