{"version":3,"file":"node_modules_angular_common_fesm2015_http_js-_02b61-es2015.50b8fc060bb072d2ef35.js","mappings":"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A;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBlE,OAAjB,EAA0BkC,IAA1B,EAAgC;AAC5B,SAAO;AACHA,IAAAA,IADG;AAEHlG,IAAAA,OAAO,EAAEgE,OAAO,CAAChE,OAFd;AAGHuG,IAAAA,OAAO,EAAEvC,OAAO,CAACuC,OAHd;AAIH4B,IAAAA,OAAO,EAAEnE,OAAO,CAACmE,OAJd;AAKH7E,IAAAA,MAAM,EAAEU,OAAO,CAACV,MALb;AAMH6C,IAAAA,cAAc,EAAEnC,OAAO,CAACmC,cANrB;AAOHE,IAAAA,YAAY,EAAErC,OAAO,CAACqC,YAPnB;AAQHD,IAAAA,eAAe,EAAEpC,OAAO,CAACoC;AARtB,GAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMgC;AAAN,QAAMA,UAAN,CAAiB;AACbrI,IAAAA,WAAW,CAACsI,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,IAAAA,OAAO,CAACC,KAAD,EAAQxC,GAAR,EAAa/B,OAAO,GAAG,EAAvB,EAA2B;AAC9B,UAAIwE,GAAJ,CAD8B,CAE9B;;AACA,UAAID,KAAK,YAAYzC,WAArB,EAAkC;AAC9B;AACA;AACA0C,QAAAA,GAAG,GAAGD,KAAN;AACH,OAJD,MAKK;AACD;AACA;AACA;AACA;AACA,YAAIvI,OAAO,GAAGwC,SAAd;;AACA,YAAIwB,O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","sources":["./node_modules/@angular/common/fesm2015/http.js"],"sourcesContent":["/**\r\n * @license Angular v12.1.0\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\r\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const key = name.toLowerCase();\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            this.headers.get(key).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let values = headers[name];\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or overide for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n        // may start with the `?` char, so we strip it if it's present.\r\n        const params = rawParams.replace(/^\\?/, '').split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\nfunction valueToString(value) {\r\n    return `${value}`;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    constructor(options = {}) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const value = options.fromObject[key];\r\n                this.map.set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\r\n    appendAll(params) {\r\n        const updates = [];\r\n        Object.keys(params).forEach(param => {\r\n            const value = params[param];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(_value => {\r\n                    updates.push({ param, value: _value, op: 'a' });\r\n                });\r\n            }\r\n            else {\r\n                updates.push({ param, value: value, op: 'a' });\r\n            }\r\n        });\r\n        return this.clone(updates);\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter(param => param !== '')\r\n            .join('&');\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat(update);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(valueToString(update.value));\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(valueToString(update.value));\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContextToken {\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n}\r\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContext {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * Store a value in the context. If a value is already present it will be overwritten.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     * @param value The value to store.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    set(token, value) {\r\n        this.map.set(token, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\r\n    get(token) {\r\n        if (!this.map.has(token)) {\r\n            this.map.set(token, token.defaultValue());\r\n        }\r\n        return this.map.get(token);\r\n    }\r\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    delete(token) {\r\n        this.map.delete(token);\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\r\n    keys() {\r\n        return this.map.keys();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\r\nfunction isUrlSearchParams(value) {\r\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.context) {\r\n                this.context = options.context;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no context have been passed in, construct a new HttpContext instance.\r\n        if (!this.context) {\r\n            this.context = new HttpContext();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            typeof this.body === 'boolean') {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        var _a;\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Pass on context if needed\r\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            context,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        context: options.context,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                context: options.context,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\r\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\r\nclass HttpInterceptorHandler {\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\r\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\r\n        type: Injectable\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n        /**\r\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n         */\r\n        this.resolvedPromise = Promise.resolve();\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            let cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // We wrap it in an extra Promise, to ensure the microtask\r\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\r\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\r\n                this.resolvedPromise.then(() => {\r\n                    // Cleanup the page.\r\n                    cleanup();\r\n                    // Check whether the response callback has run.\r\n                    if (!finished) {\r\n                        // It hasn't, something went wrong with the request. Return an error via\r\n                        // the Observable error path. All JSONP errors have status 0.\r\n                        observer.error(new HttpErrorResponse({\r\n                            url,\r\n                            status: 0,\r\n                            statusText: 'JSONP Error',\r\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Success. body either contains the response body or null if none was\r\n                    // returned.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        status: 200 /* Ok */,\r\n                        statusText: 'OK',\r\n                        url,\r\n                    }));\r\n                    // Complete the stream, the response is over.\r\n                    observer.complete();\r\n                });\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n}\r\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param req The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(req);\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\r\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\r\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let body = null;\r\n                if (status !== 204 /* NoContent */) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 /* Ok */ : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = { error, text: body };\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const onError = (error) => {\r\n                const { url } = partialFromXhr();\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            xhr.addEventListener('timeout', onError);\r\n            xhr.addEventListener('abort', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('abort', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                xhr.removeEventListener('timeout', onError);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                if (xhr.readyState !== xhr.DONE) {\r\n                    xhr.abort();\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\r\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory$1 }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * @internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\r\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_COOKIE_NAME]\r\n            }] }]; }, null); })();\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    intercept(req, next) {\r\n        const lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        const token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\r\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_HEADER_NAME]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\r\nclass HttpInterceptingHandler {\r\n    constructor(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    handle(req) {\r\n        if (this.chain === null) {\r\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    }\r\n}\r\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\r\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\r\nHttpInterceptingHandler.ctorParameters = () => [\r\n    { type: HttpBackend },\r\n    { type: Injector }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\r\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\r\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\r\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpXsrfInterceptor,\r\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\r\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\r\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpClient,\r\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n        HttpXhrBackend,\r\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n    ], imports: [[\r\n            HttpClientXsrfModule.withOptions({\r\n                cookieName: 'XSRF-TOKEN',\r\n                headerName: 'X-XSRF-TOKEN'\r\n            }),\r\n        ]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                /**\r\n                 * Optional configuration for XSRF protection.\r\n                 */\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN'\r\n                    }),\r\n                ],\r\n                /**\r\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                 * with supporting services for HTTP communications.\r\n                 */\r\n                providers: [\r\n                    HttpClient,\r\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\r\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\r\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\r\nconst XhrFactory = XhrFactory$1;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\r\n\r\n"],"names":["DOCUMENT","XhrFactory","XhrFactory$1","ɵparseCookieValue","Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","ɵngcc0","ɵngcc1","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","v","encodeURIComponent","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","appendAll","_value","toString","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","_a","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","ngDevMode","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfCookieExtractor_Factory","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","ngJitMode","ɵɵsetNgModuleScope","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","ɵHttpInterceptingHandler","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵangular_packages_common_http_http_g"],"sourceRoot":"webpack:///"}