{"version":3,"mappings":"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","names":["_c0","SvgHttpLoader","SvgLoader","constructor","http","super","this","getSvg","url","get","responseType","ɵfac","t","ɵngcc0","ɵngcc1","ɵprov","token","factory","SERVER_URL","InjectionToken","SvgIconRegistryService","loader","platformId","serverUrl","_document","iconsByUrl","Map","iconsLoadingByUrl","document","addSvg","name","data","has","div","createElement","innerHTML","svg","querySelector","set","loadSvg","match","of","o","pipe","map","tap","catchError","err","console","error","throwError","finalize","delete","share","getSvgByName","unloadSvg","PLATFORM_ID","DOCUMENT","parentRegistry","SVG_ICON_REGISTRY_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","SVG_ICON_REGISTRY_PROVIDER_FACTORY","loaded","SvgIconComponent","element","differs","renderer","iconReg","cdr","stretch","applyClass","applyCss","helper","SvgIconHelper","_svgStyle","values","differ","find","create","ngOnInit","init","ngOnDestroy","destroy","ngOnChanges","changeRecord","elemSvg","nativeElement","firstChild","src","stylize","setClass","klass","svgClass","previousValue","currentValue","viewBox","warn","svgAriaLabel","doAria","ngDoCheck","changes","diff","applyChanges","svgObs","icnSub","subscribe","initSvg","markForCheck","setSvg","resetDiffer","unsubscribe","icon","cloneNode","elem","appendChild","copyNgContentAttribute","w","getAttribute","h","setAttribute","removeAttribute","undefined","hasAttribute","hostElem","attributes","len","length","i","attribute","item","startsWith","setNgContentAttribute","parent","attributeName","childNodes","child","Element","forEachRemovedItem","record","setStyle","key","forEachAddedItem","forEachChangedItem","nameAndUnit","value","unit","split","removeStyle","target","previous","current","klasses","Array","isArray","k","removeClass","addClass","label","ɵcmp","type","selectors","inputs","svgStyle","features","ngContentSelectors","decls","vars","template","rf","ctx","encapsulation","AngularSvgIconModule","forRoot","config","ngModule","providers","useClass","ɵmod","ɵinj","imports","CommonModule"],"sources":["webpack:///node_modules/angular-svg-icon/fesm2015/angular-svg-icon.js"],"sourcesContent":["import { Injectable, InjectionToken, Inject, PLATFORM_ID, Optional, SkipSelf, Component, ElementRef, KeyValueDiffers, Renderer2, ChangeDetectorRef, Input, NgModule } from '@angular/core';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { of, throwError } from 'rxjs';\r\nimport { map, tap, catchError, finalize, share } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common/http';\r\n\r\nconst _c0 = [\"*\"];\r\nclass SvgLoader {\r\n}\r\nclass SvgHttpLoader extends SvgLoader {\r\n    constructor(http) {\r\n        super();\r\n        this.http = http;\r\n    }\r\n    getSvg(url) {\r\n        return this.http.get(url, { responseType: 'text' });\r\n    }\r\n}\r\nSvgHttpLoader.ɵfac = function SvgHttpLoader_Factory(t) { return new (t || SvgHttpLoader)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };\r\nSvgHttpLoader.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SvgHttpLoader, factory: SvgHttpLoader.ɵfac });\r\nSvgHttpLoader.ctorParameters = () => [\r\n    { type: HttpClient }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgHttpLoader, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();\r\n\r\nconst SERVER_URL = new InjectionToken('SERVER_URL');\r\nclass SvgIconRegistryService {\r\n    constructor(loader, platformId, serverUrl, _document) {\r\n        this.loader = loader;\r\n        this.platformId = platformId;\r\n        this.serverUrl = serverUrl;\r\n        this._document = _document;\r\n        this.iconsByUrl = new Map();\r\n        this.iconsLoadingByUrl = new Map();\r\n        this.document = this._document;\r\n    }\r\n    /** Add a SVG to the registry by passing a name and the SVG. */\r\n    addSvg(name, data) {\r\n        if (!this.iconsByUrl.has(name)) {\r\n            const div = this.document.createElement('DIV');\r\n            div.innerHTML = data;\r\n            const svg = div.querySelector('svg');\r\n            this.iconsByUrl.set(name, svg);\r\n        }\r\n    }\r\n    /** Load a SVG to the registry from a URL. */\r\n    loadSvg(url, name = url) {\r\n        // not sure if there should be a possibility to use name for server usage\r\n        // so overriding it for now if provided\r\n        // maybe should separate functionality for url and name use-cases\r\n        if (this.serverUrl && url.match(/^(http(s)?):/) === null) {\r\n            url = this.serverUrl + url;\r\n            name = url;\r\n        }\r\n        if (this.iconsByUrl.has(name)) {\r\n            return of(this.iconsByUrl.get(name));\r\n        }\r\n        else if (this.iconsLoadingByUrl.has(name)) {\r\n            return this.iconsLoadingByUrl.get(name);\r\n        }\r\n        const o = this.loader.getSvg(url).pipe(map(svg => {\r\n            const div = this.document.createElement('DIV');\r\n            div.innerHTML = svg;\r\n            return div.querySelector('svg');\r\n        }), tap(svg => this.iconsByUrl.set(name, svg)), catchError(err => {\r\n            console.error(err);\r\n            return throwError(err);\r\n        }), finalize(() => this.iconsLoadingByUrl.delete(name)), share());\r\n        this.iconsLoadingByUrl.set(name, o);\r\n        return o;\r\n    }\r\n    /** Get loaded SVG from registry by name. (also works by url because of blended map) */\r\n    getSvgByName(name) {\r\n        if (this.iconsByUrl.has(name)) {\r\n            return of(this.iconsByUrl.get(name));\r\n        }\r\n        else if (this.iconsLoadingByUrl.has(name)) {\r\n            return this.iconsLoadingByUrl.get(name);\r\n        }\r\n        return throwError(`No svg with name '${name}' has been loaded`);\r\n    }\r\n    /** Remove a SVG from the registry by URL (or name). */\r\n    unloadSvg(url) {\r\n        if (this.iconsByUrl.has(url)) {\r\n            this.iconsByUrl.delete(url);\r\n        }\r\n    }\r\n}\r\nSvgIconRegistryService.ɵfac = function SvgIconRegistryService_Factory(t) { return new (t || SvgIconRegistryService)(ɵngcc0.ɵɵinject(SvgLoader), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(SERVER_URL, 8), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\r\nSvgIconRegistryService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SvgIconRegistryService, factory: SvgIconRegistryService.ɵfac });\r\nSvgIconRegistryService.ctorParameters = () => [\r\n    { type: SvgLoader },\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_URL,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgIconRegistryService, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: SvgLoader }, { type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [SERVER_URL]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\nfunction SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, loader, platformId, serverUrl, document) {\r\n    return parentRegistry || new SvgIconRegistryService(loader, platformId, serverUrl, document);\r\n}\r\nconst SVG_ICON_REGISTRY_PROVIDER = {\r\n    provide: SvgIconRegistryService,\r\n    deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService], SvgLoader, [PLATFORM_ID],\r\n        [new Optional(), SERVER_URL], [new Optional(), DOCUMENT]\r\n    ],\r\n    useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY\r\n};\r\n\r\nclass SvgIconHelper {\r\n    constructor() {\r\n        this.loaded = false;\r\n    }\r\n}\r\nclass SvgIconComponent {\r\n    constructor(element, differs, renderer, iconReg, cdr) {\r\n        this.element = element;\r\n        this.differs = differs;\r\n        this.renderer = renderer;\r\n        this.iconReg = iconReg;\r\n        this.cdr = cdr;\r\n        this.stretch = false;\r\n        this.applyClass = false;\r\n        /** @deprecated since 9.1.0 */\r\n        this.applyCss = false;\r\n        this.helper = new SvgIconHelper();\r\n        this._svgStyle = null;\r\n    }\r\n    // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)\r\n    set svgStyle(values) {\r\n        this._svgStyle = values;\r\n        if (!this.helper.differ && values) {\r\n            this.helper.differ = this.differs.find(values).create();\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n    ngOnChanges(changeRecord) {\r\n        const elemSvg = this.element.nativeElement.firstChild;\r\n        if (changeRecord.src || changeRecord.name) {\r\n            if (this.helper.loaded) {\r\n                this.destroy();\r\n            }\r\n            this.init();\r\n        }\r\n        if (changeRecord.stretch) {\r\n            this.stylize();\r\n        }\r\n        if (changeRecord.applyClass) {\r\n            if (this.applyClass) {\r\n                this.setClass(elemSvg, null, this.klass);\r\n            }\r\n            else {\r\n                this.setClass(elemSvg, this.klass, null);\r\n            }\r\n        }\r\n        if (changeRecord.svgClass) {\r\n            this.setClass(elemSvg, changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);\r\n        }\r\n        if (changeRecord.klass) {\r\n            const elem = this.element.nativeElement;\r\n            this.setClass(elem, changeRecord.klass.previousValue, changeRecord.klass.currentValue);\r\n            if (this.applyClass) {\r\n                this.setClass(elemSvg, changeRecord.klass.previousValue, changeRecord.klass.currentValue);\r\n            }\r\n            else {\r\n                this.setClass(elemSvg, changeRecord.klass.previousValue, null);\r\n            }\r\n        }\r\n        if (changeRecord.viewBox) {\r\n            if (this.helper.loaded) {\r\n                this.destroy();\r\n            }\r\n            this.init();\r\n        }\r\n        if (changeRecord.applyCss) {\r\n            console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');\r\n            console.warn('use applyClass instead');\r\n        }\r\n        if (changeRecord.svgAriaLabel) {\r\n            this.doAria(changeRecord.svgAriaLabel.currentValue);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        if (this.helper.svg && this.helper.differ) {\r\n            const changes = this.helper.differ.diff(this._svgStyle);\r\n            if (changes) {\r\n                this.applyChanges(changes);\r\n            }\r\n        }\r\n    }\r\n    init() {\r\n        if (this.name) {\r\n            const svgObs = this.iconReg.getSvgByName(this.name);\r\n            if (svgObs) {\r\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\r\n            }\r\n        }\r\n        else if (this.src) {\r\n            const svgObs = this.iconReg.loadSvg(this.src);\r\n            if (svgObs) {\r\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\r\n            }\r\n        }\r\n        else {\r\n            const elem = this.element.nativeElement;\r\n            elem.innerHTML = '';\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n    initSvg(svg) {\r\n        if (!this.helper.loaded && svg) {\r\n            this.setSvg(svg);\r\n            this.resetDiffer();\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.helper.icnSub) {\r\n            this.helper.icnSub.unsubscribe();\r\n        }\r\n        this.helper = new SvgIconHelper();\r\n    }\r\n    resetDiffer() {\r\n        if (this._svgStyle && !this.helper.differ) {\r\n            this.helper.differ = this.differs.find(this._svgStyle).create();\r\n        }\r\n    }\r\n    setSvg(svg) {\r\n        if (!this.helper.loaded && svg) {\r\n            this.helper.svg = svg;\r\n            const icon = svg.cloneNode(true);\r\n            const elem = this.element.nativeElement;\r\n            elem.innerHTML = '';\r\n            this.renderer.appendChild(elem, icon);\r\n            this.helper.loaded = true;\r\n            this.copyNgContentAttribute(elem, icon);\r\n            if (this.klass && this.applyClass) {\r\n                this.setClass(elem.firstChild, null, this.klass);\r\n            }\r\n            if (this.svgClass) {\r\n                this.setClass(elem.firstChild, null, this.svgClass);\r\n            }\r\n            if (this.viewBox) {\r\n                if (this.viewBox === 'auto') {\r\n                    // Attempt to convert height & width to a viewBox.\r\n                    const w = icon.getAttribute('width');\r\n                    const h = icon.getAttribute('height');\r\n                    if (h && w) {\r\n                        const vb = `0 0 ${w} ${h}`;\r\n                        this.renderer.setAttribute(icon, 'viewBox', vb);\r\n                        this.renderer.removeAttribute(icon, 'width');\r\n                        this.renderer.removeAttribute(icon, 'height');\r\n                    }\r\n                }\r\n                else if (this.viewBox !== '') {\r\n                    this.renderer.setAttribute(icon, 'viewBox', this.viewBox);\r\n                    this.renderer.removeAttribute(icon, 'width');\r\n                    this.renderer.removeAttribute(icon, 'height');\r\n                }\r\n            }\r\n            this.stylize();\r\n            // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override\r\n            // the SVG's aria-label.\r\n            if (!(this.svgAriaLabel === undefined && elem.firstChild.hasAttribute('aria-label'))) {\r\n                this.doAria(this.svgAriaLabel || '');\r\n            }\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n    copyNgContentAttribute(hostElem, icon) {\r\n        const attributes = hostElem.attributes;\r\n        const len = attributes.length;\r\n        for (let i = 0; i < len; i += 1) {\r\n            const attribute = attributes.item(i);\r\n            if (attribute && attribute.name.startsWith('_ngcontent')) {\r\n                this.setNgContentAttribute(icon, attribute.name);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    setNgContentAttribute(parent, attributeName) {\r\n        this.renderer.setAttribute(parent, attributeName, '');\r\n        const len = parent.childNodes.length;\r\n        for (let i = 0; i < len; i += 1) {\r\n            const child = parent.childNodes[i];\r\n            if (child instanceof Element) {\r\n                this.setNgContentAttribute(child, attributeName);\r\n            }\r\n        }\r\n    }\r\n    stylize() {\r\n        if (this.helper.svg) {\r\n            const svg = this.element.nativeElement.firstChild;\r\n            if (this.stretch === true) {\r\n                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');\r\n            }\r\n            else if (this.stretch === false) {\r\n                this.renderer.removeAttribute(svg, 'preserveAspectRatio');\r\n            }\r\n        }\r\n    }\r\n    applyChanges(changes) {\r\n        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));\r\n        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));\r\n        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));\r\n    }\r\n    setStyle(nameAndUnit, value) {\r\n        const [name, unit] = nameAndUnit.split('.');\r\n        value = value !== null && unit ? `${value}${unit}` : value;\r\n        const svg = this.element.nativeElement.firstChild;\r\n        if (value !== null) {\r\n            this.renderer.setStyle(svg, name, value);\r\n        }\r\n        else {\r\n            this.renderer.removeStyle(svg, name);\r\n        }\r\n    }\r\n    setClass(target, previous, current) {\r\n        if (target) {\r\n            if (previous) {\r\n                const klasses = Array.isArray(previous) ? previous : previous.split(' ');\r\n                for (const k of klasses) {\r\n                    this.renderer.removeClass(target, k);\r\n                }\r\n            }\r\n            if (current) {\r\n                const klasses = Array.isArray(current) ? current : current.split(' ');\r\n                for (const k of klasses) {\r\n                    this.renderer.addClass(target, k);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    doAria(label) {\r\n        const svg = this.element.nativeElement.firstChild;\r\n        if (svg) {\r\n            if (label === '') {\r\n                this.renderer.setAttribute(svg, 'aria-hidden', 'true');\r\n                this.renderer.removeAttribute(svg, 'aria-label');\r\n            }\r\n            else {\r\n                this.renderer.removeAttribute(svg, 'aria-hidden');\r\n                this.renderer.setAttribute(svg, 'aria-label', label);\r\n            }\r\n        }\r\n    }\r\n}\r\nSvgIconComponent.ɵfac = function SvgIconComponent_Factory(t) { return new (t || SvgIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SvgIconRegistryService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\nSvgIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SvgIconComponent, selectors: [[\"svg-icon\"]], inputs: { stretch: \"stretch\", applyClass: \"applyClass\", applyCss: \"applyCss\", svgStyle: \"svgStyle\", src: \"src\", name: \"name\", svgClass: \"svgClass\", klass: [\"class\", \"klass\"], viewBox: \"viewBox\", svgAriaLabel: \"svgAriaLabel\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function SvgIconComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\nSvgIconComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: KeyValueDiffers },\r\n    { type: Renderer2 },\r\n    { type: SvgIconRegistryService },\r\n    { type: ChangeDetectorRef }\r\n];\r\nSvgIconComponent.propDecorators = {\r\n    src: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    stretch: [{ type: Input }],\r\n    applyClass: [{ type: Input }],\r\n    applyCss: [{ type: Input }],\r\n    svgClass: [{ type: Input }],\r\n    klass: [{ type: Input, args: ['class',] }],\r\n    viewBox: [{ type: Input }],\r\n    svgAriaLabel: [{ type: Input }],\r\n    svgStyle: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgIconComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'svg-icon',\r\n                template: '<ng-content></ng-content>'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }, { type: ɵngcc0.Renderer2 }, { type: SvgIconRegistryService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { stretch: [{\r\n            type: Input\r\n        }], applyClass: [{\r\n            type: Input\r\n        }], applyCss: [{\r\n            type: Input\r\n        }], svgStyle: [{\r\n            type: Input\r\n        }], src: [{\r\n            type: Input\r\n        }], name: [{\r\n            type: Input\r\n        }], svgClass: [{\r\n            type: Input\r\n        }], klass: [{\r\n            type: Input,\r\n            args: ['class']\r\n        }], viewBox: [{\r\n            type: Input\r\n        }], svgAriaLabel: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\nclass AngularSvgIconModule {\r\n    static forRoot(config = {}) {\r\n        return {\r\n            ngModule: AngularSvgIconModule,\r\n            providers: [\r\n                SVG_ICON_REGISTRY_PROVIDER,\r\n                config.loader || { provide: SvgLoader, useClass: SvgHttpLoader }\r\n            ]\r\n        };\r\n    }\r\n}\r\nAngularSvgIconModule.ɵfac = function AngularSvgIconModule_Factory(t) { return new (t || AngularSvgIconModule)(); };\r\nAngularSvgIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AngularSvgIconModule });\r\nAngularSvgIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\r\n            CommonModule,\r\n        ]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularSvgIconModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                ],\r\n                declarations: [\r\n                    SvgIconComponent\r\n                ],\r\n                exports: [SvgIconComponent]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularSvgIconModule, { declarations: function () { return [SvgIconComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SvgIconComponent]; } }); })();\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AngularSvgIconModule, SERVER_URL, SVG_ICON_REGISTRY_PROVIDER, SVG_ICON_REGISTRY_PROVIDER_FACTORY, SvgHttpLoader, SvgIconComponent, SvgIconRegistryService, SvgLoader };\r\n\r\n"]}