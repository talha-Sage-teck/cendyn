{"version":3,"mappings":"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AhG;AACH;;AACD,kBAAKQ,KAAL,GAAa1G,IAAI,CAAC0G,KAAL1G,IAAc,IAA3B;AAjBc;AAkBjB;;;QAnB2B8F;AAsBhC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAASa,OAAT,CAAiBlE,OAAjB,EAA0BkC,IAA1B,EAAgC;AAC5B,eAAO;AACHA,cADG,EACHA,IADG;AAEHpG,iBAAO,EAAEkE,OAAO,CAAClE,OAFd;AAGHyG,iBAAO,EAAEvC,OAAO,CAACuC,OAHd;AAIH4B,iBAAO,EAAEnE,OAAO,CAACmE,OAJd;AAKH7E,gBAAM,EAAEU,OAAO,CAACV,MALb;AAMH6C,wBAAc,EAAEnC,OAAO,CAACmC,cANrB;AAOHE,sBAAY,EAAErC,OAAO,CAACqC,YAPnB;AAQHD,yBAAe,EAAEpC,OAAO,CAACoC;AARtB,SAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACMgC;AAAAA;AACFvI,8BAAYwI,OAAZxI,EAAqB;AAAA;;AACjB,iBAAKwI,OAAL,GAAeA,OAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7BMD;AAAAA;AAAAA,mBA8BFE,iBAAQC,KAARD,EAAevC,GAAfuC,EAAkC;AAAA;;AAAA,kBAAdtE,OAAc,uEAAJ,EAAI;AAC9B,kBAAIwE,GAAJ,CAD8B,CAE9B;;AACA,kBAAID,KAAK,YAAYzC,YAArB,EAAkC;AAC9B;AACA;AACA0C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","names":["HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","map","params","replace","param","eqIdx","val","list","v","encodeURIComponent","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","appendAll","_value","toString","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","_a","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","t","ɵngcc0","ɵprov","factory","ngDevMode","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","DOCUMENT","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","ɵngcc1","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","HttpXsrfCookieExtractor_Factory","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","HttpClientXsrfModule_Factory","ɵmod","ɵinj","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","withOptions","ngJitMode","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","XhrFactory","XhrFactory$1"],"sources":["webpack:///node_modules/@angular/common/fesm2015/http.js"],"sourcesContent":["/**\r\n * @license Angular v12.1.0\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\r\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const key = name.toLowerCase();\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            this.headers.get(key).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let values = headers[name];\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or overide for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n        // may start with the `?` char, so we strip it if it's present.\r\n        const params = rawParams.replace(/^\\?/, '').split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\nfunction valueToString(value) {\r\n    return `${value}`;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    constructor(options = {}) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const value = options.fromObject[key];\r\n                this.map.set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\r\n    appendAll(params) {\r\n        const updates = [];\r\n        Object.keys(params).forEach(param => {\r\n            const value = params[param];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(_value => {\r\n                    updates.push({ param, value: _value, op: 'a' });\r\n                });\r\n            }\r\n            else {\r\n                updates.push({ param, value: value, op: 'a' });\r\n            }\r\n        });\r\n        return this.clone(updates);\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter(param => param !== '')\r\n            .join('&');\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat(update);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(valueToString(update.value));\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(valueToString(update.value));\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContextToken {\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n}\r\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContext {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * Store a value in the context. If a value is already present it will be overwritten.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     * @param value The value to store.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    set(token, value) {\r\n        this.map.set(token, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\r\n    get(token) {\r\n        if (!this.map.has(token)) {\r\n            this.map.set(token, token.defaultValue());\r\n        }\r\n        return this.map.get(token);\r\n    }\r\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    delete(token) {\r\n        this.map.delete(token);\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\r\n    keys() {\r\n        return this.map.keys();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\r\nfunction isUrlSearchParams(value) {\r\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.context) {\r\n                this.context = options.context;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no context have been passed in, construct a new HttpContext instance.\r\n        if (!this.context) {\r\n            this.context = new HttpContext();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            typeof this.body === 'boolean') {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        var _a;\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Pass on context if needed\r\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            context,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        context: options.context,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                context: options.context,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\r\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\r\nclass HttpInterceptorHandler {\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\r\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\r\n        type: Injectable\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n        /**\r\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n         */\r\n        this.resolvedPromise = Promise.resolve();\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            let cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // We wrap it in an extra Promise, to ensure the microtask\r\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\r\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\r\n                this.resolvedPromise.then(() => {\r\n                    // Cleanup the page.\r\n                    cleanup();\r\n                    // Check whether the response callback has run.\r\n                    if (!finished) {\r\n                        // It hasn't, something went wrong with the request. Return an error via\r\n                        // the Observable error path. All JSONP errors have status 0.\r\n                        observer.error(new HttpErrorResponse({\r\n                            url,\r\n                            status: 0,\r\n                            statusText: 'JSONP Error',\r\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Success. body either contains the response body or null if none was\r\n                    // returned.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        status: 200 /* Ok */,\r\n                        statusText: 'OK',\r\n                        url,\r\n                    }));\r\n                    // Complete the stream, the response is over.\r\n                    observer.complete();\r\n                });\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n}\r\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param req The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(req);\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\r\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\r\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let body = null;\r\n                if (status !== 204 /* NoContent */) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 /* Ok */ : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = { error, text: body };\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const onError = (error) => {\r\n                const { url } = partialFromXhr();\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            xhr.addEventListener('timeout', onError);\r\n            xhr.addEventListener('abort', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('abort', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                xhr.removeEventListener('timeout', onError);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                if (xhr.readyState !== xhr.DONE) {\r\n                    xhr.abort();\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\r\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory$1 }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * @internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\r\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_COOKIE_NAME]\r\n            }] }]; }, null); })();\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    intercept(req, next) {\r\n        const lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        const token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\r\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_HEADER_NAME]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\r\nclass HttpInterceptingHandler {\r\n    constructor(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    handle(req) {\r\n        if (this.chain === null) {\r\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    }\r\n}\r\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\r\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\r\nHttpInterceptingHandler.ctorParameters = () => [\r\n    { type: HttpBackend },\r\n    { type: Injector }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\r\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\r\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\r\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpXsrfInterceptor,\r\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\r\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\r\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpClient,\r\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n        HttpXhrBackend,\r\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n    ], imports: [[\r\n            HttpClientXsrfModule.withOptions({\r\n                cookieName: 'XSRF-TOKEN',\r\n                headerName: 'X-XSRF-TOKEN'\r\n            }),\r\n        ]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                /**\r\n                 * Optional configuration for XSRF protection.\r\n                 */\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN'\r\n                    }),\r\n                ],\r\n                /**\r\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                 * with supporting services for HTTP communications.\r\n                 */\r\n                providers: [\r\n                    HttpClient,\r\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\r\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\r\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\r\nconst XhrFactory = XhrFactory$1;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\r\n\r\n"]}