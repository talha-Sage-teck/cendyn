{"version":3,"mappings":"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","names":["_c0","_c1","rf","ctx","ɵngcc0","ctx_r0","justify","headerText","data_r2","$implicit","ctx_r1","dataAccessor","name","base","constructor","args","super","_sticky","this","_hasStickyChanged","set","v","prevValue","coerceBooleanProperty","hasStickyChanged","resetStickyChanged","_class","n","CDK_TABLE","InjectionToken","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","t","ɵdir","type","selectors","CdkHeaderCellDef","CdkFooterCellDef","_CdkColumnDefBase","mixinHasStickyInput","CdkColumnDef","_table","_stickyEnd","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","value","replace","contentQueries","dirIndex","_t","cell","first","headerCell","footerCell","inputs","sticky","stickyEnd","features","provide","useExisting","T","columnDef","elementRef","classList","nativeElement","className","_step","add","CdkHeaderCell","BaseCdkCell","hostAttrs","CdkFooterCell","CdkCell","B","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","Subject","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","ngOnDestroy","next","complete","_Schedule","_getScheduleObservable","pipe","takeUntil","subscribe","length","_step2","_step3","isStable","from","Promise","resolve","onStable","take","ɵprov","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","_CdkHeaderRowDefBase","_CdkFooterRowDefBase","CdkRowDef","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","ɵcmp","decls","vars","consts","directives","encapsulation","CdkFooterRow","CdkRow","CdkNoDataRow","templateRef","STICKY_DIRECTIONS","ne","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_positionListener","_isBrowser","_needsPositionStickyOnElement","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","_step4","nodeType","ELEMENT_NODE","i","children","_scheduleStyleChanges","element","_step5","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","arguments","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","_step6","isRtl","start","end","_iterator6","_addStickyStyle","stickyColumnsUpdated","sizes","slice","map","width","index","stickyEndColumnsUpdated","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_a","_b","_step7","offset","isBorderedRowIndex","_iterator7","stickyHeaderRowsUpdated","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","_step8","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","_step9","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CDK_TABLE_TEMPLATE","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_viewRepeater","_stickyPositioningListener","_viewportRuler","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","viewChange","BehaviorSubject","Number","MAX_VALUE","setAttribute","nodeName","trackBy","_trackByFn","fn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","data","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","columnsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_rowDefs","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","forEachOperation","prevIndex","previousIndex","renderRow","_renderRow","view","get","move","_updateRowIndexContext","forEachIdentityChange","_updateNoDataRow","addColumnDef","removeColumnDef","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","_headerRowDefs","def","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","_footerRowDefs","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","WeakMap","j","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","_defaultRowDef","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","multiTemplateDataRows","outlet","createEmbeddedView","_getCellTemplates","cellTemplate","_step10","markForCheck","renderIndex","count","last","even","odd","columnId","documentFragment","createDocumentFragment","tag","outlets","section","createElement","_step11","appendChild","stickyCheckReducer","d","StickyStyler","isBrowser","items","_noDataRow","shouldShow","container","ɵngcc1","DOCUMENT","ɵngcc2","_VIEW_REPEATER_STRATEGY","ɵngcc3","viewQuery","hostVars","hostBindings","fixedLayout","exportAs","useClass","_DisposeViewRepeaterStrategy","useValue","ngContentSelectors","styles","array","concat","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","CdkTextColumn_th_1_Template","CdkTextColumn_td_2_Template","CdkTableModule","ɵmod","ɵinj","imports","ScrollingModule"],"sources":["webpack:///node_modules/@angular/cdk/fesm2015/table.js"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { isDataSource, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/bidi';\r\nimport * as ɵngcc2 from '@angular/cdk/platform';\r\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\r\n\r\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\r\nconst _c1 = [\"caption\", \"colgroup, col\"];\r\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\r\n} }\r\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const data_r2 = ctx.$implicit;\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\r\n} }\r\nexport { DataSource } from '@angular/cdk/collections';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\r\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\r\nimport { takeUntil, take } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nfunction mixinHasStickyInput(base) {\r\n    return class extends base {\r\n        constructor(...args) {\r\n            super(...args);\r\n            this._sticky = false;\r\n            /** Whether the sticky input has changed since it was last checked. */\r\n            this._hasStickyChanged = false;\r\n        }\r\n        /** Whether sticky positioning should be applied. */\r\n        get sticky() { return this._sticky; }\r\n        set sticky(v) {\r\n            const prevValue = this._sticky;\r\n            this._sticky = coerceBooleanProperty(v);\r\n            this._hasStickyChanged = prevValue !== this._sticky;\r\n        }\r\n        /** Whether the sticky value has changed since this was last called. */\r\n        hasStickyChanged() {\r\n            const hasStickyChanged = this._hasStickyChanged;\r\n            this._hasStickyChanged = false;\r\n            return hasStickyChanged;\r\n        }\r\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n        resetStickyChanged() {\r\n            this._hasStickyChanged = false;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used to provide a table to some of the sub-components without causing a circular dependency.\r\n * @docs-private\r\n */\r\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\r\n/** Injection token that can be used to specify the text column options. */\r\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\nclass CdkCellDef {\r\n    constructor(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n}\r\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\r\nCdkCellDef.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkCellDef]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\nclass CdkHeaderCellDef {\r\n    constructor(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n}\r\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\r\nCdkHeaderCellDef.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkHeaderCellDef]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\nclass CdkFooterCellDef {\r\n    constructor(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n}\r\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\r\nCdkFooterCellDef.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkFooterCellDef]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nclass CdkColumnDefBase {\r\n}\r\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\nclass CdkColumnDef extends _CdkColumnDefBase {\r\n    constructor(_table) {\r\n        super();\r\n        this._table = _table;\r\n        this._stickyEnd = false;\r\n    }\r\n    /** Unique name for this column. */\r\n    get name() { return this._name; }\r\n    set name(name) { this._setNameInput(name); }\r\n    /**\r\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n     * has been changed.\r\n     */\r\n    get stickyEnd() {\r\n        return this._stickyEnd;\r\n    }\r\n    set stickyEnd(v) {\r\n        const prevValue = this._stickyEnd;\r\n        this._stickyEnd = coerceBooleanProperty(v);\r\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n    }\r\n    /**\r\n     * Overridable method that sets the css classes that will be added to every cell in this\r\n     * column.\r\n     * In the future, columnCssClassName will change from type string[] to string and this\r\n     * will set a single string value.\r\n     * @docs-private\r\n     */\r\n    _updateColumnCssClassName() {\r\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\r\n    }\r\n    /**\r\n     * This has been extracted to a util because of TS 4 and VE.\r\n     * View Engine doesn't support property rename inheritance.\r\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\r\n     * @docs-private\r\n     */\r\n    _setNameInput(value) {\r\n        // If the directive is set without a name (updated programmatically), then this setter will\r\n        // trigger with an empty string and should not overwrite the programmatically set value.\r\n        if (value) {\r\n            this._name = value;\r\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\r\n            this._updateColumnCssClassName();\r\n        }\r\n    }\r\n}\r\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\r\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkColumnDef.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\nCdkColumnDef.propDecorators = {\r\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\r\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\r\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\r\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\r\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkColumnDef]',\r\n                inputs: ['sticky'],\r\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, { name: [{\r\n            type: Input,\r\n            args: ['cdkColumnDef']\r\n        }], stickyEnd: [{\r\n            type: Input,\r\n            args: ['stickyEnd']\r\n        }], cell: [{\r\n            type: ContentChild,\r\n            args: [CdkCellDef]\r\n        }], headerCell: [{\r\n            type: ContentChild,\r\n            args: [CdkHeaderCellDef]\r\n        }], footerCell: [{\r\n            type: ContentChild,\r\n            args: [CdkFooterCellDef]\r\n        }] }); })();\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nclass BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\r\n        // with destructuring.\r\n        const classList = elementRef.nativeElement.classList;\r\n        for (const className of columnDef._columnCssClassName) {\r\n            classList.add(className);\r\n        }\r\n    }\r\n}\r\n/** Header cell template container that adds the right classes and role. */\r\nclass CdkHeaderCell extends BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        super(columnDef, elementRef);\r\n    }\r\n}\r\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkHeaderCell.ctorParameters = () => [\r\n    { type: CdkColumnDef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n                host: {\r\n                    'class': 'cdk-header-cell',\r\n                    'role': 'columnheader'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/** Footer cell template container that adds the right classes and role. */\r\nclass CdkFooterCell extends BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        super(columnDef, elementRef);\r\n    }\r\n}\r\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkFooterCell.ctorParameters = () => [\r\n    { type: CdkColumnDef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n                host: {\r\n                    'class': 'cdk-footer-cell',\r\n                    'role': 'gridcell'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/** Cell template container that adds the right classes and role. */\r\nclass CdkCell extends BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        super(columnDef, elementRef);\r\n    }\r\n}\r\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkCell.ctorParameters = () => [\r\n    { type: CdkColumnDef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-cell, td[cdk-cell]',\r\n                host: {\r\n                    'class': 'cdk-cell',\r\n                    'role': 'gridcell'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @docs-private\r\n */\r\nclass _Schedule {\r\n    constructor() {\r\n        this.tasks = [];\r\n        this.endTasks = [];\r\n    }\r\n}\r\n/** Injection token used to provide a coalesced style scheduler. */\r\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\r\n/**\r\n * Allows grouping up CSSDom mutations after the current execution context.\r\n * This can significantly improve performance when separate consecutive functions are\r\n * reading from the CSSDom and then mutating it.\r\n *\r\n * @docs-private\r\n */\r\nclass _CoalescedStyleScheduler {\r\n    constructor(_ngZone) {\r\n        this._ngZone = _ngZone;\r\n        this._currentSchedule = null;\r\n        this._destroyed = new Subject();\r\n    }\r\n    /**\r\n     * Schedules the specified task to run at the end of the current VM turn.\r\n     */\r\n    schedule(task) {\r\n        this._createScheduleIfNeeded();\r\n        this._currentSchedule.tasks.push(task);\r\n    }\r\n    /**\r\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\r\n     * VM turn.\r\n     */\r\n    scheduleEnd(task) {\r\n        this._createScheduleIfNeeded();\r\n        this._currentSchedule.endTasks.push(task);\r\n    }\r\n    /** Prevent any further tasks from running. */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    _createScheduleIfNeeded() {\r\n        if (this._currentSchedule) {\r\n            return;\r\n        }\r\n        this._currentSchedule = new _Schedule();\r\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\r\n                const schedule = this._currentSchedule;\r\n                // Capture new tasks scheduled by the current set of tasks.\r\n                this._currentSchedule = new _Schedule();\r\n                for (const task of schedule.tasks) {\r\n                    task();\r\n                }\r\n                for (const task of schedule.endTasks) {\r\n                    task();\r\n                }\r\n            }\r\n            this._currentSchedule = null;\r\n        });\r\n    }\r\n    _getScheduleObservable() {\r\n        // Use onStable when in the context of an ongoing change detection cycle so that we\r\n        // do not accidentally trigger additional cycles.\r\n        return this._ngZone.isStable ?\r\n            from(Promise.resolve(undefined)) :\r\n            this._ngZone.onStable.pipe(take(1));\r\n    }\r\n}\r\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\r\n_CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\r\n_CoalescedStyleScheduler.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nclass BaseRowDef {\r\n    constructor(\r\n    /** @docs-private */ template, _differs) {\r\n        this.template = template;\r\n        this._differs = _differs;\r\n    }\r\n    ngOnChanges(changes) {\r\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n        // of the columns property or an empty array if none is provided.\r\n        if (!this._columnsDiffer) {\r\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n            this._columnsDiffer = this._differs.find(columns).create();\r\n            this._columnsDiffer.diff(columns);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the difference between the current columns and the columns from the last diff, or null\r\n     * if there is no difference.\r\n     */\r\n    getColumnsDiff() {\r\n        return this._columnsDiffer.diff(this.columns);\r\n    }\r\n    /** Gets this row def's relevant cell template from the provided column def. */\r\n    extractCellTemplate(column) {\r\n        if (this instanceof CdkHeaderRowDef) {\r\n            return column.headerCell.template;\r\n        }\r\n        if (this instanceof CdkFooterRowDef) {\r\n            return column.footerCell.template;\r\n        }\r\n        else {\r\n            return column.cell.template;\r\n        }\r\n    }\r\n}\r\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\r\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nBaseRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nclass CdkHeaderRowDefBase extends BaseRowDef {\r\n}\r\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\r\n    constructor(template, _differs, _table) {\r\n        super(template, _differs);\r\n        this._table = _table;\r\n    }\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n}\r\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkHeaderRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkHeaderRowDef]',\r\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, null); })();\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nclass CdkFooterRowDefBase extends BaseRowDef {\r\n}\r\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\r\n    constructor(template, _differs, _table) {\r\n        super(template, _differs);\r\n        this._table = _table;\r\n    }\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n}\r\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkFooterRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkFooterRowDef]',\r\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, null); })();\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\nclass CdkRowDef extends BaseRowDef {\r\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n    //   if this template should be used.\r\n    constructor(template, _differs, _table) {\r\n        super(template, _differs);\r\n        this._table = _table;\r\n    }\r\n}\r\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkRowDef]',\r\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, null); })();\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\nclass CdkCellOutlet {\r\n    constructor(_viewContainer) {\r\n        this._viewContainer = _viewContainer;\r\n        CdkCellOutlet.mostRecentCellOutlet = this;\r\n    }\r\n    ngOnDestroy() {\r\n        // If this was the last outlet being rendered in the view, remove the reference\r\n        // from the static property after it has been destroyed to avoid leaking memory.\r\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n            CdkCellOutlet.mostRecentCellOutlet = null;\r\n        }\r\n    }\r\n}\r\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\r\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\r\n/**\r\n * Static property containing the latest constructed instance of this class.\r\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n * createEmbeddedView. After one of these components are created, this property will provide\r\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n * construct the cells with the provided context.\r\n */\r\nCdkCellOutlet.mostRecentCellOutlet = null;\r\nCdkCellOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkCellOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\nclass CdkHeaderRow {\r\n}\r\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\r\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainer(0, 0);\r\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-header-row, tr[cdk-header-row]',\r\n                template: CDK_ROW_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-header-row',\r\n                    'role': 'row'\r\n                },\r\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], null, null); })();\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\nclass CdkFooterRow {\r\n}\r\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\r\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainer(0, 0);\r\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n                template: CDK_ROW_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-footer-row',\r\n                    'role': 'row'\r\n                },\r\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], null, null); })();\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\nclass CdkRow {\r\n}\r\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\r\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainer(0, 0);\r\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-row, tr[cdk-row]',\r\n                template: CDK_ROW_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-row',\r\n                    'role': 'row'\r\n                },\r\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], null, null); })();\r\n/** Row that can be used to display a message when no data is shown in the table. */\r\nclass CdkNoDataRow {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\r\nCdkNoDataRow.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'ng-template[cdkNoDataRow]'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * @docs-private\r\n */\r\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * @docs-private\r\n */\r\nclass StickyStyler {\r\n    /**\r\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\r\n     *     that uses the native `<table>` element.\r\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\r\n     *     sticky positioning applied.\r\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n     *     by reversing left/right positions.\r\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\r\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\r\n     *     using inline styles. If false, it is assumed that position: sticky is included in\r\n     *     the component stylesheet for _stickCellCss.\r\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\r\n     *     and their dimensions.\r\n     */\r\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, \r\n    /**\r\n     * @deprecated `_coalescedStyleScheduler` parameter to become required.\r\n     * @breaking-change 11.0.0\r\n     */\r\n    _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\r\n        this._isNativeHtmlTable = _isNativeHtmlTable;\r\n        this._stickCellCss = _stickCellCss;\r\n        this.direction = direction;\r\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\r\n        this._isBrowser = _isBrowser;\r\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\r\n        this._positionListener = _positionListener;\r\n        this._cachedCellWidths = [];\r\n        this._borderCellCss = {\r\n            'top': `${_stickCellCss}-border-elem-top`,\r\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\r\n            'left': `${_stickCellCss}-border-elem-left`,\r\n            'right': `${_stickCellCss}-border-elem-right`,\r\n        };\r\n    }\r\n    /**\r\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n     */\r\n    clearStickyPositioning(rows, stickyDirections) {\r\n        const elementsToClear = [];\r\n        for (const row of rows) {\r\n            // If the row isn't an element (e.g. if it's an `ng-container`),\r\n            // it won't have inline styles or `children` so we skip it.\r\n            if (row.nodeType !== row.ELEMENT_NODE) {\r\n                continue;\r\n            }\r\n            elementsToClear.push(row);\r\n            for (let i = 0; i < row.children.length; i++) {\r\n                elementsToClear.push(row.children[i]);\r\n            }\r\n        }\r\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            for (const element of elementsToClear) {\r\n                this._removeStickyStyle(element, stickyDirections);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Applies sticky left and right positions to the cells of each row according to the sticky\r\n     * states of the rendered column definitions.\r\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the start of the row.\r\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the end of the row.\r\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\r\n     *     column cell. If `false` cached widths will be used instead.\r\n     */\r\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\r\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\r\n            stickyEndStates.some(state => state))) {\r\n            if (this._positionListener) {\r\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\r\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\r\n            }\r\n            return;\r\n        }\r\n        const firstRow = rows[0];\r\n        const numCells = firstRow.children.length;\r\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\r\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\r\n        const firstStickyEnd = stickyEndStates.indexOf(true);\r\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            const isRtl = this.direction === 'rtl';\r\n            const start = isRtl ? 'right' : 'left';\r\n            const end = isRtl ? 'left' : 'right';\r\n            for (const row of rows) {\r\n                for (let i = 0; i < numCells; i++) {\r\n                    const cell = row.children[i];\r\n                    if (stickyStartStates[i]) {\r\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\r\n                    }\r\n                    if (stickyEndStates[i]) {\r\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\r\n                    }\r\n                }\r\n            }\r\n            if (this._positionListener) {\r\n                this._positionListener.stickyColumnsUpdated({\r\n                    sizes: lastStickyStart === -1 ?\r\n                        [] :\r\n                        cellWidths\r\n                            .slice(0, lastStickyStart + 1)\r\n                            .map((width, index) => stickyStartStates[index] ? width : null)\r\n                });\r\n                this._positionListener.stickyEndColumnsUpdated({\r\n                    sizes: firstStickyEnd === -1 ?\r\n                        [] :\r\n                        cellWidths\r\n                            .slice(firstStickyEnd)\r\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\r\n                            .reverse()\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n     * row itself otherwise.\r\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n     *     sticky state and to the provided top or bottom position.\r\n     * @param stickyStates A list of boolean states where each state represents whether the row\r\n     *     should be stuck in the particular top or bottom position.\r\n     * @param position The position direction in which the row should be stuck if that row should be\r\n     *     sticky.\r\n     *\r\n     */\r\n    stickRows(rowsToStick, stickyStates, position) {\r\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\r\n        if (!this._isBrowser) {\r\n            return;\r\n        }\r\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\r\n        // sticky states need to be reversed as well.\r\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\r\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\r\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\r\n        const stickyOffsets = [];\r\n        const stickyCellHeights = [];\r\n        const elementsToStick = [];\r\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\r\n            stickyOffsets[rowIndex] = stickyOffset;\r\n            if (!states[rowIndex]) {\r\n                continue;\r\n            }\r\n            const row = rows[rowIndex];\r\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\r\n                Array.from(row.children) : [row];\r\n            const height = row.getBoundingClientRect().height;\r\n            stickyOffset += height;\r\n            stickyCellHeights[rowIndex] = height;\r\n        }\r\n        const borderedRowIndex = states.lastIndexOf(true);\r\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\r\n        // (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            var _a, _b;\r\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n                if (!states[rowIndex]) {\r\n                    continue;\r\n                }\r\n                const offset = stickyOffsets[rowIndex];\r\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\r\n                for (const element of elementsToStick[rowIndex]) {\r\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\r\n                }\r\n            }\r\n            if (position === 'top') {\r\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\r\n            }\r\n            else {\r\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n     * the tfoot element.\r\n     */\r\n    updateStickyFooterContainer(tableElement, stickyStates) {\r\n        if (!this._isNativeHtmlTable) {\r\n            return;\r\n        }\r\n        const tfoot = tableElement.querySelector('tfoot');\r\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            if (stickyStates.some(state => !state)) {\r\n                this._removeStickyStyle(tfoot, ['bottom']);\r\n            }\r\n            else {\r\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n     * the zIndex, removing each of the provided sticky directions, and removing the\r\n     * sticky position if there are no more directions.\r\n     */\r\n    _removeStickyStyle(element, stickyDirections) {\r\n        for (const dir of stickyDirections) {\r\n            element.style[dir] = '';\r\n            element.classList.remove(this._borderCellCss[dir]);\r\n        }\r\n        // If the element no longer has any more sticky directions, remove sticky positioning and\r\n        // the sticky CSS class.\r\n        // Short-circuit checking element.style[dir] for stickyDirections as they\r\n        // were already removed above.\r\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\r\n        if (hasDirection) {\r\n            element.style.zIndex = this._getCalculatedZIndex(element);\r\n        }\r\n        else {\r\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\r\n            element.style.zIndex = '';\r\n            if (this._needsPositionStickyOnElement) {\r\n                element.style.position = '';\r\n            }\r\n            element.classList.remove(this._stickCellCss);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n     * direction and value.\r\n     */\r\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\r\n        element.classList.add(this._stickCellCss);\r\n        if (isBorderElement) {\r\n            element.classList.add(this._borderCellCss[dir]);\r\n        }\r\n        element.style[dir] = `${dirValue}px`;\r\n        element.style.zIndex = this._getCalculatedZIndex(element);\r\n        if (this._needsPositionStickyOnElement) {\r\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n        }\r\n    }\r\n    /**\r\n     * Calculate what the z-index should be for the element, depending on what directions (top,\r\n     * bottom, left, right) have been set. It should be true that elements with a top direction\r\n     * should have the highest index since these are elements like a table header. If any of those\r\n     * elements are also sticky in another direction, then they should appear above other elements\r\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n     * elements.\r\n     */\r\n    _getCalculatedZIndex(element) {\r\n        const zIndexIncrements = {\r\n            top: 100,\r\n            bottom: 10,\r\n            left: 1,\r\n            right: 1,\r\n        };\r\n        let zIndex = 0;\r\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\r\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\r\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\r\n        for (const dir of STICKY_DIRECTIONS) {\r\n            if (element.style[dir]) {\r\n                zIndex += zIndexIncrements[dir];\r\n            }\r\n        }\r\n        return zIndex ? `${zIndex}` : '';\r\n    }\r\n    /** Gets the widths for each cell in the provided row. */\r\n    _getCellWidths(row, recalculateCellWidths = true) {\r\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\r\n            return this._cachedCellWidths;\r\n        }\r\n        const cellWidths = [];\r\n        const firstRowCells = row.children;\r\n        for (let i = 0; i < firstRowCells.length; i++) {\r\n            let cell = firstRowCells[i];\r\n            cellWidths.push(cell.getBoundingClientRect().width);\r\n        }\r\n        this._cachedCellWidths = cellWidths;\r\n        return cellWidths;\r\n    }\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     */\r\n    _getStickyStartColumnPositions(widths, stickyStates) {\r\n        const positions = [];\r\n        let nextPosition = 0;\r\n        for (let i = 0; i < widths.length; i++) {\r\n            if (stickyStates[i]) {\r\n                positions[i] = nextPosition;\r\n                nextPosition += widths[i];\r\n            }\r\n        }\r\n        return positions;\r\n    }\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     */\r\n    _getStickyEndColumnPositions(widths, stickyStates) {\r\n        const positions = [];\r\n        let nextPosition = 0;\r\n        for (let i = widths.length; i > 0; i--) {\r\n            if (stickyStates[i]) {\r\n                positions[i] = nextPosition;\r\n                nextPosition += widths[i];\r\n            }\r\n        }\r\n        return positions;\r\n    }\r\n    /**\r\n     * Schedules styles to be applied when the style scheduler deems appropriate.\r\n     * @breaking-change 11.0.0 This method can be removed in favor of calling\r\n     * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\r\n     */\r\n    _scheduleStyleChanges(changes) {\r\n        if (this._coalescedStyleScheduler) {\r\n            this._coalescedStyleScheduler.schedule(changes);\r\n        }\r\n        else {\r\n            changes();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * @param id Id whose lookup failed.\r\n * @docs-private\r\n */\r\nfunction getTableUnknownColumnError(id) {\r\n    return Error(`Could not find column with id \"${id}\".`);\r\n}\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * @docs-private\r\n */\r\nfunction getTableDuplicateColumnNameError(name) {\r\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * @docs-private\r\n */\r\nfunction getTableMultipleDefaultRowDefsError() {\r\n    return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * @docs-private\r\n */\r\nfunction getTableMissingMatchingRowDefError(data) {\r\n    return Error(`Could not find a matching row definition for the` +\r\n        `provided row data: ${JSON.stringify(data)}`);\r\n}\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * @docs-private\r\n */\r\nfunction getTableMissingRowDefsError() {\r\n    return Error('Missing definitions for header, footer, and row; ' +\r\n        'cannot determine which columns should be rendered.');\r\n}\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nfunction getTableUnknownDataSourceError() {\r\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\r\n}\r\n/**\r\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\r\n * @docs-private\r\n */\r\nfunction getTableTextColumnMissingParentTableError() {\r\n    return Error(`Text column could not find a parent table for registration.`);\r\n}\r\n/**\r\n * Returns an error to be thrown when a table text column doesn't have a name.\r\n * @docs-private\r\n */\r\nfunction getTableTextColumnMissingNameError() {\r\n    return Error(`Table text column must have a name.`);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** The injection token used to specify the StickyPositioningListener. */\r\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\nclass DataRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\r\nDataRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[rowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\nclass HeaderRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\r\nHeaderRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[headerRowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * @docs-private\r\n */\r\nclass FooterRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\r\nFooterRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[footerRowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * Provides a handle for the table to grab the view\r\n * container's ng-container to insert the no data row.\r\n * @docs-private\r\n */\r\nclass NoDataRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nNoDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\r\nNoDataRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[noDataRowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @docs-private\r\n */\r\nconst CDK_TABLE_TEMPLATE = \r\n// Note that according to MDN, the `caption` element has to be projected as the **first**\r\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\r\n`\r\n  <ng-content select=\"caption\"></ng-content>\r\n  <ng-content select=\"colgroup, col\"></ng-content>\r\n  <ng-container headerRowOutlet></ng-container>\r\n  <ng-container rowOutlet></ng-container>\r\n  <ng-container noDataRowOutlet></ng-container>\r\n  <ng-container footerRowOutlet></ng-container>\r\n`;\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * @docs-private\r\n */\r\nclass RowViewRef extends EmbeddedViewRef {\r\n}\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n */\r\nclass CdkTable {\r\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, \r\n    /**\r\n     * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\r\n     *    parameters to become required.\r\n     * @breaking-change 11.0.0\r\n     */\r\n    _viewRepeater, _coalescedStyleScheduler, _stickyPositioningListener, \r\n    // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\r\n    // this property will never be null.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _viewportRuler) {\r\n        this._differs = _differs;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._elementRef = _elementRef;\r\n        this._dir = _dir;\r\n        this._platform = _platform;\r\n        this._viewRepeater = _viewRepeater;\r\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\r\n        this._stickyPositioningListener = _stickyPositioningListener;\r\n        this._viewportRuler = _viewportRuler;\r\n        /** Subject that emits when the component has been destroyed. */\r\n        this._onDestroy = new Subject();\r\n        /**\r\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n         * any custom column definitions added to `_customColumnDefs`.\r\n         */\r\n        this._columnDefsByName = new Map();\r\n        /**\r\n         * Column definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * column definitions as *its* content child.\r\n         */\r\n        this._customColumnDefs = new Set();\r\n        /**\r\n         * Data row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * built-in data rows as *its* content child.\r\n         */\r\n        this._customRowDefs = new Set();\r\n        /**\r\n         * Header row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * built-in header rows as *its* content child.\r\n         */\r\n        this._customHeaderRowDefs = new Set();\r\n        /**\r\n         * Footer row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n         * built-in footer row as *its* content child.\r\n         */\r\n        this._customFooterRowDefs = new Set();\r\n        /**\r\n         * Whether the header row definition has been changed. Triggers an update to the header row after\r\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n         */\r\n        this._headerRowDefChanged = true;\r\n        /**\r\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n         */\r\n        this._footerRowDefChanged = true;\r\n        /**\r\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\r\n         * change.\r\n         */\r\n        this._stickyColumnStylesNeedReset = true;\r\n        /**\r\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\r\n         * `false`, cached values will be used instead. This is only applicable to tables with\r\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\r\n         */\r\n        this._forceRecalculateCellWidths = true;\r\n        /**\r\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n         * and understand which rows are added/moved/removed.\r\n         *\r\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n         * contains an array of created pairs. The array is necessary to handle cases where the data\r\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n         * stored.\r\n         */\r\n        this._cachedRenderRowsMap = new Map();\r\n        /**\r\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n         * table subclasses.\r\n         */\r\n        this.stickyCssClass = 'cdk-table-sticky';\r\n        /**\r\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\r\n         * the position is set in a selector associated with the value of stickyCssClass. May be\r\n         * overridden by table subclasses\r\n         */\r\n        this.needsPositionStickyOnElement = true;\r\n        /** Whether the no data row is currently showing anything. */\r\n        this._isShowingNoDataRow = false;\r\n        this._multiTemplateDataRows = false;\r\n        this._fixedLayout = false;\r\n        // TODO(andrewseguin): Remove max value as the end index\r\n        //   and instead calculate the view on init and scroll.\r\n        /**\r\n         * Stream containing the latest information on what rows are being displayed on screen.\r\n         * Can be used by the data source to as a heuristic of what data should be provided.\r\n         *\r\n         * @docs-private\r\n         */\r\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\r\n        if (!role) {\r\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n        }\r\n        this._document = _document;\r\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n    }\r\n    /**\r\n     * Tracking function that will be used to check the differences in data changes. Used similarly\r\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n     * relative to the function to know if a row should be added/removed/moved.\r\n     * Accepts a function that takes two parameters, `index` and `item`.\r\n     */\r\n    get trackBy() {\r\n        return this._trackByFn;\r\n    }\r\n    set trackBy(fn) {\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\r\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n        }\r\n        this._trackByFn = fn;\r\n    }\r\n    /**\r\n     * The table's source of data, which can be provided in three ways (in order of complexity):\r\n     *   - Simple data array (each object represents one table row)\r\n     *   - Stream that emits a data array each time the array changes\r\n     *   - `DataSource` object that implements the connect/disconnect interface.\r\n     *\r\n     * If a data array is provided, the table must be notified when the array's objects are\r\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n     * render the diff since the last table render. If the data array reference is changed, the table\r\n     * will automatically trigger an update to the rows.\r\n     *\r\n     * When providing an Observable stream, the table will trigger an update automatically when the\r\n     * stream emits a new array of data.\r\n     *\r\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n     * provided by the connect function and trigger updates when that stream emits new data array\r\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n     * subscriptions registered during the connect process).\r\n     */\r\n    get dataSource() {\r\n        return this._dataSource;\r\n    }\r\n    set dataSource(dataSource) {\r\n        if (this._dataSource !== dataSource) {\r\n            this._switchDataSource(dataSource);\r\n        }\r\n    }\r\n    /**\r\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n     * defined in the table, or otherwise the default row which does not have a when predicate.\r\n     */\r\n    get multiTemplateDataRows() {\r\n        return this._multiTemplateDataRows;\r\n    }\r\n    set multiTemplateDataRows(v) {\r\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\r\n        // this setter will be invoked before the row outlet has been defined hence the null check.\r\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\r\n            this._forceRenderDataRows();\r\n            this.updateStickyColumnStyles();\r\n        }\r\n    }\r\n    /**\r\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\r\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\r\n     */\r\n    get fixedLayout() {\r\n        return this._fixedLayout;\r\n    }\r\n    set fixedLayout(v) {\r\n        this._fixedLayout = coerceBooleanProperty(v);\r\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\r\n        this._forceRecalculateCellWidths = true;\r\n        this._stickyColumnStylesNeedReset = true;\r\n    }\r\n    ngOnInit() {\r\n        this._setupStickyStyler();\r\n        if (this._isNativeHtmlTable) {\r\n            this._applyNativeTableSections();\r\n        }\r\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n        // the user has provided a custom trackBy, return the result of that function as evaluated\r\n        // with the values of the `RenderRow`'s data and index.\r\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\r\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n        });\r\n        // Table cell dimensions may change after resizing the window. Signal the sticky styler to\r\n        // refresh its cache of cell widths the next time sticky styles are updated.\r\n        // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\r\n        if (this._viewportRuler) {\r\n            this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\r\n                this._forceRecalculateCellWidths = true;\r\n            });\r\n        }\r\n    }\r\n    ngAfterContentChecked() {\r\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n        this._cacheRowDefs();\r\n        this._cacheColumnDefs();\r\n        // Make sure that the user has at least added header, footer, or data row def.\r\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\r\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableMissingRowDefsError();\r\n        }\r\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n        const columnsChanged = this._renderUpdatedColumns();\r\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\r\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\r\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\r\n        this._forceRecalculateCellWidths = rowDefsChanged;\r\n        // If the header row definition has been changed, trigger a render to the header row.\r\n        if (this._headerRowDefChanged) {\r\n            this._forceRenderHeaderRows();\r\n            this._headerRowDefChanged = false;\r\n        }\r\n        // If the footer row definition has been changed, trigger a render to the footer row.\r\n        if (this._footerRowDefChanged) {\r\n            this._forceRenderFooterRows();\r\n            this._footerRowDefChanged = false;\r\n        }\r\n        // If there is a data source and row definitions, connect to the data source unless a\r\n        // connection has already been made.\r\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n            this._observeRenderChanges();\r\n        }\r\n        else if (this._stickyColumnStylesNeedReset) {\r\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\r\n            // called when it row data arrives. Otherwise, we need to call it proactively.\r\n            this.updateStickyColumnStyles();\r\n        }\r\n        this._checkStickyStates();\r\n    }\r\n    ngOnDestroy() {\r\n        this._rowOutlet.viewContainer.clear();\r\n        this._noDataRowOutlet.viewContainer.clear();\r\n        this._headerRowOutlet.viewContainer.clear();\r\n        this._footerRowOutlet.viewContainer.clear();\r\n        this._cachedRenderRowsMap.clear();\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n        if (isDataSource(this.dataSource)) {\r\n            this.dataSource.disconnect(this);\r\n        }\r\n    }\r\n    /**\r\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n     * input or retrieved through an Observable stream (directly or from a DataSource).\r\n     * Checks for differences in the data since the last diff to perform only the necessary\r\n     * changes (add/remove/move rows).\r\n     *\r\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n     * an array, this function will need to be called to render any changes.\r\n     */\r\n    renderRows() {\r\n        this._renderRows = this._getAllRenderRows();\r\n        const changes = this._dataDiffer.diff(this._renderRows);\r\n        if (!changes) {\r\n            this._updateNoDataRow();\r\n            return;\r\n        }\r\n        const viewContainer = this._rowOutlet.viewContainer;\r\n        // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\r\n        // `else` clause once `_viewRepeater` is turned into a required parameter.\r\n        if (this._viewRepeater) {\r\n            this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\r\n                if (change.operation === 1 /* INSERTED */ && change.context) {\r\n                    this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            changes.forEachOperation((record, prevIndex, currentIndex) => {\r\n                if (record.previousIndex == null) {\r\n                    const renderRow = record.item;\r\n                    const rowDef = renderRow.rowDef;\r\n                    const context = { $implicit: renderRow.data };\r\n                    this._renderRow(this._rowOutlet, rowDef, currentIndex, context);\r\n                }\r\n                else if (currentIndex == null) {\r\n                    viewContainer.remove(prevIndex);\r\n                }\r\n                else {\r\n                    const view = viewContainer.get(prevIndex);\r\n                    viewContainer.move(view, currentIndex);\r\n                }\r\n            });\r\n        }\r\n        // Update the meta context of a row's context data (index, count, first, last, ...)\r\n        this._updateRowIndexContext();\r\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n        changes.forEachIdentityChange((record) => {\r\n            const rowView = viewContainer.get(record.currentIndex);\r\n            rowView.context.$implicit = record.item.data;\r\n        });\r\n        this._updateNoDataRow();\r\n        this.updateStickyColumnStyles();\r\n    }\r\n    /** Adds a column definition that was not included as part of the content children. */\r\n    addColumnDef(columnDef) {\r\n        this._customColumnDefs.add(columnDef);\r\n    }\r\n    /** Removes a column definition that was not included as part of the content children. */\r\n    removeColumnDef(columnDef) {\r\n        this._customColumnDefs.delete(columnDef);\r\n    }\r\n    /** Adds a row definition that was not included as part of the content children. */\r\n    addRowDef(rowDef) {\r\n        this._customRowDefs.add(rowDef);\r\n    }\r\n    /** Removes a row definition that was not included as part of the content children. */\r\n    removeRowDef(rowDef) {\r\n        this._customRowDefs.delete(rowDef);\r\n    }\r\n    /** Adds a header row definition that was not included as part of the content children. */\r\n    addHeaderRowDef(headerRowDef) {\r\n        this._customHeaderRowDefs.add(headerRowDef);\r\n        this._headerRowDefChanged = true;\r\n    }\r\n    /** Removes a header row definition that was not included as part of the content children. */\r\n    removeHeaderRowDef(headerRowDef) {\r\n        this._customHeaderRowDefs.delete(headerRowDef);\r\n        this._headerRowDefChanged = true;\r\n    }\r\n    /** Adds a footer row definition that was not included as part of the content children. */\r\n    addFooterRowDef(footerRowDef) {\r\n        this._customFooterRowDefs.add(footerRowDef);\r\n        this._footerRowDefChanged = true;\r\n    }\r\n    /** Removes a footer row definition that was not included as part of the content children. */\r\n    removeFooterRowDef(footerRowDef) {\r\n        this._customFooterRowDefs.delete(footerRowDef);\r\n        this._footerRowDefChanged = true;\r\n    }\r\n    /** Sets a no data row definition that was not included as a part of the content children. */\r\n    setNoDataRow(noDataRow) {\r\n        this._customNoDataRow = noDataRow;\r\n    }\r\n    /**\r\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n     * automatically called when the header row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     */\r\n    updateStickyHeaderRowStyles() {\r\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n        const tableElement = this._elementRef.nativeElement;\r\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\r\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n        // required child `row`.\r\n        const thead = tableElement.querySelector('thead');\r\n        if (thead) {\r\n            thead.style.display = headerRows.length ? '' : 'none';\r\n        }\r\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\r\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\r\n    }\r\n    /**\r\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n     * automatically called when the footer row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     */\r\n    updateStickyFooterRowStyles() {\r\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n        const tableElement = this._elementRef.nativeElement;\r\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\r\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n        // required child `row`.\r\n        const tfoot = tableElement.querySelector('tfoot');\r\n        if (tfoot) {\r\n            tfoot.style.display = footerRows.length ? '' : 'none';\r\n        }\r\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\r\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\r\n    }\r\n    /**\r\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the left and right. Then sticky styles are added for the left and right according\r\n     * to the column definitions for each cell in each row. This is automatically called when\r\n     * the data source provides a new set of data or when a column definition changes its sticky\r\n     * input. May be called manually for cases where the cell content changes outside of these events.\r\n     */\r\n    updateStickyColumnStyles() {\r\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n        const dataRows = this._getRenderedRows(this._rowOutlet);\r\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\r\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\r\n        // don't need to be cleared unless either the sticky column config changes or one of the row\r\n        // defs change.\r\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\r\n            || this._stickyColumnStylesNeedReset) {\r\n            // Clear the left and right positioning from all columns in the table across all rows since\r\n            // sticky columns span across all table sections (header, data, footer)\r\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\r\n            this._stickyColumnStylesNeedReset = false;\r\n        }\r\n        // Update the sticky styles for each header row depending on the def's sticky state\r\n        headerRows.forEach((headerRow, i) => {\r\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\r\n        });\r\n        // Update the sticky styles for each data row depending on its def's sticky state\r\n        this._rowDefs.forEach(rowDef => {\r\n            // Collect all the rows rendered with this row definition.\r\n            const rows = [];\r\n            for (let i = 0; i < dataRows.length; i++) {\r\n                if (this._renderRows[i].rowDef === rowDef) {\r\n                    rows.push(dataRows[i]);\r\n                }\r\n            }\r\n            this._addStickyColumnStyles(rows, rowDef);\r\n        });\r\n        // Update the sticky styles for each footer row depending on the def's sticky state\r\n        footerRows.forEach((footerRow, i) => {\r\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\r\n        });\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\r\n    }\r\n    /**\r\n     * Get the list of RenderRow objects to render according to the current list of data and defined\r\n     * row definitions. If the previous list already contained a particular pair, it should be reused\r\n     * so that the differ equates their references.\r\n     */\r\n    _getAllRenderRows() {\r\n        const renderRows = [];\r\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n        // new cache while unused ones can be picked up by garbage collection.\r\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\r\n        this._cachedRenderRowsMap = new Map();\r\n        // For each data object, get the list of rows that should be rendered, represented by the\r\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n        for (let i = 0; i < this._data.length; i++) {\r\n            let data = this._data[i];\r\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n            if (!this._cachedRenderRowsMap.has(data)) {\r\n                this._cachedRenderRowsMap.set(data, new WeakMap());\r\n            }\r\n            for (let j = 0; j < renderRowsForData.length; j++) {\r\n                let renderRow = renderRowsForData[j];\r\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\r\n                if (cache.has(renderRow.rowDef)) {\r\n                    cache.get(renderRow.rowDef).push(renderRow);\r\n                }\r\n                else {\r\n                    cache.set(renderRow.rowDef, [renderRow]);\r\n                }\r\n                renderRows.push(renderRow);\r\n            }\r\n        }\r\n        return renderRows;\r\n    }\r\n    /**\r\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n     * `(T, CdkRowDef)` pair.\r\n     */\r\n    _getRenderRowsForData(data, dataIndex, cache) {\r\n        const rowDefs = this._getRowDefs(data, dataIndex);\r\n        return rowDefs.map(rowDef => {\r\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\r\n            if (cachedRenderRows.length) {\r\n                const dataRow = cachedRenderRows.shift();\r\n                dataRow.dataIndex = dataIndex;\r\n                return dataRow;\r\n            }\r\n            else {\r\n                return { data, rowDef, dataIndex };\r\n            }\r\n        });\r\n    }\r\n    /** Update the map containing the content's column definitions. */\r\n    _cacheColumnDefs() {\r\n        this._columnDefsByName.clear();\r\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\r\n        columnDefs.forEach(columnDef => {\r\n            if (this._columnDefsByName.has(columnDef.name) &&\r\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getTableDuplicateColumnNameError(columnDef.name);\r\n            }\r\n            this._columnDefsByName.set(columnDef.name, columnDef);\r\n        });\r\n    }\r\n    /** Update the list of all available row definitions that can be used. */\r\n    _cacheRowDefs() {\r\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\r\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\r\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\r\n        // After all row definitions are determined, find the row definition to be considered default.\r\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\r\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\r\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableMultipleDefaultRowDefsError();\r\n        }\r\n        this._defaultRowDef = defaultRowDefs[0];\r\n    }\r\n    /**\r\n     * Check if the header, data, or footer rows have changed what columns they want to display or\r\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n     * re-render that section.\r\n     */\r\n    _renderUpdatedColumns() {\r\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\r\n        // Force re-render data rows if the list of column definitions have changed.\r\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\r\n        if (dataColumnsChanged) {\r\n            this._forceRenderDataRows();\r\n        }\r\n        // Force re-render header/footer rows if the list of column definitions have changed.\r\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\r\n        if (headerColumnsChanged) {\r\n            this._forceRenderHeaderRows();\r\n        }\r\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\r\n        if (footerColumnsChanged) {\r\n            this._forceRenderFooterRows();\r\n        }\r\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\r\n    }\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the row outlet. Otherwise start listening for new data.\r\n     */\r\n    _switchDataSource(dataSource) {\r\n        this._data = [];\r\n        if (isDataSource(this.dataSource)) {\r\n            this.dataSource.disconnect(this);\r\n        }\r\n        // Stop listening for data from the previous data source.\r\n        if (this._renderChangeSubscription) {\r\n            this._renderChangeSubscription.unsubscribe();\r\n            this._renderChangeSubscription = null;\r\n        }\r\n        if (!dataSource) {\r\n            if (this._dataDiffer) {\r\n                this._dataDiffer.diff([]);\r\n            }\r\n            this._rowOutlet.viewContainer.clear();\r\n        }\r\n        this._dataSource = dataSource;\r\n    }\r\n    /** Set up a subscription for the data provided by the data source. */\r\n    _observeRenderChanges() {\r\n        // If no data source has been set, there is nothing to observe for changes.\r\n        if (!this.dataSource) {\r\n            return;\r\n        }\r\n        let dataStream;\r\n        if (isDataSource(this.dataSource)) {\r\n            dataStream = this.dataSource.connect(this);\r\n        }\r\n        else if (isObservable(this.dataSource)) {\r\n            dataStream = this.dataSource;\r\n        }\r\n        else if (Array.isArray(this.dataSource)) {\r\n            dataStream = of(this.dataSource);\r\n        }\r\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableUnknownDataSourceError();\r\n        }\r\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n            .subscribe(data => {\r\n            this._data = data || [];\r\n            this.renderRows();\r\n        });\r\n    }\r\n    /**\r\n     * Clears any existing content in the header row outlet and creates a new embedded view\r\n     * in the outlet using the header row definition.\r\n     */\r\n    _forceRenderHeaderRows() {\r\n        // Clear the header row outlet if any content exists.\r\n        if (this._headerRowOutlet.viewContainer.length > 0) {\r\n            this._headerRowOutlet.viewContainer.clear();\r\n        }\r\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\r\n        this.updateStickyHeaderRowStyles();\r\n    }\r\n    /**\r\n     * Clears any existing content in the footer row outlet and creates a new embedded view\r\n     * in the outlet using the footer row definition.\r\n     */\r\n    _forceRenderFooterRows() {\r\n        // Clear the footer row outlet if any content exists.\r\n        if (this._footerRowOutlet.viewContainer.length > 0) {\r\n            this._footerRowOutlet.viewContainer.clear();\r\n        }\r\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\r\n        this.updateStickyFooterRowStyles();\r\n    }\r\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n    _addStickyColumnStyles(rows, rowDef) {\r\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\r\n            const columnDef = this._columnDefsByName.get(columnName);\r\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getTableUnknownColumnError(columnName);\r\n            }\r\n            return columnDef;\r\n        });\r\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\r\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\r\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\r\n    }\r\n    /** Gets the list of rows that have been rendered in the row outlet. */\r\n    _getRenderedRows(rowOutlet) {\r\n        const renderedRows = [];\r\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n            const viewRef = rowOutlet.viewContainer.get(i);\r\n            renderedRows.push(viewRef.rootNodes[0]);\r\n        }\r\n        return renderedRows;\r\n    }\r\n    /**\r\n     * Get the matching row definitions that should be used for this row data. If there is only\r\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n     * predicate that returns true with the data. If none return true, return the default row\r\n     * definition.\r\n     */\r\n    _getRowDefs(data, dataIndex) {\r\n        if (this._rowDefs.length == 1) {\r\n            return [this._rowDefs[0]];\r\n        }\r\n        let rowDefs = [];\r\n        if (this.multiTemplateDataRows) {\r\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\r\n        }\r\n        else {\r\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\r\n            if (rowDef) {\r\n                rowDefs.push(rowDef);\r\n            }\r\n        }\r\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableMissingMatchingRowDefError(data);\r\n        }\r\n        return rowDefs;\r\n    }\r\n    _getEmbeddedViewArgs(renderRow, index) {\r\n        const rowDef = renderRow.rowDef;\r\n        const context = { $implicit: renderRow.data };\r\n        return {\r\n            templateRef: rowDef.template,\r\n            context,\r\n            index,\r\n        };\r\n    }\r\n    /**\r\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n     * of where to place the new row template in the outlet.\r\n     */\r\n    _renderRow(outlet, rowDef, index, context = {}) {\r\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n        this._renderCellTemplateForItem(rowDef, context);\r\n        return view;\r\n    }\r\n    _renderCellTemplateForItem(rowDef, context) {\r\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\r\n            if (CdkCellOutlet.mostRecentCellOutlet) {\r\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n     * e.g. first/last/even/odd.\r\n     */\r\n    _updateRowIndexContext() {\r\n        const viewContainer = this._rowOutlet.viewContainer;\r\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n            const viewRef = viewContainer.get(renderIndex);\r\n            const context = viewRef.context;\r\n            context.count = count;\r\n            context.first = renderIndex === 0;\r\n            context.last = renderIndex === count - 1;\r\n            context.even = renderIndex % 2 === 0;\r\n            context.odd = !context.even;\r\n            if (this.multiTemplateDataRows) {\r\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n                context.renderIndex = renderIndex;\r\n            }\r\n            else {\r\n                context.index = this._renderRows[renderIndex].dataIndex;\r\n            }\r\n        }\r\n    }\r\n    /** Gets the column definitions for the provided row def. */\r\n    _getCellTemplates(rowDef) {\r\n        if (!rowDef || !rowDef.columns) {\r\n            return [];\r\n        }\r\n        return Array.from(rowDef.columns, columnId => {\r\n            const column = this._columnDefsByName.get(columnId);\r\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getTableUnknownColumnError(columnId);\r\n            }\r\n            return rowDef.extractCellTemplate(column);\r\n        });\r\n    }\r\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n    _applyNativeTableSections() {\r\n        const documentFragment = this._document.createDocumentFragment();\r\n        const sections = [\r\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\r\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\r\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\r\n        ];\r\n        for (const section of sections) {\r\n            const element = this._document.createElement(section.tag);\r\n            element.setAttribute('role', 'rowgroup');\r\n            for (const outlet of section.outlets) {\r\n                element.appendChild(outlet.elementRef.nativeElement);\r\n            }\r\n            documentFragment.appendChild(element);\r\n        }\r\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\r\n        this._elementRef.nativeElement.appendChild(documentFragment);\r\n    }\r\n    /**\r\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n     * `multiTemplateDataRows` or adding/removing row definitions.\r\n     */\r\n    _forceRenderDataRows() {\r\n        this._dataDiffer.diff([]);\r\n        this._rowOutlet.viewContainer.clear();\r\n        this.renderRows();\r\n    }\r\n    /**\r\n     * Checks if there has been a change in sticky states since last check and applies the correct\r\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n     * during a change detection and after the inputs are settled (after content check).\r\n     */\r\n    _checkStickyStates() {\r\n        const stickyCheckReducer = (acc, d) => {\r\n            return acc || d.hasStickyChanged();\r\n        };\r\n        // Note that the check needs to occur for every definition since it notifies the definition\r\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n        // remaining definitions and leave them in an unchecked state.\r\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyHeaderRowStyles();\r\n        }\r\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyFooterRowStyles();\r\n        }\r\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n            this._stickyColumnStylesNeedReset = true;\r\n            this.updateStickyColumnStyles();\r\n        }\r\n    }\r\n    /**\r\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n     * stickiness when directionality changes.\r\n     */\r\n    _setupStickyStyler() {\r\n        const direction = this._dir ? this._dir.value : 'ltr';\r\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\r\n        (this._dir ? this._dir.change : of())\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(value => {\r\n            this._stickyStyler.direction = value;\r\n            this.updateStickyColumnStyles();\r\n        });\r\n    }\r\n    /** Filters definitions that belong to this table from a QueryList. */\r\n    _getOwnDefs(items) {\r\n        return items.filter(item => !item._table || item._table === this);\r\n    }\r\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\r\n    _updateNoDataRow() {\r\n        const noDataRow = this._customNoDataRow || this._noDataRow;\r\n        if (noDataRow) {\r\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\r\n            if (shouldShow !== this._isShowingNoDataRow) {\r\n                const container = this._noDataRowOutlet.viewContainer;\r\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\r\n                this._isShowingNoDataRow = shouldShow;\r\n            }\r\n        }\r\n    }\r\n}\r\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER, 8), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler, 8)); };\r\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\r\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\r\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\r\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\r\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\r\n    } }, hostAttrs: [1, \"cdk-table\"], hostVars: 2, hostBindings: function CdkTable_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\r\n    } }, inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            { provide: CDK_TABLE, useExisting: CdkTable },\r\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\r\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\r\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\r\n        ])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c0);\r\n        ɵngcc0.ɵɵprojection(0);\r\n        ɵngcc0.ɵɵprojection(1, 1);\r\n        ɵngcc0.ɵɵelementContainer(2, 0);\r\n        ɵngcc0.ɵɵelementContainer(3, 1);\r\n        ɵngcc0.ɵɵelementContainer(4, 2);\r\n        ɵngcc0.ɵɵelementContainer(5, 3);\r\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\r\nCdkTable.ctorParameters = () => [\r\n    { type: IterableDiffers },\r\n    { type: ChangeDetectorRef },\r\n    { type: ElementRef },\r\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\r\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Optional }, { type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] },\r\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\r\n];\r\nCdkTable.propDecorators = {\r\n    trackBy: [{ type: Input }],\r\n    dataSource: [{ type: Input }],\r\n    multiTemplateDataRows: [{ type: Input }],\r\n    fixedLayout: [{ type: Input }],\r\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\r\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\r\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\r\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\r\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\r\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\r\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\r\n                    descendants: true\r\n                },] }],\r\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\r\n                    descendants: true\r\n                },] }],\r\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-table, table[cdk-table]',\r\n                exportAs: 'cdkTable',\r\n                template: CDK_TABLE_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-table',\r\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout'\r\n                },\r\n                encapsulation: ViewEncapsulation.None,\r\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\r\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\r\n                // declared elsewhere, they are checked when their declaration points are checked.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                providers: [\r\n                    { provide: CDK_TABLE, useExisting: CdkTable },\r\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\r\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\r\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\r\n                ],\r\n                styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\r\n                type: Attribute,\r\n                args: ['role']\r\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\r\n                type: Optional\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [_VIEW_REPEATER_STRATEGY]\r\n            }] }, { type: _CoalescedStyleScheduler, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [_COALESCED_STYLE_SCHEDULER]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }, {\r\n                type: Inject,\r\n                args: [STICKY_POSITIONING_LISTENER]\r\n            }] }, { type: ɵngcc3.ViewportRuler, decorators: [{\r\n                type: Optional\r\n            }] }]; }, { trackBy: [{\r\n            type: Input\r\n        }], dataSource: [{\r\n            type: Input\r\n        }], multiTemplateDataRows: [{\r\n            type: Input\r\n        }], fixedLayout: [{\r\n            type: Input\r\n        }], _rowOutlet: [{\r\n            type: ViewChild,\r\n            args: [DataRowOutlet, { static: true }]\r\n        }], _headerRowOutlet: [{\r\n            type: ViewChild,\r\n            args: [HeaderRowOutlet, { static: true }]\r\n        }], _footerRowOutlet: [{\r\n            type: ViewChild,\r\n            args: [FooterRowOutlet, { static: true }]\r\n        }], _noDataRowOutlet: [{\r\n            type: ViewChild,\r\n            args: [NoDataRowOutlet, { static: true }]\r\n        }], _contentColumnDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkColumnDef, { descendants: true }]\r\n        }], _contentRowDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkRowDef, { descendants: true }]\r\n        }], _contentHeaderRowDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkHeaderRowDef, {\r\n                    descendants: true\r\n                }]\r\n        }], _contentFooterRowDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkFooterRowDef, {\r\n                    descendants: true\r\n                }]\r\n        }], _noDataRow: [{\r\n            type: ContentChild,\r\n            args: [CdkNoDataRow]\r\n        }] }); })();\r\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\r\nfunction mergeArrayAndSet(array, set) {\r\n    return array.concat(Array.from(set));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\nclass CdkTextColumn {\r\n    constructor(\r\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\r\n    // for better error reporting.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _table, _options) {\r\n        this._table = _table;\r\n        this._options = _options;\r\n        /** Alignment of the cell values. */\r\n        this.justify = 'start';\r\n        this._options = _options || {};\r\n    }\r\n    /** Column name that should be used to reference this column. */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set name(name) {\r\n        this._name = name;\r\n        // With Ivy, inputs can be initialized before static query results are\r\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\r\n        this._syncColumnDefName();\r\n    }\r\n    ngOnInit() {\r\n        this._syncColumnDefName();\r\n        if (this.headerText === undefined) {\r\n            this.headerText = this._createDefaultHeaderText();\r\n        }\r\n        if (!this.dataAccessor) {\r\n            this.dataAccessor =\r\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\r\n        }\r\n        if (this._table) {\r\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\r\n            // since the columnDef will not pick up its content by the time the table finishes checking\r\n            // its content and initializing the rows.\r\n            this.columnDef.cell = this.cell;\r\n            this.columnDef.headerCell = this.headerCell;\r\n            this._table.addColumnDef(this.columnDef);\r\n        }\r\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            throw getTableTextColumnMissingParentTableError();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this._table) {\r\n            this._table.removeColumnDef(this.columnDef);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a default header text. Use the options' header text transformation function if one\r\n     * has been provided. Otherwise simply capitalize the column name.\r\n     */\r\n    _createDefaultHeaderText() {\r\n        const name = this.name;\r\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableTextColumnMissingNameError();\r\n        }\r\n        if (this._options && this._options.defaultHeaderTextTransform) {\r\n            return this._options.defaultHeaderTextTransform(name);\r\n        }\r\n        return name[0].toUpperCase() + name.slice(1);\r\n    }\r\n    /** Synchronizes the column definition name with the text column name. */\r\n    _syncColumnDefName() {\r\n        if (this.columnDef) {\r\n            this.columnDef.name = this.name;\r\n        }\r\n    }\r\n}\r\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\r\nCdkTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\r\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\r\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\r\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\r\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\r\n        ɵngcc0.ɵɵelementContainerEnd();\r\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell], encapsulation: 2 });\r\nCdkTextColumn.ctorParameters = () => [\r\n    { type: CdkTable, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\r\n];\r\nCdkTextColumn.propDecorators = {\r\n    name: [{ type: Input }],\r\n    headerText: [{ type: Input }],\r\n    dataAccessor: [{ type: Input }],\r\n    justify: [{ type: Input }],\r\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\r\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\r\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-text-column',\r\n                template: `\r\n    <ng-container cdkColumnDef>\r\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `,\r\n                encapsulation: ViewEncapsulation.None,\r\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n                // to the table to be inserted into its view. This is problematic when change detection runs since\r\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n                // an ExpressionChangedAfterItHasBeenCheckedError).\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default\r\n            }]\r\n    }], function () { return [{ type: CdkTable, decorators: [{\r\n                type: Optional\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [TEXT_COLUMN_OPTIONS]\r\n            }] }]; }, { justify: [{\r\n            type: Input\r\n        }], name: [{\r\n            type: Input\r\n        }], headerText: [{\r\n            type: Input\r\n        }], dataAccessor: [{\r\n            type: Input\r\n        }], columnDef: [{\r\n            type: ViewChild,\r\n            args: [CdkColumnDef, { static: true }]\r\n        }], cell: [{\r\n            type: ViewChild,\r\n            args: [CdkCellDef, { static: true }]\r\n        }], headerCell: [{\r\n            type: ViewChild,\r\n            args: [CdkHeaderCellDef, { static: true }]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst EXPORTED_DECLARATIONS = [\r\n    CdkTable,\r\n    CdkRowDef,\r\n    CdkCellDef,\r\n    CdkCellOutlet,\r\n    CdkHeaderCellDef,\r\n    CdkFooterCellDef,\r\n    CdkColumnDef,\r\n    CdkCell,\r\n    CdkRow,\r\n    CdkHeaderCell,\r\n    CdkFooterCell,\r\n    CdkHeaderRow,\r\n    CdkHeaderRowDef,\r\n    CdkFooterRow,\r\n    CdkFooterRowDef,\r\n    DataRowOutlet,\r\n    HeaderRowOutlet,\r\n    FooterRowOutlet,\r\n    CdkTextColumn,\r\n    CdkNoDataRow,\r\n    NoDataRowOutlet,\r\n];\r\nclass CdkTableModule {\r\n}\r\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\r\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\r\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ScrollingModule]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: EXPORTED_DECLARATIONS,\r\n                declarations: EXPORTED_DECLARATIONS,\r\n                imports: [ScrollingModule]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; }, imports: function () { return [ScrollingModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\r\n\r\n"]}