{"version":3,"mappings":"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","names":["_c0","_c1","rf","ctx","ɵngcc0","ctx_r0","justify","headerText","data_r2","$implicit","ctx_r1","dataAccessor","name","base","constructor","args","super","this","_sticky","_hasStickyChanged","v","prevValue","coerceBooleanProperty","hasStickyChanged","resetStickyChanged","CDK_TABLE","InjectionToken","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","t","ɵdir","type","selectors","CdkHeaderCellDef","CdkFooterCellDef","_CdkColumnDefBase","mixinHasStickyInput","CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","value","replace","contentQueries","dirIndex","_t","cell","first","headerCell","footerCell","inputs","sticky","stickyEnd","features","provide","useExisting","columnDef","elementRef","classList","nativeElement","className","add","CdkHeaderCell","BaseCdkCell","hostAttrs","CdkFooterCell","CdkCell","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","Subject","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","ngOnDestroy","next","complete","_Schedule","_getScheduleObservable","pipe","takeUntil","subscribe","length","isStable","from","Promise","resolve","undefined","onStable","take","ɵprov","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","_CdkHeaderRowDefBase","CdkHeaderRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDefBase","CdkRowDef","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","ɵcmp","decls","vars","consts","directives","encapsulation","CdkFooterRow","CdkRow","CdkNoDataRow","templateRef","STICKY_DIRECTIONS","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","_scheduleStyleChanges","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_a","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CDK_TABLE_TEMPLATE","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_viewRepeater","_stickyPositioningListener","_viewportRuler","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","viewChange","BehaviorSubject","Number","MAX_VALUE","setAttribute","nodeName","trackBy","_trackByFn","fn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","data","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","columnsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_rowDefs","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","forEachOperation","prevIndex","previousIndex","renderRow","_renderRow","view","get","move","_updateRowIndexContext","forEachIdentityChange","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","_headerRowDefs","def","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","_footerRowDefs","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","_defaultRowDef","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","multiTemplateDataRows","outlet","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","outlets","section","createElement","appendChild","stickyCheckReducer","d","StickyStyler","isBrowser","items","_noDataRow","shouldShow","container","ɵngcc1","DOCUMENT","ɵngcc2","_VIEW_REPEATER_STRATEGY","ɵngcc3","viewQuery","hostVars","hostBindings","fixedLayout","exportAs","useClass","_DisposeViewRepeaterStrategy","useValue","ngContentSelectors","styles","array","concat","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","CdkTextColumn_th_1_Template","CdkTextColumn_td_2_Template","CdkTableModule","ɵmod","ɵinj","imports","ScrollingModule"],"sources":["webpack:///node_modules/@angular/cdk/fesm2015/table.js"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { isDataSource, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/bidi';\r\nimport * as ɵngcc2 from '@angular/cdk/platform';\r\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\r\n\r\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\r\nconst _c1 = [\"caption\", \"colgroup, col\"];\r\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\r\n} }\r\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const data_r2 = ctx.$implicit;\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\r\n} }\r\nexport { DataSource } from '@angular/cdk/collections';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\r\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\r\nimport { takeUntil, take } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nfunction mixinHasStickyInput(base) {\r\n    return class extends base {\r\n        constructor(...args) {\r\n            super(...args);\r\n            this._sticky = false;\r\n            /** Whether the sticky input has changed since it was last checked. */\r\n            this._hasStickyChanged = false;\r\n        }\r\n        /** Whether sticky positioning should be applied. */\r\n        get sticky() { return this._sticky; }\r\n        set sticky(v) {\r\n            const prevValue = this._sticky;\r\n            this._sticky = coerceBooleanProperty(v);\r\n            this._hasStickyChanged = prevValue !== this._sticky;\r\n        }\r\n        /** Whether the sticky value has changed since this was last called. */\r\n        hasStickyChanged() {\r\n            const hasStickyChanged = this._hasStickyChanged;\r\n            this._hasStickyChanged = false;\r\n            return hasStickyChanged;\r\n        }\r\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n        resetStickyChanged() {\r\n            this._hasStickyChanged = false;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used to provide a table to some of the sub-components without causing a circular dependency.\r\n * @docs-private\r\n */\r\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\r\n/** Injection token that can be used to specify the text column options. */\r\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\nclass CdkCellDef {\r\n    constructor(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n}\r\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\r\nCdkCellDef.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkCellDef]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\nclass CdkHeaderCellDef {\r\n    constructor(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n}\r\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\r\nCdkHeaderCellDef.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkHeaderCellDef]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\nclass CdkFooterCellDef {\r\n    constructor(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n}\r\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\r\nCdkFooterCellDef.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkFooterCellDef]' }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nclass CdkColumnDefBase {\r\n}\r\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\nclass CdkColumnDef extends _CdkColumnDefBase {\r\n    constructor(_table) {\r\n        super();\r\n        this._table = _table;\r\n        this._stickyEnd = false;\r\n    }\r\n    /** Unique name for this column. */\r\n    get name() { return this._name; }\r\n    set name(name) { this._setNameInput(name); }\r\n    /**\r\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n     * has been changed.\r\n     */\r\n    get stickyEnd() {\r\n        return this._stickyEnd;\r\n    }\r\n    set stickyEnd(v) {\r\n        const prevValue = this._stickyEnd;\r\n        this._stickyEnd = coerceBooleanProperty(v);\r\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n    }\r\n    /**\r\n     * Overridable method that sets the css classes that will be added to every cell in this\r\n     * column.\r\n     * In the future, columnCssClassName will change from type string[] to string and this\r\n     * will set a single string value.\r\n     * @docs-private\r\n     */\r\n    _updateColumnCssClassName() {\r\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\r\n    }\r\n    /**\r\n     * This has been extracted to a util because of TS 4 and VE.\r\n     * View Engine doesn't support property rename inheritance.\r\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\r\n     * @docs-private\r\n     */\r\n    _setNameInput(value) {\r\n        // If the directive is set without a name (updated programmatically), then this setter will\r\n        // trigger with an empty string and should not overwrite the programmatically set value.\r\n        if (value) {\r\n            this._name = value;\r\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\r\n            this._updateColumnCssClassName();\r\n        }\r\n    }\r\n}\r\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\r\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkColumnDef.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\nCdkColumnDef.propDecorators = {\r\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\r\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\r\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\r\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\r\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkColumnDef]',\r\n                inputs: ['sticky'],\r\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, { name: [{\r\n            type: Input,\r\n            args: ['cdkColumnDef']\r\n        }], stickyEnd: [{\r\n            type: Input,\r\n            args: ['stickyEnd']\r\n        }], cell: [{\r\n            type: ContentChild,\r\n            args: [CdkCellDef]\r\n        }], headerCell: [{\r\n            type: ContentChild,\r\n            args: [CdkHeaderCellDef]\r\n        }], footerCell: [{\r\n            type: ContentChild,\r\n            args: [CdkFooterCellDef]\r\n        }] }); })();\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nclass BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\r\n        // with destructuring.\r\n        const classList = elementRef.nativeElement.classList;\r\n        for (const className of columnDef._columnCssClassName) {\r\n            classList.add(className);\r\n        }\r\n    }\r\n}\r\n/** Header cell template container that adds the right classes and role. */\r\nclass CdkHeaderCell extends BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        super(columnDef, elementRef);\r\n    }\r\n}\r\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkHeaderCell.ctorParameters = () => [\r\n    { type: CdkColumnDef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n                host: {\r\n                    'class': 'cdk-header-cell',\r\n                    'role': 'columnheader'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/** Footer cell template container that adds the right classes and role. */\r\nclass CdkFooterCell extends BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        super(columnDef, elementRef);\r\n    }\r\n}\r\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkFooterCell.ctorParameters = () => [\r\n    { type: CdkColumnDef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n                host: {\r\n                    'class': 'cdk-footer-cell',\r\n                    'role': 'gridcell'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/** Cell template container that adds the right classes and role. */\r\nclass CdkCell extends BaseCdkCell {\r\n    constructor(columnDef, elementRef) {\r\n        super(columnDef, elementRef);\r\n    }\r\n}\r\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkCell.ctorParameters = () => [\r\n    { type: CdkColumnDef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-cell, td[cdk-cell]',\r\n                host: {\r\n                    'class': 'cdk-cell',\r\n                    'role': 'gridcell'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @docs-private\r\n */\r\nclass _Schedule {\r\n    constructor() {\r\n        this.tasks = [];\r\n        this.endTasks = [];\r\n    }\r\n}\r\n/** Injection token used to provide a coalesced style scheduler. */\r\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\r\n/**\r\n * Allows grouping up CSSDom mutations after the current execution context.\r\n * This can significantly improve performance when separate consecutive functions are\r\n * reading from the CSSDom and then mutating it.\r\n *\r\n * @docs-private\r\n */\r\nclass _CoalescedStyleScheduler {\r\n    constructor(_ngZone) {\r\n        this._ngZone = _ngZone;\r\n        this._currentSchedule = null;\r\n        this._destroyed = new Subject();\r\n    }\r\n    /**\r\n     * Schedules the specified task to run at the end of the current VM turn.\r\n     */\r\n    schedule(task) {\r\n        this._createScheduleIfNeeded();\r\n        this._currentSchedule.tasks.push(task);\r\n    }\r\n    /**\r\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\r\n     * VM turn.\r\n     */\r\n    scheduleEnd(task) {\r\n        this._createScheduleIfNeeded();\r\n        this._currentSchedule.endTasks.push(task);\r\n    }\r\n    /** Prevent any further tasks from running. */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    _createScheduleIfNeeded() {\r\n        if (this._currentSchedule) {\r\n            return;\r\n        }\r\n        this._currentSchedule = new _Schedule();\r\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\r\n                const schedule = this._currentSchedule;\r\n                // Capture new tasks scheduled by the current set of tasks.\r\n                this._currentSchedule = new _Schedule();\r\n                for (const task of schedule.tasks) {\r\n                    task();\r\n                }\r\n                for (const task of schedule.endTasks) {\r\n                    task();\r\n                }\r\n            }\r\n            this._currentSchedule = null;\r\n        });\r\n    }\r\n    _getScheduleObservable() {\r\n        // Use onStable when in the context of an ongoing change detection cycle so that we\r\n        // do not accidentally trigger additional cycles.\r\n        return this._ngZone.isStable ?\r\n            from(Promise.resolve(undefined)) :\r\n            this._ngZone.onStable.pipe(take(1));\r\n    }\r\n}\r\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\r\n_CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\r\n_CoalescedStyleScheduler.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nclass BaseRowDef {\r\n    constructor(\r\n    /** @docs-private */ template, _differs) {\r\n        this.template = template;\r\n        this._differs = _differs;\r\n    }\r\n    ngOnChanges(changes) {\r\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n        // of the columns property or an empty array if none is provided.\r\n        if (!this._columnsDiffer) {\r\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n            this._columnsDiffer = this._differs.find(columns).create();\r\n            this._columnsDiffer.diff(columns);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the difference between the current columns and the columns from the last diff, or null\r\n     * if there is no difference.\r\n     */\r\n    getColumnsDiff() {\r\n        return this._columnsDiffer.diff(this.columns);\r\n    }\r\n    /** Gets this row def's relevant cell template from the provided column def. */\r\n    extractCellTemplate(column) {\r\n        if (this instanceof CdkHeaderRowDef) {\r\n            return column.headerCell.template;\r\n        }\r\n        if (this instanceof CdkFooterRowDef) {\r\n            return column.footerCell.template;\r\n        }\r\n        else {\r\n            return column.cell.template;\r\n        }\r\n    }\r\n}\r\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\r\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nBaseRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nclass CdkHeaderRowDefBase extends BaseRowDef {\r\n}\r\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\r\n    constructor(template, _differs, _table) {\r\n        super(template, _differs);\r\n        this._table = _table;\r\n    }\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n}\r\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkHeaderRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkHeaderRowDef]',\r\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, null); })();\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nclass CdkFooterRowDefBase extends BaseRowDef {\r\n}\r\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\r\n    constructor(template, _differs, _table) {\r\n        super(template, _differs);\r\n        this._table = _table;\r\n    }\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n}\r\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkFooterRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkFooterRowDef]',\r\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, null); })();\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\nclass CdkRowDef extends BaseRowDef {\r\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n    //   if this template should be used.\r\n    constructor(template, _differs, _table) {\r\n        super(template, _differs);\r\n        this._table = _table;\r\n    }\r\n}\r\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\r\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nCdkRowDef.ctorParameters = () => [\r\n    { type: TemplateRef },\r\n    { type: IterableDiffers },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkRowDef]',\r\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_TABLE]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, null); })();\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\nclass CdkCellOutlet {\r\n    constructor(_viewContainer) {\r\n        this._viewContainer = _viewContainer;\r\n        CdkCellOutlet.mostRecentCellOutlet = this;\r\n    }\r\n    ngOnDestroy() {\r\n        // If this was the last outlet being rendered in the view, remove the reference\r\n        // from the static property after it has been destroyed to avoid leaking memory.\r\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n            CdkCellOutlet.mostRecentCellOutlet = null;\r\n        }\r\n    }\r\n}\r\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\r\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\r\n/**\r\n * Static property containing the latest constructed instance of this class.\r\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n * createEmbeddedView. After one of these components are created, this property will provide\r\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n * construct the cells with the provided context.\r\n */\r\nCdkCellOutlet.mostRecentCellOutlet = null;\r\nCdkCellOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[cdkCellOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\nclass CdkHeaderRow {\r\n}\r\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\r\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainer(0, 0);\r\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-header-row, tr[cdk-header-row]',\r\n                template: CDK_ROW_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-header-row',\r\n                    'role': 'row'\r\n                },\r\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], null, null); })();\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\nclass CdkFooterRow {\r\n}\r\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\r\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainer(0, 0);\r\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n                template: CDK_ROW_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-footer-row',\r\n                    'role': 'row'\r\n                },\r\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], null, null); })();\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\nclass CdkRow {\r\n}\r\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\r\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainer(0, 0);\r\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-row, tr[cdk-row]',\r\n                template: CDK_ROW_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-row',\r\n                    'role': 'row'\r\n                },\r\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None\r\n            }]\r\n    }], null, null); })();\r\n/** Row that can be used to display a message when no data is shown in the table. */\r\nclass CdkNoDataRow {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\r\nCdkNoDataRow.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'ng-template[cdkNoDataRow]'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * @docs-private\r\n */\r\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * @docs-private\r\n */\r\nclass StickyStyler {\r\n    /**\r\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\r\n     *     that uses the native `<table>` element.\r\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\r\n     *     sticky positioning applied.\r\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n     *     by reversing left/right positions.\r\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\r\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\r\n     *     using inline styles. If false, it is assumed that position: sticky is included in\r\n     *     the component stylesheet for _stickCellCss.\r\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\r\n     *     and their dimensions.\r\n     */\r\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, \r\n    /**\r\n     * @deprecated `_coalescedStyleScheduler` parameter to become required.\r\n     * @breaking-change 11.0.0\r\n     */\r\n    _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\r\n        this._isNativeHtmlTable = _isNativeHtmlTable;\r\n        this._stickCellCss = _stickCellCss;\r\n        this.direction = direction;\r\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\r\n        this._isBrowser = _isBrowser;\r\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\r\n        this._positionListener = _positionListener;\r\n        this._cachedCellWidths = [];\r\n        this._borderCellCss = {\r\n            'top': `${_stickCellCss}-border-elem-top`,\r\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\r\n            'left': `${_stickCellCss}-border-elem-left`,\r\n            'right': `${_stickCellCss}-border-elem-right`,\r\n        };\r\n    }\r\n    /**\r\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n     */\r\n    clearStickyPositioning(rows, stickyDirections) {\r\n        const elementsToClear = [];\r\n        for (const row of rows) {\r\n            // If the row isn't an element (e.g. if it's an `ng-container`),\r\n            // it won't have inline styles or `children` so we skip it.\r\n            if (row.nodeType !== row.ELEMENT_NODE) {\r\n                continue;\r\n            }\r\n            elementsToClear.push(row);\r\n            for (let i = 0; i < row.children.length; i++) {\r\n                elementsToClear.push(row.children[i]);\r\n            }\r\n        }\r\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            for (const element of elementsToClear) {\r\n                this._removeStickyStyle(element, stickyDirections);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Applies sticky left and right positions to the cells of each row according to the sticky\r\n     * states of the rendered column definitions.\r\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the start of the row.\r\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the end of the row.\r\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\r\n     *     column cell. If `false` cached widths will be used instead.\r\n     */\r\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\r\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\r\n            stickyEndStates.some(state => state))) {\r\n            if (this._positionListener) {\r\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\r\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\r\n            }\r\n            return;\r\n        }\r\n        const firstRow = rows[0];\r\n        const numCells = firstRow.children.length;\r\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\r\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\r\n        const firstStickyEnd = stickyEndStates.indexOf(true);\r\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            const isRtl = this.direction === 'rtl';\r\n            const start = isRtl ? 'right' : 'left';\r\n            const end = isRtl ? 'left' : 'right';\r\n            for (const row of rows) {\r\n                for (let i = 0; i < numCells; i++) {\r\n                    const cell = row.children[i];\r\n                    if (stickyStartStates[i]) {\r\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\r\n                    }\r\n                    if (stickyEndStates[i]) {\r\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\r\n                    }\r\n                }\r\n            }\r\n            if (this._positionListener) {\r\n                this._positionListener.stickyColumnsUpdated({\r\n                    sizes: lastStickyStart === -1 ?\r\n                        [] :\r\n                        cellWidths\r\n                            .slice(0, lastStickyStart + 1)\r\n                            .map((width, index) => stickyStartStates[index] ? width : null)\r\n                });\r\n                this._positionListener.stickyEndColumnsUpdated({\r\n                    sizes: firstStickyEnd === -1 ?\r\n                        [] :\r\n                        cellWidths\r\n                            .slice(firstStickyEnd)\r\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\r\n                            .reverse()\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n     * row itself otherwise.\r\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n     *     sticky state and to the provided top or bottom position.\r\n     * @param stickyStates A list of boolean states where each state represents whether the row\r\n     *     should be stuck in the particular top or bottom position.\r\n     * @param position The position direction in which the row should be stuck if that row should be\r\n     *     sticky.\r\n     *\r\n     */\r\n    stickRows(rowsToStick, stickyStates, position) {\r\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\r\n        if (!this._isBrowser) {\r\n            return;\r\n        }\r\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\r\n        // sticky states need to be reversed as well.\r\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\r\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\r\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\r\n        const stickyOffsets = [];\r\n        const stickyCellHeights = [];\r\n        const elementsToStick = [];\r\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\r\n            stickyOffsets[rowIndex] = stickyOffset;\r\n            if (!states[rowIndex]) {\r\n                continue;\r\n            }\r\n            const row = rows[rowIndex];\r\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\r\n                Array.from(row.children) : [row];\r\n            const height = row.getBoundingClientRect().height;\r\n            stickyOffset += height;\r\n            stickyCellHeights[rowIndex] = height;\r\n        }\r\n        const borderedRowIndex = states.lastIndexOf(true);\r\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\r\n        // (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            var _a, _b;\r\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n                if (!states[rowIndex]) {\r\n                    continue;\r\n                }\r\n                const offset = stickyOffsets[rowIndex];\r\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\r\n                for (const element of elementsToStick[rowIndex]) {\r\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\r\n                }\r\n            }\r\n            if (position === 'top') {\r\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\r\n            }\r\n            else {\r\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n     * the tfoot element.\r\n     */\r\n    updateStickyFooterContainer(tableElement, stickyStates) {\r\n        if (!this._isNativeHtmlTable) {\r\n            return;\r\n        }\r\n        const tfoot = tableElement.querySelector('tfoot');\r\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\r\n        this._scheduleStyleChanges(() => {\r\n            if (stickyStates.some(state => !state)) {\r\n                this._removeStickyStyle(tfoot, ['bottom']);\r\n            }\r\n            else {\r\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n     * the zIndex, removing each of the provided sticky directions, and removing the\r\n     * sticky position if there are no more directions.\r\n     */\r\n    _removeStickyStyle(element, stickyDirections) {\r\n        for (const dir of stickyDirections) {\r\n            element.style[dir] = '';\r\n            element.classList.remove(this._borderCellCss[dir]);\r\n        }\r\n        // If the element no longer has any more sticky directions, remove sticky positioning and\r\n        // the sticky CSS class.\r\n        // Short-circuit checking element.style[dir] for stickyDirections as they\r\n        // were already removed above.\r\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\r\n        if (hasDirection) {\r\n            element.style.zIndex = this._getCalculatedZIndex(element);\r\n        }\r\n        else {\r\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\r\n            element.style.zIndex = '';\r\n            if (this._needsPositionStickyOnElement) {\r\n                element.style.position = '';\r\n            }\r\n            element.classList.remove(this._stickCellCss);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n     * direction and value.\r\n     */\r\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\r\n        element.classList.add(this._stickCellCss);\r\n        if (isBorderElement) {\r\n            element.classList.add(this._borderCellCss[dir]);\r\n        }\r\n        element.style[dir] = `${dirValue}px`;\r\n        element.style.zIndex = this._getCalculatedZIndex(element);\r\n        if (this._needsPositionStickyOnElement) {\r\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n        }\r\n    }\r\n    /**\r\n     * Calculate what the z-index should be for the element, depending on what directions (top,\r\n     * bottom, left, right) have been set. It should be true that elements with a top direction\r\n     * should have the highest index since these are elements like a table header. If any of those\r\n     * elements are also sticky in another direction, then they should appear above other elements\r\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n     * elements.\r\n     */\r\n    _getCalculatedZIndex(element) {\r\n        const zIndexIncrements = {\r\n            top: 100,\r\n            bottom: 10,\r\n            left: 1,\r\n            right: 1,\r\n        };\r\n        let zIndex = 0;\r\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\r\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\r\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\r\n        for (const dir of STICKY_DIRECTIONS) {\r\n            if (element.style[dir]) {\r\n                zIndex += zIndexIncrements[dir];\r\n            }\r\n        }\r\n        return zIndex ? `${zIndex}` : '';\r\n    }\r\n    /** Gets the widths for each cell in the provided row. */\r\n    _getCellWidths(row, recalculateCellWidths = true) {\r\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\r\n            return this._cachedCellWidths;\r\n        }\r\n        const cellWidths = [];\r\n        const firstRowCells = row.children;\r\n        for (let i = 0; i < firstRowCells.length; i++) {\r\n            let cell = firstRowCells[i];\r\n            cellWidths.push(cell.getBoundingClientRect().width);\r\n        }\r\n        this._cachedCellWidths = cellWidths;\r\n        return cellWidths;\r\n    }\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     */\r\n    _getStickyStartColumnPositions(widths, stickyStates) {\r\n        const positions = [];\r\n        let nextPosition = 0;\r\n        for (let i = 0; i < widths.length; i++) {\r\n            if (stickyStates[i]) {\r\n                positions[i] = nextPosition;\r\n                nextPosition += widths[i];\r\n            }\r\n        }\r\n        return positions;\r\n    }\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     */\r\n    _getStickyEndColumnPositions(widths, stickyStates) {\r\n        const positions = [];\r\n        let nextPosition = 0;\r\n        for (let i = widths.length; i > 0; i--) {\r\n            if (stickyStates[i]) {\r\n                positions[i] = nextPosition;\r\n                nextPosition += widths[i];\r\n            }\r\n        }\r\n        return positions;\r\n    }\r\n    /**\r\n     * Schedules styles to be applied when the style scheduler deems appropriate.\r\n     * @breaking-change 11.0.0 This method can be removed in favor of calling\r\n     * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\r\n     */\r\n    _scheduleStyleChanges(changes) {\r\n        if (this._coalescedStyleScheduler) {\r\n            this._coalescedStyleScheduler.schedule(changes);\r\n        }\r\n        else {\r\n            changes();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * @param id Id whose lookup failed.\r\n * @docs-private\r\n */\r\nfunction getTableUnknownColumnError(id) {\r\n    return Error(`Could not find column with id \"${id}\".`);\r\n}\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * @docs-private\r\n */\r\nfunction getTableDuplicateColumnNameError(name) {\r\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * @docs-private\r\n */\r\nfunction getTableMultipleDefaultRowDefsError() {\r\n    return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * @docs-private\r\n */\r\nfunction getTableMissingMatchingRowDefError(data) {\r\n    return Error(`Could not find a matching row definition for the` +\r\n        `provided row data: ${JSON.stringify(data)}`);\r\n}\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * @docs-private\r\n */\r\nfunction getTableMissingRowDefsError() {\r\n    return Error('Missing definitions for header, footer, and row; ' +\r\n        'cannot determine which columns should be rendered.');\r\n}\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nfunction getTableUnknownDataSourceError() {\r\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\r\n}\r\n/**\r\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\r\n * @docs-private\r\n */\r\nfunction getTableTextColumnMissingParentTableError() {\r\n    return Error(`Text column could not find a parent table for registration.`);\r\n}\r\n/**\r\n * Returns an error to be thrown when a table text column doesn't have a name.\r\n * @docs-private\r\n */\r\nfunction getTableTextColumnMissingNameError() {\r\n    return Error(`Table text column must have a name.`);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** The injection token used to specify the StickyPositioningListener. */\r\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\nclass DataRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\r\nDataRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[rowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\nclass HeaderRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\r\nHeaderRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[headerRowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * @docs-private\r\n */\r\nclass FooterRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\r\nFooterRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[footerRowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * Provides a handle for the table to grab the view\r\n * container's ng-container to insert the no data row.\r\n * @docs-private\r\n */\r\nclass NoDataRowOutlet {\r\n    constructor(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\r\nNoDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\r\nNoDataRowOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: ElementRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\r\n        type: Directive,\r\n        args: [{ selector: '[noDataRowOutlet]' }]\r\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @docs-private\r\n */\r\nconst CDK_TABLE_TEMPLATE = \r\n// Note that according to MDN, the `caption` element has to be projected as the **first**\r\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\r\n`\r\n  <ng-content select=\"caption\"></ng-content>\r\n  <ng-content select=\"colgroup, col\"></ng-content>\r\n  <ng-container headerRowOutlet></ng-container>\r\n  <ng-container rowOutlet></ng-container>\r\n  <ng-container noDataRowOutlet></ng-container>\r\n  <ng-container footerRowOutlet></ng-container>\r\n`;\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * @docs-private\r\n */\r\nclass RowViewRef extends EmbeddedViewRef {\r\n}\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n */\r\nclass CdkTable {\r\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, \r\n    /**\r\n     * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\r\n     *    parameters to become required.\r\n     * @breaking-change 11.0.0\r\n     */\r\n    _viewRepeater, _coalescedStyleScheduler, _stickyPositioningListener, \r\n    // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\r\n    // this property will never be null.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _viewportRuler) {\r\n        this._differs = _differs;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._elementRef = _elementRef;\r\n        this._dir = _dir;\r\n        this._platform = _platform;\r\n        this._viewRepeater = _viewRepeater;\r\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\r\n        this._stickyPositioningListener = _stickyPositioningListener;\r\n        this._viewportRuler = _viewportRuler;\r\n        /** Subject that emits when the component has been destroyed. */\r\n        this._onDestroy = new Subject();\r\n        /**\r\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n         * any custom column definitions added to `_customColumnDefs`.\r\n         */\r\n        this._columnDefsByName = new Map();\r\n        /**\r\n         * Column definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * column definitions as *its* content child.\r\n         */\r\n        this._customColumnDefs = new Set();\r\n        /**\r\n         * Data row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * built-in data rows as *its* content child.\r\n         */\r\n        this._customRowDefs = new Set();\r\n        /**\r\n         * Header row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * built-in header rows as *its* content child.\r\n         */\r\n        this._customHeaderRowDefs = new Set();\r\n        /**\r\n         * Footer row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n         * built-in footer row as *its* content child.\r\n         */\r\n        this._customFooterRowDefs = new Set();\r\n        /**\r\n         * Whether the header row definition has been changed. Triggers an update to the header row after\r\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n         */\r\n        this._headerRowDefChanged = true;\r\n        /**\r\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n         */\r\n        this._footerRowDefChanged = true;\r\n        /**\r\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\r\n         * change.\r\n         */\r\n        this._stickyColumnStylesNeedReset = true;\r\n        /**\r\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\r\n         * `false`, cached values will be used instead. This is only applicable to tables with\r\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\r\n         */\r\n        this._forceRecalculateCellWidths = true;\r\n        /**\r\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n         * and understand which rows are added/moved/removed.\r\n         *\r\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n         * contains an array of created pairs. The array is necessary to handle cases where the data\r\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n         * stored.\r\n         */\r\n        this._cachedRenderRowsMap = new Map();\r\n        /**\r\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n         * table subclasses.\r\n         */\r\n        this.stickyCssClass = 'cdk-table-sticky';\r\n        /**\r\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\r\n         * the position is set in a selector associated with the value of stickyCssClass. May be\r\n         * overridden by table subclasses\r\n         */\r\n        this.needsPositionStickyOnElement = true;\r\n        /** Whether the no data row is currently showing anything. */\r\n        this._isShowingNoDataRow = false;\r\n        this._multiTemplateDataRows = false;\r\n        this._fixedLayout = false;\r\n        // TODO(andrewseguin): Remove max value as the end index\r\n        //   and instead calculate the view on init and scroll.\r\n        /**\r\n         * Stream containing the latest information on what rows are being displayed on screen.\r\n         * Can be used by the data source to as a heuristic of what data should be provided.\r\n         *\r\n         * @docs-private\r\n         */\r\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\r\n        if (!role) {\r\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n        }\r\n        this._document = _document;\r\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n    }\r\n    /**\r\n     * Tracking function that will be used to check the differences in data changes. Used similarly\r\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n     * relative to the function to know if a row should be added/removed/moved.\r\n     * Accepts a function that takes two parameters, `index` and `item`.\r\n     */\r\n    get trackBy() {\r\n        return this._trackByFn;\r\n    }\r\n    set trackBy(fn) {\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\r\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n        }\r\n        this._trackByFn = fn;\r\n    }\r\n    /**\r\n     * The table's source of data, which can be provided in three ways (in order of complexity):\r\n     *   - Simple data array (each object represents one table row)\r\n     *   - Stream that emits a data array each time the array changes\r\n     *   - `DataSource` object that implements the connect/disconnect interface.\r\n     *\r\n     * If a data array is provided, the table must be notified when the array's objects are\r\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n     * render the diff since the last table render. If the data array reference is changed, the table\r\n     * will automatically trigger an update to the rows.\r\n     *\r\n     * When providing an Observable stream, the table will trigger an update automatically when the\r\n     * stream emits a new array of data.\r\n     *\r\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n     * provided by the connect function and trigger updates when that stream emits new data array\r\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n     * subscriptions registered during the connect process).\r\n     */\r\n    get dataSource() {\r\n        return this._dataSource;\r\n    }\r\n    set dataSource(dataSource) {\r\n        if (this._dataSource !== dataSource) {\r\n            this._switchDataSource(dataSource);\r\n        }\r\n    }\r\n    /**\r\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n     * defined in the table, or otherwise the default row which does not have a when predicate.\r\n     */\r\n    get multiTemplateDataRows() {\r\n        return this._multiTemplateDataRows;\r\n    }\r\n    set multiTemplateDataRows(v) {\r\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\r\n        // this setter will be invoked before the row outlet has been defined hence the null check.\r\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\r\n            this._forceRenderDataRows();\r\n            this.updateStickyColumnStyles();\r\n        }\r\n    }\r\n    /**\r\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\r\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\r\n     */\r\n    get fixedLayout() {\r\n        return this._fixedLayout;\r\n    }\r\n    set fixedLayout(v) {\r\n        this._fixedLayout = coerceBooleanProperty(v);\r\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\r\n        this._forceRecalculateCellWidths = true;\r\n        this._stickyColumnStylesNeedReset = true;\r\n    }\r\n    ngOnInit() {\r\n        this._setupStickyStyler();\r\n        if (this._isNativeHtmlTable) {\r\n            this._applyNativeTableSections();\r\n        }\r\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n        // the user has provided a custom trackBy, return the result of that function as evaluated\r\n        // with the values of the `RenderRow`'s data and index.\r\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\r\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n        });\r\n        // Table cell dimensions may change after resizing the window. Signal the sticky styler to\r\n        // refresh its cache of cell widths the next time sticky styles are updated.\r\n        // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\r\n        if (this._viewportRuler) {\r\n            this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\r\n                this._forceRecalculateCellWidths = true;\r\n            });\r\n        }\r\n    }\r\n    ngAfterContentChecked() {\r\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n        this._cacheRowDefs();\r\n        this._cacheColumnDefs();\r\n        // Make sure that the user has at least added header, footer, or data row def.\r\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\r\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableMissingRowDefsError();\r\n        }\r\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n        const columnsChanged = this._renderUpdatedColumns();\r\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\r\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\r\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\r\n        this._forceRecalculateCellWidths = rowDefsChanged;\r\n        // If the header row definition has been changed, trigger a render to the header row.\r\n        if (this._headerRowDefChanged) {\r\n            this._forceRenderHeaderRows();\r\n            this._headerRowDefChanged = false;\r\n        }\r\n        // If the footer row definition has been changed, trigger a render to the footer row.\r\n        if (this._footerRowDefChanged) {\r\n            this._forceRenderFooterRows();\r\n            this._footerRowDefChanged = false;\r\n        }\r\n        // If there is a data source and row definitions, connect to the data source unless a\r\n        // connection has already been made.\r\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n            this._observeRenderChanges();\r\n        }\r\n        else if (this._stickyColumnStylesNeedReset) {\r\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\r\n            // called when it row data arrives. Otherwise, we need to call it proactively.\r\n            this.updateStickyColumnStyles();\r\n        }\r\n        this._checkStickyStates();\r\n    }\r\n    ngOnDestroy() {\r\n        this._rowOutlet.viewContainer.clear();\r\n        this._noDataRowOutlet.viewContainer.clear();\r\n        this._headerRowOutlet.viewContainer.clear();\r\n        this._footerRowOutlet.viewContainer.clear();\r\n        this._cachedRenderRowsMap.clear();\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n        if (isDataSource(this.dataSource)) {\r\n            this.dataSource.disconnect(this);\r\n        }\r\n    }\r\n    /**\r\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n     * input or retrieved through an Observable stream (directly or from a DataSource).\r\n     * Checks for differences in the data since the last diff to perform only the necessary\r\n     * changes (add/remove/move rows).\r\n     *\r\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n     * an array, this function will need to be called to render any changes.\r\n     */\r\n    renderRows() {\r\n        this._renderRows = this._getAllRenderRows();\r\n        const changes = this._dataDiffer.diff(this._renderRows);\r\n        if (!changes) {\r\n            this._updateNoDataRow();\r\n            return;\r\n        }\r\n        const viewContainer = this._rowOutlet.viewContainer;\r\n        // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\r\n        // `else` clause once `_viewRepeater` is turned into a required parameter.\r\n        if (this._viewRepeater) {\r\n            this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\r\n                if (change.operation === 1 /* INSERTED */ && change.context) {\r\n                    this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            changes.forEachOperation((record, prevIndex, currentIndex) => {\r\n                if (record.previousIndex == null) {\r\n                    const renderRow = record.item;\r\n                    const rowDef = renderRow.rowDef;\r\n                    const context = { $implicit: renderRow.data };\r\n                    this._renderRow(this._rowOutlet, rowDef, currentIndex, context);\r\n                }\r\n                else if (currentIndex == null) {\r\n                    viewContainer.remove(prevIndex);\r\n                }\r\n                else {\r\n                    const view = viewContainer.get(prevIndex);\r\n                    viewContainer.move(view, currentIndex);\r\n                }\r\n            });\r\n        }\r\n        // Update the meta context of a row's context data (index, count, first, last, ...)\r\n        this._updateRowIndexContext();\r\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n        changes.forEachIdentityChange((record) => {\r\n            const rowView = viewContainer.get(record.currentIndex);\r\n            rowView.context.$implicit = record.item.data;\r\n        });\r\n        this._updateNoDataRow();\r\n        this.updateStickyColumnStyles();\r\n    }\r\n    /** Adds a column definition that was not included as part of the content children. */\r\n    addColumnDef(columnDef) {\r\n        this._customColumnDefs.add(columnDef);\r\n    }\r\n    /** Removes a column definition that was not included as part of the content children. */\r\n    removeColumnDef(columnDef) {\r\n        this._customColumnDefs.delete(columnDef);\r\n    }\r\n    /** Adds a row definition that was not included as part of the content children. */\r\n    addRowDef(rowDef) {\r\n        this._customRowDefs.add(rowDef);\r\n    }\r\n    /** Removes a row definition that was not included as part of the content children. */\r\n    removeRowDef(rowDef) {\r\n        this._customRowDefs.delete(rowDef);\r\n    }\r\n    /** Adds a header row definition that was not included as part of the content children. */\r\n    addHeaderRowDef(headerRowDef) {\r\n        this._customHeaderRowDefs.add(headerRowDef);\r\n        this._headerRowDefChanged = true;\r\n    }\r\n    /** Removes a header row definition that was not included as part of the content children. */\r\n    removeHeaderRowDef(headerRowDef) {\r\n        this._customHeaderRowDefs.delete(headerRowDef);\r\n        this._headerRowDefChanged = true;\r\n    }\r\n    /** Adds a footer row definition that was not included as part of the content children. */\r\n    addFooterRowDef(footerRowDef) {\r\n        this._customFooterRowDefs.add(footerRowDef);\r\n        this._footerRowDefChanged = true;\r\n    }\r\n    /** Removes a footer row definition that was not included as part of the content children. */\r\n    removeFooterRowDef(footerRowDef) {\r\n        this._customFooterRowDefs.delete(footerRowDef);\r\n        this._footerRowDefChanged = true;\r\n    }\r\n    /** Sets a no data row definition that was not included as a part of the content children. */\r\n    setNoDataRow(noDataRow) {\r\n        this._customNoDataRow = noDataRow;\r\n    }\r\n    /**\r\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n     * automatically called when the header row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     */\r\n    updateStickyHeaderRowStyles() {\r\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n        const tableElement = this._elementRef.nativeElement;\r\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\r\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n        // required child `row`.\r\n        const thead = tableElement.querySelector('thead');\r\n        if (thead) {\r\n            thead.style.display = headerRows.length ? '' : 'none';\r\n        }\r\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\r\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\r\n    }\r\n    /**\r\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n     * automatically called when the footer row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     */\r\n    updateStickyFooterRowStyles() {\r\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n        const tableElement = this._elementRef.nativeElement;\r\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\r\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n        // required child `row`.\r\n        const tfoot = tableElement.querySelector('tfoot');\r\n        if (tfoot) {\r\n            tfoot.style.display = footerRows.length ? '' : 'none';\r\n        }\r\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\r\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\r\n    }\r\n    /**\r\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the left and right. Then sticky styles are added for the left and right according\r\n     * to the column definitions for each cell in each row. This is automatically called when\r\n     * the data source provides a new set of data or when a column definition changes its sticky\r\n     * input. May be called manually for cases where the cell content changes outside of these events.\r\n     */\r\n    updateStickyColumnStyles() {\r\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n        const dataRows = this._getRenderedRows(this._rowOutlet);\r\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\r\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\r\n        // don't need to be cleared unless either the sticky column config changes or one of the row\r\n        // defs change.\r\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\r\n            || this._stickyColumnStylesNeedReset) {\r\n            // Clear the left and right positioning from all columns in the table across all rows since\r\n            // sticky columns span across all table sections (header, data, footer)\r\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\r\n            this._stickyColumnStylesNeedReset = false;\r\n        }\r\n        // Update the sticky styles for each header row depending on the def's sticky state\r\n        headerRows.forEach((headerRow, i) => {\r\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\r\n        });\r\n        // Update the sticky styles for each data row depending on its def's sticky state\r\n        this._rowDefs.forEach(rowDef => {\r\n            // Collect all the rows rendered with this row definition.\r\n            const rows = [];\r\n            for (let i = 0; i < dataRows.length; i++) {\r\n                if (this._renderRows[i].rowDef === rowDef) {\r\n                    rows.push(dataRows[i]);\r\n                }\r\n            }\r\n            this._addStickyColumnStyles(rows, rowDef);\r\n        });\r\n        // Update the sticky styles for each footer row depending on the def's sticky state\r\n        footerRows.forEach((footerRow, i) => {\r\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\r\n        });\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\r\n    }\r\n    /**\r\n     * Get the list of RenderRow objects to render according to the current list of data and defined\r\n     * row definitions. If the previous list already contained a particular pair, it should be reused\r\n     * so that the differ equates their references.\r\n     */\r\n    _getAllRenderRows() {\r\n        const renderRows = [];\r\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n        // new cache while unused ones can be picked up by garbage collection.\r\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\r\n        this._cachedRenderRowsMap = new Map();\r\n        // For each data object, get the list of rows that should be rendered, represented by the\r\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n        for (let i = 0; i < this._data.length; i++) {\r\n            let data = this._data[i];\r\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n            if (!this._cachedRenderRowsMap.has(data)) {\r\n                this._cachedRenderRowsMap.set(data, new WeakMap());\r\n            }\r\n            for (let j = 0; j < renderRowsForData.length; j++) {\r\n                let renderRow = renderRowsForData[j];\r\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\r\n                if (cache.has(renderRow.rowDef)) {\r\n                    cache.get(renderRow.rowDef).push(renderRow);\r\n                }\r\n                else {\r\n                    cache.set(renderRow.rowDef, [renderRow]);\r\n                }\r\n                renderRows.push(renderRow);\r\n            }\r\n        }\r\n        return renderRows;\r\n    }\r\n    /**\r\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n     * `(T, CdkRowDef)` pair.\r\n     */\r\n    _getRenderRowsForData(data, dataIndex, cache) {\r\n        const rowDefs = this._getRowDefs(data, dataIndex);\r\n        return rowDefs.map(rowDef => {\r\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\r\n            if (cachedRenderRows.length) {\r\n                const dataRow = cachedRenderRows.shift();\r\n                dataRow.dataIndex = dataIndex;\r\n                return dataRow;\r\n            }\r\n            else {\r\n                return { data, rowDef, dataIndex };\r\n            }\r\n        });\r\n    }\r\n    /** Update the map containing the content's column definitions. */\r\n    _cacheColumnDefs() {\r\n        this._columnDefsByName.clear();\r\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\r\n        columnDefs.forEach(columnDef => {\r\n            if (this._columnDefsByName.has(columnDef.name) &&\r\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getTableDuplicateColumnNameError(columnDef.name);\r\n            }\r\n            this._columnDefsByName.set(columnDef.name, columnDef);\r\n        });\r\n    }\r\n    /** Update the list of all available row definitions that can be used. */\r\n    _cacheRowDefs() {\r\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\r\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\r\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\r\n        // After all row definitions are determined, find the row definition to be considered default.\r\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\r\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\r\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableMultipleDefaultRowDefsError();\r\n        }\r\n        this._defaultRowDef = defaultRowDefs[0];\r\n    }\r\n    /**\r\n     * Check if the header, data, or footer rows have changed what columns they want to display or\r\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n     * re-render that section.\r\n     */\r\n    _renderUpdatedColumns() {\r\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\r\n        // Force re-render data rows if the list of column definitions have changed.\r\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\r\n        if (dataColumnsChanged) {\r\n            this._forceRenderDataRows();\r\n        }\r\n        // Force re-render header/footer rows if the list of column definitions have changed.\r\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\r\n        if (headerColumnsChanged) {\r\n            this._forceRenderHeaderRows();\r\n        }\r\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\r\n        if (footerColumnsChanged) {\r\n            this._forceRenderFooterRows();\r\n        }\r\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\r\n    }\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the row outlet. Otherwise start listening for new data.\r\n     */\r\n    _switchDataSource(dataSource) {\r\n        this._data = [];\r\n        if (isDataSource(this.dataSource)) {\r\n            this.dataSource.disconnect(this);\r\n        }\r\n        // Stop listening for data from the previous data source.\r\n        if (this._renderChangeSubscription) {\r\n            this._renderChangeSubscription.unsubscribe();\r\n            this._renderChangeSubscription = null;\r\n        }\r\n        if (!dataSource) {\r\n            if (this._dataDiffer) {\r\n                this._dataDiffer.diff([]);\r\n            }\r\n            this._rowOutlet.viewContainer.clear();\r\n        }\r\n        this._dataSource = dataSource;\r\n    }\r\n    /** Set up a subscription for the data provided by the data source. */\r\n    _observeRenderChanges() {\r\n        // If no data source has been set, there is nothing to observe for changes.\r\n        if (!this.dataSource) {\r\n            return;\r\n        }\r\n        let dataStream;\r\n        if (isDataSource(this.dataSource)) {\r\n            dataStream = this.dataSource.connect(this);\r\n        }\r\n        else if (isObservable(this.dataSource)) {\r\n            dataStream = this.dataSource;\r\n        }\r\n        else if (Array.isArray(this.dataSource)) {\r\n            dataStream = of(this.dataSource);\r\n        }\r\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableUnknownDataSourceError();\r\n        }\r\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n            .subscribe(data => {\r\n            this._data = data || [];\r\n            this.renderRows();\r\n        });\r\n    }\r\n    /**\r\n     * Clears any existing content in the header row outlet and creates a new embedded view\r\n     * in the outlet using the header row definition.\r\n     */\r\n    _forceRenderHeaderRows() {\r\n        // Clear the header row outlet if any content exists.\r\n        if (this._headerRowOutlet.viewContainer.length > 0) {\r\n            this._headerRowOutlet.viewContainer.clear();\r\n        }\r\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\r\n        this.updateStickyHeaderRowStyles();\r\n    }\r\n    /**\r\n     * Clears any existing content in the footer row outlet and creates a new embedded view\r\n     * in the outlet using the footer row definition.\r\n     */\r\n    _forceRenderFooterRows() {\r\n        // Clear the footer row outlet if any content exists.\r\n        if (this._footerRowOutlet.viewContainer.length > 0) {\r\n            this._footerRowOutlet.viewContainer.clear();\r\n        }\r\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\r\n        this.updateStickyFooterRowStyles();\r\n    }\r\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n    _addStickyColumnStyles(rows, rowDef) {\r\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\r\n            const columnDef = this._columnDefsByName.get(columnName);\r\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getTableUnknownColumnError(columnName);\r\n            }\r\n            return columnDef;\r\n        });\r\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\r\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\r\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\r\n    }\r\n    /** Gets the list of rows that have been rendered in the row outlet. */\r\n    _getRenderedRows(rowOutlet) {\r\n        const renderedRows = [];\r\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n            const viewRef = rowOutlet.viewContainer.get(i);\r\n            renderedRows.push(viewRef.rootNodes[0]);\r\n        }\r\n        return renderedRows;\r\n    }\r\n    /**\r\n     * Get the matching row definitions that should be used for this row data. If there is only\r\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n     * predicate that returns true with the data. If none return true, return the default row\r\n     * definition.\r\n     */\r\n    _getRowDefs(data, dataIndex) {\r\n        if (this._rowDefs.length == 1) {\r\n            return [this._rowDefs[0]];\r\n        }\r\n        let rowDefs = [];\r\n        if (this.multiTemplateDataRows) {\r\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\r\n        }\r\n        else {\r\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\r\n            if (rowDef) {\r\n                rowDefs.push(rowDef);\r\n            }\r\n        }\r\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableMissingMatchingRowDefError(data);\r\n        }\r\n        return rowDefs;\r\n    }\r\n    _getEmbeddedViewArgs(renderRow, index) {\r\n        const rowDef = renderRow.rowDef;\r\n        const context = { $implicit: renderRow.data };\r\n        return {\r\n            templateRef: rowDef.template,\r\n            context,\r\n            index,\r\n        };\r\n    }\r\n    /**\r\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n     * of where to place the new row template in the outlet.\r\n     */\r\n    _renderRow(outlet, rowDef, index, context = {}) {\r\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n        this._renderCellTemplateForItem(rowDef, context);\r\n        return view;\r\n    }\r\n    _renderCellTemplateForItem(rowDef, context) {\r\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\r\n            if (CdkCellOutlet.mostRecentCellOutlet) {\r\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n     * e.g. first/last/even/odd.\r\n     */\r\n    _updateRowIndexContext() {\r\n        const viewContainer = this._rowOutlet.viewContainer;\r\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n            const viewRef = viewContainer.get(renderIndex);\r\n            const context = viewRef.context;\r\n            context.count = count;\r\n            context.first = renderIndex === 0;\r\n            context.last = renderIndex === count - 1;\r\n            context.even = renderIndex % 2 === 0;\r\n            context.odd = !context.even;\r\n            if (this.multiTemplateDataRows) {\r\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n                context.renderIndex = renderIndex;\r\n            }\r\n            else {\r\n                context.index = this._renderRows[renderIndex].dataIndex;\r\n            }\r\n        }\r\n    }\r\n    /** Gets the column definitions for the provided row def. */\r\n    _getCellTemplates(rowDef) {\r\n        if (!rowDef || !rowDef.columns) {\r\n            return [];\r\n        }\r\n        return Array.from(rowDef.columns, columnId => {\r\n            const column = this._columnDefsByName.get(columnId);\r\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getTableUnknownColumnError(columnId);\r\n            }\r\n            return rowDef.extractCellTemplate(column);\r\n        });\r\n    }\r\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n    _applyNativeTableSections() {\r\n        const documentFragment = this._document.createDocumentFragment();\r\n        const sections = [\r\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\r\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\r\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\r\n        ];\r\n        for (const section of sections) {\r\n            const element = this._document.createElement(section.tag);\r\n            element.setAttribute('role', 'rowgroup');\r\n            for (const outlet of section.outlets) {\r\n                element.appendChild(outlet.elementRef.nativeElement);\r\n            }\r\n            documentFragment.appendChild(element);\r\n        }\r\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\r\n        this._elementRef.nativeElement.appendChild(documentFragment);\r\n    }\r\n    /**\r\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n     * `multiTemplateDataRows` or adding/removing row definitions.\r\n     */\r\n    _forceRenderDataRows() {\r\n        this._dataDiffer.diff([]);\r\n        this._rowOutlet.viewContainer.clear();\r\n        this.renderRows();\r\n    }\r\n    /**\r\n     * Checks if there has been a change in sticky states since last check and applies the correct\r\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n     * during a change detection and after the inputs are settled (after content check).\r\n     */\r\n    _checkStickyStates() {\r\n        const stickyCheckReducer = (acc, d) => {\r\n            return acc || d.hasStickyChanged();\r\n        };\r\n        // Note that the check needs to occur for every definition since it notifies the definition\r\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n        // remaining definitions and leave them in an unchecked state.\r\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyHeaderRowStyles();\r\n        }\r\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyFooterRowStyles();\r\n        }\r\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n            this._stickyColumnStylesNeedReset = true;\r\n            this.updateStickyColumnStyles();\r\n        }\r\n    }\r\n    /**\r\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n     * stickiness when directionality changes.\r\n     */\r\n    _setupStickyStyler() {\r\n        const direction = this._dir ? this._dir.value : 'ltr';\r\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\r\n        (this._dir ? this._dir.change : of())\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(value => {\r\n            this._stickyStyler.direction = value;\r\n            this.updateStickyColumnStyles();\r\n        });\r\n    }\r\n    /** Filters definitions that belong to this table from a QueryList. */\r\n    _getOwnDefs(items) {\r\n        return items.filter(item => !item._table || item._table === this);\r\n    }\r\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\r\n    _updateNoDataRow() {\r\n        const noDataRow = this._customNoDataRow || this._noDataRow;\r\n        if (noDataRow) {\r\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\r\n            if (shouldShow !== this._isShowingNoDataRow) {\r\n                const container = this._noDataRowOutlet.viewContainer;\r\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\r\n                this._isShowingNoDataRow = shouldShow;\r\n            }\r\n        }\r\n    }\r\n}\r\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER, 8), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler, 8)); };\r\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\r\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\r\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\r\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\r\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\r\n    } }, hostAttrs: [1, \"cdk-table\"], hostVars: 2, hostBindings: function CdkTable_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\r\n    } }, inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            { provide: CDK_TABLE, useExisting: CdkTable },\r\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\r\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\r\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\r\n        ])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c0);\r\n        ɵngcc0.ɵɵprojection(0);\r\n        ɵngcc0.ɵɵprojection(1, 1);\r\n        ɵngcc0.ɵɵelementContainer(2, 0);\r\n        ɵngcc0.ɵɵelementContainer(3, 1);\r\n        ɵngcc0.ɵɵelementContainer(4, 2);\r\n        ɵngcc0.ɵɵelementContainer(5, 3);\r\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\r\nCdkTable.ctorParameters = () => [\r\n    { type: IterableDiffers },\r\n    { type: ChangeDetectorRef },\r\n    { type: ElementRef },\r\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\r\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Optional }, { type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] },\r\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\r\n];\r\nCdkTable.propDecorators = {\r\n    trackBy: [{ type: Input }],\r\n    dataSource: [{ type: Input }],\r\n    multiTemplateDataRows: [{ type: Input }],\r\n    fixedLayout: [{ type: Input }],\r\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\r\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\r\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\r\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\r\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\r\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\r\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\r\n                    descendants: true\r\n                },] }],\r\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\r\n                    descendants: true\r\n                },] }],\r\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-table, table[cdk-table]',\r\n                exportAs: 'cdkTable',\r\n                template: CDK_TABLE_TEMPLATE,\r\n                host: {\r\n                    'class': 'cdk-table',\r\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout'\r\n                },\r\n                encapsulation: ViewEncapsulation.None,\r\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\r\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\r\n                // declared elsewhere, they are checked when their declaration points are checked.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                providers: [\r\n                    { provide: CDK_TABLE, useExisting: CdkTable },\r\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\r\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\r\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\r\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\r\n                ],\r\n                styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\r\n                type: Attribute,\r\n                args: ['role']\r\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\r\n                type: Optional\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [_VIEW_REPEATER_STRATEGY]\r\n            }] }, { type: _CoalescedStyleScheduler, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [_COALESCED_STYLE_SCHEDULER]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }, {\r\n                type: Inject,\r\n                args: [STICKY_POSITIONING_LISTENER]\r\n            }] }, { type: ɵngcc3.ViewportRuler, decorators: [{\r\n                type: Optional\r\n            }] }]; }, { trackBy: [{\r\n            type: Input\r\n        }], dataSource: [{\r\n            type: Input\r\n        }], multiTemplateDataRows: [{\r\n            type: Input\r\n        }], fixedLayout: [{\r\n            type: Input\r\n        }], _rowOutlet: [{\r\n            type: ViewChild,\r\n            args: [DataRowOutlet, { static: true }]\r\n        }], _headerRowOutlet: [{\r\n            type: ViewChild,\r\n            args: [HeaderRowOutlet, { static: true }]\r\n        }], _footerRowOutlet: [{\r\n            type: ViewChild,\r\n            args: [FooterRowOutlet, { static: true }]\r\n        }], _noDataRowOutlet: [{\r\n            type: ViewChild,\r\n            args: [NoDataRowOutlet, { static: true }]\r\n        }], _contentColumnDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkColumnDef, { descendants: true }]\r\n        }], _contentRowDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkRowDef, { descendants: true }]\r\n        }], _contentHeaderRowDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkHeaderRowDef, {\r\n                    descendants: true\r\n                }]\r\n        }], _contentFooterRowDefs: [{\r\n            type: ContentChildren,\r\n            args: [CdkFooterRowDef, {\r\n                    descendants: true\r\n                }]\r\n        }], _noDataRow: [{\r\n            type: ContentChild,\r\n            args: [CdkNoDataRow]\r\n        }] }); })();\r\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\r\nfunction mergeArrayAndSet(array, set) {\r\n    return array.concat(Array.from(set));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\nclass CdkTextColumn {\r\n    constructor(\r\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\r\n    // for better error reporting.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _table, _options) {\r\n        this._table = _table;\r\n        this._options = _options;\r\n        /** Alignment of the cell values. */\r\n        this.justify = 'start';\r\n        this._options = _options || {};\r\n    }\r\n    /** Column name that should be used to reference this column. */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set name(name) {\r\n        this._name = name;\r\n        // With Ivy, inputs can be initialized before static query results are\r\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\r\n        this._syncColumnDefName();\r\n    }\r\n    ngOnInit() {\r\n        this._syncColumnDefName();\r\n        if (this.headerText === undefined) {\r\n            this.headerText = this._createDefaultHeaderText();\r\n        }\r\n        if (!this.dataAccessor) {\r\n            this.dataAccessor =\r\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\r\n        }\r\n        if (this._table) {\r\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\r\n            // since the columnDef will not pick up its content by the time the table finishes checking\r\n            // its content and initializing the rows.\r\n            this.columnDef.cell = this.cell;\r\n            this.columnDef.headerCell = this.headerCell;\r\n            this._table.addColumnDef(this.columnDef);\r\n        }\r\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            throw getTableTextColumnMissingParentTableError();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this._table) {\r\n            this._table.removeColumnDef(this.columnDef);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a default header text. Use the options' header text transformation function if one\r\n     * has been provided. Otherwise simply capitalize the column name.\r\n     */\r\n    _createDefaultHeaderText() {\r\n        const name = this.name;\r\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getTableTextColumnMissingNameError();\r\n        }\r\n        if (this._options && this._options.defaultHeaderTextTransform) {\r\n            return this._options.defaultHeaderTextTransform(name);\r\n        }\r\n        return name[0].toUpperCase() + name.slice(1);\r\n    }\r\n    /** Synchronizes the column definition name with the text column name. */\r\n    _syncColumnDefName() {\r\n        if (this.columnDef) {\r\n            this.columnDef.name = this.name;\r\n        }\r\n    }\r\n}\r\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\r\nCdkTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\r\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\r\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\r\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\r\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\r\n        ɵngcc0.ɵɵelementContainerEnd();\r\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell], encapsulation: 2 });\r\nCdkTextColumn.ctorParameters = () => [\r\n    { type: CdkTable, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\r\n];\r\nCdkTextColumn.propDecorators = {\r\n    name: [{ type: Input }],\r\n    headerText: [{ type: Input }],\r\n    dataAccessor: [{ type: Input }],\r\n    justify: [{ type: Input }],\r\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\r\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\r\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'cdk-text-column',\r\n                template: `\r\n    <ng-container cdkColumnDef>\r\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `,\r\n                encapsulation: ViewEncapsulation.None,\r\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n                // to the table to be inserted into its view. This is problematic when change detection runs since\r\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n                // an ExpressionChangedAfterItHasBeenCheckedError).\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default\r\n            }]\r\n    }], function () { return [{ type: CdkTable, decorators: [{\r\n                type: Optional\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [TEXT_COLUMN_OPTIONS]\r\n            }] }]; }, { justify: [{\r\n            type: Input\r\n        }], name: [{\r\n            type: Input\r\n        }], headerText: [{\r\n            type: Input\r\n        }], dataAccessor: [{\r\n            type: Input\r\n        }], columnDef: [{\r\n            type: ViewChild,\r\n            args: [CdkColumnDef, { static: true }]\r\n        }], cell: [{\r\n            type: ViewChild,\r\n            args: [CdkCellDef, { static: true }]\r\n        }], headerCell: [{\r\n            type: ViewChild,\r\n            args: [CdkHeaderCellDef, { static: true }]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst EXPORTED_DECLARATIONS = [\r\n    CdkTable,\r\n    CdkRowDef,\r\n    CdkCellDef,\r\n    CdkCellOutlet,\r\n    CdkHeaderCellDef,\r\n    CdkFooterCellDef,\r\n    CdkColumnDef,\r\n    CdkCell,\r\n    CdkRow,\r\n    CdkHeaderCell,\r\n    CdkFooterCell,\r\n    CdkHeaderRow,\r\n    CdkHeaderRowDef,\r\n    CdkFooterRow,\r\n    CdkFooterRowDef,\r\n    DataRowOutlet,\r\n    HeaderRowOutlet,\r\n    FooterRowOutlet,\r\n    CdkTextColumn,\r\n    CdkNoDataRow,\r\n    NoDataRowOutlet,\r\n];\r\nclass CdkTableModule {\r\n}\r\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\r\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\r\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ScrollingModule]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: EXPORTED_DECLARATIONS,\r\n                declarations: EXPORTED_DECLARATIONS,\r\n                imports: [ScrollingModule]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; }, imports: function () { return [ScrollingModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\r\n\r\n"]}