{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,UAAIA,QAAQ,GAAG,IAAIC,GAAJ,EAAf;AACA,UAAIC,iBAAiB,GAAG,IAAID,GAAJ,EAAxB;AACA,UAAIE,qBAAqB,GAAG,IAA5B;AACA,UAAIC,6BAA6B,GAAG,KAApC;;AACA,eAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,eAAOA,MAAM,CAACC,OAAPD,CAAe,SAAfA,EAA0B,GAA1BA,EAA+BE,IAA/BF,EAAP;AACH;;AACD,eAASG,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B,eAAOL,SAAS,CAACK,GAAG,CAACC,MAAJD,CAAWE,IAAXF,CAAgBG,SAAhBH,CAA0BA,GAAG,CAACI,KAA9BJ,EAAqCA,GAAG,CAACK,GAAzCL,CAAD,CAAhB;AACH;;AACD,eAASM,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,YAAIC,QAAQ,GAAG,IAAIC,GAAJ,EAAf;AACA,YAAIC,WAAW,GAAG,EAAlB;AACAH,WAAG,CAACG,WAAJH,CAAgBI,OAAhBJ,CAAwB,UAAUK,kBAAV,EAA8B;AAClD,cAAIA,kBAAkB,CAACC,IAAnBD,KAA4B,oBAAhC,EAAsD;AAClD,gBAAIE,YAAY,GAAGF,kBAAkB,CAACG,IAAnBH,CAAwBI,KAA3C;AACA,gBAAIC,SAAS,GAAGlB,eAAe,CAACa,kBAAkB,CAACZ,GAApB,CAA/B;AACA,gBAAIkB,YAAY,GAAG1B,iBAAiB,CAAC2B,GAAlB3B,CAAsBsB,YAAtBtB,CAAnB;;AACA,gBAAI0B,YAAY,IAAI,CAACA,YAAY,CAACE,GAAbF,CAAiBD,SAAjBC,CAArB,EAAkD;AAC9C,kBAAIzB,qBAAJ,EAA2B;AACvB4B,uBAAO,CAACC,IAARD,CAAa,iCAAiCP,YAAjC,GAAgD,oBAAhD,GACP,iGADO,GAEP,8EAFNO;AAGH;AALL,mBAOK,IAAI,CAACH,YAAL,EAAmB;AACpB1B,+BAAiB,CAAC+B,GAAlB/B,CAAsBsB,YAAtBtB,EAAoC0B,YAAY,GAAG,IAAIT,GAAJ,EAAnDjB;AACH;;AACD0B,wBAAY,CAACM,GAAbN,CAAiBD,SAAjBC;;AACA,gBAAI,CAACV,QAAQ,CAACY,GAATZ,CAAaS,SAAbT,CAAL,EAA8B;AAC1BA,sBAAQ,CAACgB,GAAThB,CAAaS,SAAbT;AACAE,yBAAW,CAACe,IAAZf,CAAiBE,kBAAjBF;AACH;AAlBL,iBAoBK;AACDA,uBAAW,CAACe,IAAZf,CAAiBE,kBAAjBF;AACH;AAvBL;AAyBA,eAAOgB,iDAASA,iDAAS,EAATA,EAAanB,GAAbmB,CAATA,EAA4B;AAAEhB,qBAAW,EAAEA;AAAf,SAA5BgB,CAAP;AACH;;AACD,eAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,YAAIC,OAAO,GAAG,IAAIpB,GAAJ,CAAQmB,GAAG,CAAClB,WAAZ,CAAd;AACAmB,eAAO,CAAClB,OAARkB,CAAgB,UAAUC,IAAV,EAAgB;AAC5B,cAAIA,IAAI,CAAC9B,GAAT,EACI,OAAO8B,IAAI,CAAC9B,GAAZ;AACJ+B,gBAAM,CAACC,IAAPD,CAAYD,IAAZC,EAAkBpB,OAAlBoB,CAA0B,UAAUE,GAAV,EAAe;AACrC,gBAAIjB,KAAK,GAAGc,IAAI,CAACG,GAAD,CAAhB;;AACA,gBAAIjB,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACpCa,qBAAO,CAACL,GAARK,CAAYb,KAAZa;AACH;AAJL;AAHJ;AAUA,YAAI7B,GAAG,GAAG4B,GAAG,CAAC5B,GAAd;;AACA,YAAIA,GAAJ,EAAS;AACL,iBAAOA,GAAG,CAACkC,UAAX;AACA,iBAAOlC,GAAG,CAACmC,QAAX;AACH;;AACD,eAAOP,GAAP;AACH;;AACD,eAASQ,aAAT,CAAuBnC,MAAvB,EAA+B;AAC3B,YAAIoC,QAAQ,GAAG1C,SAAS,CAACM,MAAD,CAAxB;;AACA,YAAI,CAACX,QAAQ,CAAC8B,GAAT9B,CAAa+C,QAAb/C,CAAL,EAA6B;AACzB,cAAIgD,MAAM,GAAGC,gDAAMtC,MAANsC,EAAc;AACvB7C,yCAA6B,EAAEA;AADR,WAAd6C,CAAb;;AAGA,cAAI,CAACD,MAAD,IAAWA,MAAM,CAACzB,IAAPyB,KAAgB,UAA/B,EAA2C;AACvC,kBAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACH;;AACDlD,kBAAQ,CAACiC,GAATjC,CAAa+C,QAAb/C,EAAuBqC,QAAQ,CAACrB,gBAAgB,CAACgC,MAAD,CAAjB,CAA/BhD;AACH;;AACD,eAAOA,QAAQ,CAAC6B,GAAT7B,CAAa+C,QAAb/C,CAAP;AACH;;AACM,eAASmD,IAAT,CAAaC,QAAb,EAAuB;AAC1B,YAAIC,IAAI,GAAG,EAAX;;AACA,aAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,cAAI,CAACC,EAAE,GAAG,CAAN,CAAJD,GAAeE,SAAS,CAACD,EAAD,CAAxBD;AACH;;AACD,YAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAC9BA,kBAAQ,GAAG,CAACA,QAAD,CAAXA;AACH;;AACD,YAAIK,MAAM,GAAGL,QAAQ,CAAC,CAAD,CAArB;AACAC,YAAI,CAAChC,OAALgC,CAAa,UAAUK,GAAV,EAAeC,CAAf,EAAkB;AAC3B,cAAID,GAAG,IAAIA,GAAG,CAACnC,IAAJmC,KAAa,UAAxB,EAAoC;AAChCD,kBAAM,IAAIC,GAAG,CAAChD,GAAJgD,CAAQ/C,MAAR+C,CAAe9C,IAAzB6C;AADJ,iBAGK;AACDA,kBAAM,IAAIC,GAAVD;AACH;;AACDA,gBAAM,IAAIL,QAAQ,CAACO,CAAC,GAAG,CAAL,CAAlBF;AAPJ;AASA,eAAOX,aAAa,CAACW,MAAD,CAApB;AACH;;AACM,eAASG,YAAT,GAAuB;AAC1B5D,gBAAQ,CAAC6D,KAAT7D;AACAE,yBAAiB,CAAC2D,KAAlB3D;AACH;;AACM,eAAS4D,wBAAT,GAAmC;AACtC3D,6BAAqB,GAAG,KAAxBA;AACH;;AACM,eAAS4D,oCAAT,GAA+C;AAClD3D,qCAA6B,GAAG,IAAhCA;AACH;;AACM,eAAS4D,qCAAT,GAAgD;AACnD5D,qCAA6B,GAAG,KAAhCA;AACH;;AACD,UAAI6D,MAAM,GAAG;AACTd,WAAG,EAAEA,IADI;AAETS,mBAAW,EAAEA,YAFJ;AAGTE,+BAAuB,EAAEA,wBAHhB;AAITC,2CAAmC,EAAEA,oCAJ5B;AAKTC,4CAAoC,EAAEA;AAL7B,OAAb;;AAOA,OAAC,UAAUE,KAAV,EAAiB;AACdA,aAAK,CAACf,GAANe,GAAYD,MAAM,CAACd,GAAnBe,EAAwBA,KAAK,CAACN,WAANM,GAAoBD,MAAM,CAACL,WAAnDM,EAAgEA,KAAK,CAACJ,uBAANI,GAAgCD,MAAM,CAACH,uBAAvGI,EAAgIA,KAAK,CAACH,mCAANG,GAA4CD,MAAM,CAACF,mCAAnLG,EAAwNA,KAAK,CAACF,oCAANE,GAA6CD,MAAM,CAACD,oCAA5QE;AADJ,SAEGf,IAAG,KAAKA,IAAG,GAAG,EAAX,CAFN;;AAGAA,UAAG,CAAC,SAAD,CAAHA,GAAiBA,IAAjBA;AACA;;AAAAgB,uCAAehB,IAAf;;;","names":["docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","cacheKeyFromLoc","loc","source","body","substring","start","end","processFragments","ast","seenKeys","Set","definitions","forEach","fragmentDefinition","kind","fragmentName","name","value","sourceKey","sourceKeySet","get","has","console","warn","set","add","push","__assign","stripLoc","doc","workSet","node","Object","keys","key","startToken","endToken","parseDocument","cacheKey","parsed","parse","Error","gql","literals","args","_i","arguments","length","result","arg","i","resetCaches","clear","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1","__webpack_exports__"],"sources":["webpack:///node_modules/graphql-tag/lib/index.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { parse } from 'graphql';\r\nvar docCache = new Map();\r\nvar fragmentSourceMap = new Map();\r\nvar printFragmentWarnings = true;\r\nvar experimentalFragmentVariables = false;\r\nfunction normalize(string) {\r\n    return string.replace(/[\\s,]+/g, ' ').trim();\r\n}\r\nfunction cacheKeyFromLoc(loc) {\r\n    return normalize(loc.source.body.substring(loc.start, loc.end));\r\n}\r\nfunction processFragments(ast) {\r\n    var seenKeys = new Set();\r\n    var definitions = [];\r\n    ast.definitions.forEach(function (fragmentDefinition) {\r\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\r\n            var fragmentName = fragmentDefinition.name.value;\r\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\r\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\r\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\r\n                if (printFragmentWarnings) {\r\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\r\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\r\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\r\n                }\r\n            }\r\n            else if (!sourceKeySet) {\r\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\r\n            }\r\n            sourceKeySet.add(sourceKey);\r\n            if (!seenKeys.has(sourceKey)) {\r\n                seenKeys.add(sourceKey);\r\n                definitions.push(fragmentDefinition);\r\n            }\r\n        }\r\n        else {\r\n            definitions.push(fragmentDefinition);\r\n        }\r\n    });\r\n    return __assign(__assign({}, ast), { definitions: definitions });\r\n}\r\nfunction stripLoc(doc) {\r\n    var workSet = new Set(doc.definitions);\r\n    workSet.forEach(function (node) {\r\n        if (node.loc)\r\n            delete node.loc;\r\n        Object.keys(node).forEach(function (key) {\r\n            var value = node[key];\r\n            if (value && typeof value === 'object') {\r\n                workSet.add(value);\r\n            }\r\n        });\r\n    });\r\n    var loc = doc.loc;\r\n    if (loc) {\r\n        delete loc.startToken;\r\n        delete loc.endToken;\r\n    }\r\n    return doc;\r\n}\r\nfunction parseDocument(source) {\r\n    var cacheKey = normalize(source);\r\n    if (!docCache.has(cacheKey)) {\r\n        var parsed = parse(source, {\r\n            experimentalFragmentVariables: experimentalFragmentVariables\r\n        });\r\n        if (!parsed || parsed.kind !== 'Document') {\r\n            throw new Error('Not a valid GraphQL document.');\r\n        }\r\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\r\n    }\r\n    return docCache.get(cacheKey);\r\n}\r\nexport function gql(literals) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    if (typeof literals === 'string') {\r\n        literals = [literals];\r\n    }\r\n    var result = literals[0];\r\n    args.forEach(function (arg, i) {\r\n        if (arg && arg.kind === 'Document') {\r\n            result += arg.loc.source.body;\r\n        }\r\n        else {\r\n            result += arg;\r\n        }\r\n        result += literals[i + 1];\r\n    });\r\n    return parseDocument(result);\r\n}\r\nexport function resetCaches() {\r\n    docCache.clear();\r\n    fragmentSourceMap.clear();\r\n}\r\nexport function disableFragmentWarnings() {\r\n    printFragmentWarnings = false;\r\n}\r\nexport function enableExperimentalFragmentVariables() {\r\n    experimentalFragmentVariables = true;\r\n}\r\nexport function disableExperimentalFragmentVariables() {\r\n    experimentalFragmentVariables = false;\r\n}\r\nvar extras = {\r\n    gql: gql,\r\n    resetCaches: resetCaches,\r\n    disableFragmentWarnings: disableFragmentWarnings,\r\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\r\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\r\n};\r\n(function (gql_1) {\r\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\r\n})(gql || (gql = {}));\r\ngql[\"default\"] = gql;\r\nexport default gql;\r\n"]}