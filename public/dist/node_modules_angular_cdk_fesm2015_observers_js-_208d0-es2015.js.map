{"version":3,"mappings":"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","names":["value","fallbackValue","isNaN","parseFloat","Number","Array","isArray","elementOrRef","ElementRef","nativeElement","MutationObserverFactory","create","callback","MutationObserver","ɵfac","t","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ContentObserver","constructor","_mutationObserverFactory","this","_observedElements","Map","ngOnDestroy","forEach","_","element","_cleanupObserver","observe","coerceElement","Observable","observer","subscription","stream","_observeElement","subscribe","unsubscribe","_unobserveElement","has","get","count","Subject","mutations","next","characterData","childList","subtree","set","disconnect","complete","delete","ɵngcc0","ɵɵinject","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","coerceBooleanProperty","_unsubscribe","_subscribe","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","debounceTime","_a","ɵdir","type","selectors","inputs","outputs","exportAs","ObserversModule","ɵmod","ɵinj","providers"],"sources":["webpack:///node_modules/@angular/cdk/fesm2015/coercion.js","webpack:///node_modules/@angular/cdk/fesm2015/observers.js"],"sourcesContent":["import { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Coerces a data-bound value (typically a string) to a boolean. */\r\nfunction coerceBooleanProperty(value) {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction coerceNumberProperty(value, fallbackValue = 0) {\r\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\r\n}\r\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\r\nfunction _isNumberValue(value) {\r\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\r\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\r\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\r\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction coerceArray(value) {\r\n    return Array.isArray(value) ? value : [value];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Coerces a value to a CSS pixel value. */\r\nfunction coerceCssPixelValue(value) {\r\n    if (value == null) {\r\n        return '';\r\n    }\r\n    return typeof value === 'string' ? value : `${value}px`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Coerces an ElementRef or an Element into an element.\r\n * Useful for APIs that can accept either a ref or the native element itself.\r\n */\r\nfunction coerceElement(elementOrRef) {\r\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Coerces a value to an array of trimmed non-empty strings.\r\n * Any input that is not an array, `null` or `undefined` will be turned into a string\r\n * via `toString()` and subsequently split with the given separator.\r\n * `null` and `undefined` will result in an empty array.\r\n * This results in the following outcomes:\r\n * - `null` -&gt; `[]`\r\n * - `[null]` -&gt; `[\"null\"]`\r\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\r\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\r\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\r\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\r\n *\r\n * Useful for defining CSS classes or table columns.\r\n * @param value the value to coerce into an array of strings\r\n * @param separator split-separator if value isn't an array\r\n */\r\nfunction coerceStringArray(value, separator = /\\s+/) {\r\n    const result = [];\r\n    if (value != null) {\r\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\r\n        for (const sourceValue of sourceValues) {\r\n            const trimmedString = `${sourceValue}`.trim();\r\n            if (trimmedString) {\r\n                result.push(trimmedString);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\r\n\n","import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nclass MutationObserverFactory {\r\n    create(callback) {\r\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n    }\r\n}\r\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\r\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n/** An injectable service that allows watching elements for changes to their content. */\r\nclass ContentObserver {\r\n    constructor(_mutationObserverFactory) {\r\n        this._mutationObserverFactory = _mutationObserverFactory;\r\n        /** Keeps track of the existing MutationObservers so they can be reused. */\r\n        this._observedElements = new Map();\r\n    }\r\n    ngOnDestroy() {\r\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n    }\r\n    observe(elementOrRef) {\r\n        const element = coerceElement(elementOrRef);\r\n        return new Observable((observer) => {\r\n            const stream = this._observeElement(element);\r\n            const subscription = stream.subscribe(observer);\r\n            return () => {\r\n                subscription.unsubscribe();\r\n                this._unobserveElement(element);\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Observes the given element by using the existing MutationObserver if available, or creating a\r\n     * new one if not.\r\n     */\r\n    _observeElement(element) {\r\n        if (!this._observedElements.has(element)) {\r\n            const stream = new Subject();\r\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n            if (observer) {\r\n                observer.observe(element, {\r\n                    characterData: true,\r\n                    childList: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n            this._observedElements.set(element, { observer, stream, count: 1 });\r\n        }\r\n        else {\r\n            this._observedElements.get(element).count++;\r\n        }\r\n        return this._observedElements.get(element).stream;\r\n    }\r\n    /**\r\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n     * observing this element.\r\n     */\r\n    _unobserveElement(element) {\r\n        if (this._observedElements.has(element)) {\r\n            this._observedElements.get(element).count--;\r\n            if (!this._observedElements.get(element).count) {\r\n                this._cleanupObserver(element);\r\n            }\r\n        }\r\n    }\r\n    /** Clean up the underlying MutationObserver for the specified element. */\r\n    _cleanupObserver(element) {\r\n        if (this._observedElements.has(element)) {\r\n            const { observer, stream } = this._observedElements.get(element);\r\n            if (observer) {\r\n                observer.disconnect();\r\n            }\r\n            stream.complete();\r\n            this._observedElements.delete(element);\r\n        }\r\n    }\r\n}\r\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\r\nContentObserver.ɵprov = ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\r\nContentObserver.ctorParameters = () => [\r\n    { type: MutationObserverFactory }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\nclass CdkObserveContent {\r\n    constructor(_contentObserver, _elementRef, _ngZone) {\r\n        this._contentObserver = _contentObserver;\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        /** Event emitted for each change in the element's content. */\r\n        this.event = new EventEmitter();\r\n        this._disabled = false;\r\n        this._currentSubscription = null;\r\n    }\r\n    /**\r\n     * Whether observing content is disabled. This option can be used\r\n     * to disconnect the underlying MutationObserver until it is needed.\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._disabled ? this._unsubscribe() : this._subscribe();\r\n    }\r\n    /** Debounce interval for emitting the changes. */\r\n    get debounce() { return this._debounce; }\r\n    set debounce(value) {\r\n        this._debounce = coerceNumberProperty(value);\r\n        this._subscribe();\r\n    }\r\n    ngAfterContentInit() {\r\n        if (!this._currentSubscription && !this.disabled) {\r\n            this._subscribe();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._unsubscribe();\r\n    }\r\n    _subscribe() {\r\n        this._unsubscribe();\r\n        const stream = this._contentObserver.observe(this._elementRef);\r\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n        // Consider brining it back inside the zone next time we're making breaking changes.\r\n        // Bringing it back inside can cause things like infinite change detection loops and changed\r\n        // after checked errors if people's code isn't handling it properly.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._currentSubscription =\r\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n        });\r\n    }\r\n    _unsubscribe() {\r\n        var _a;\r\n        (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\r\n    }\r\n}\r\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nCdkObserveContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\r\nCdkObserveContent.ctorParameters = () => [\r\n    { type: ContentObserver },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\nCdkObserveContent.propDecorators = {\r\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\r\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\r\n    debounce: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkObserveContent]',\r\n                exportAs: 'cdkObserveContent'\r\n            }]\r\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\r\n            type: Output,\r\n            args: ['cdkObserveContent']\r\n        }], disabled: [{\r\n            type: Input,\r\n            args: ['cdkObserveContentDisabled']\r\n        }], debounce: [{\r\n            type: Input\r\n        }] }); })();\r\nclass ObserversModule {\r\n}\r\nObserversModule.ɵfac = function ObserversModule_Factory(t) { return new (t || ObserversModule)(); };\r\nObserversModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\r\nObserversModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MutationObserverFactory] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: [CdkObserveContent],\r\n                declarations: [CdkObserveContent],\r\n                providers: [MutationObserverFactory]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\r\n\r\n"]}